---
source: src/core/generator/from_openapi.rs
expression: "OpenApiToConfigConverter::new(\"Query\",\n                content.as_str()).unwrap().convert().to_sdl()"
---
schema @server @upstream(baseURL: "https://api.stripe.com/") {
  query: Query
}

input Type103 {
  billing_thresholds: Type0
  clear_usage: Boolean
  deleted: Boolean
  id: String
  metadata: Type0
  price: String
  price_data: Type0
  quantity: Int
  tax_rates: Type0
}

input Type115 {
  is_default: Boolean
  is_platform_default: Boolean
}

input Type12 {
  type: String!
  user: String
}

input Type124 {
  account: String
  customer: String
}

input Type14 {
  type: String!
  user: String
}

input Type142 {
  interval: String
  meter: String
  usage_type: String
}

input Type181 {
  enabled: Boolean!
}

input Type191 {
  account: String
  customer: String
  type: String!
}

input Type216 {
  source_flow_type: String!
}

input Type223 {
  posted_at: Type0
}

input Type27 {
  email: String!
}

input Type38 {
  amount: Int
  description: String
  invoice_line_item: String
  quantity: Int
  tax_amounts: Type0
  tax_rates: Type0
  type: String!
  unit_amount: Int
  unit_amount_decimal: String
}

input Type39 {
  shipping_rate: String
}

input Type4 {
  director: Boolean
  executive: Boolean
  legal_guardian: Boolean
  owner: Boolean
  representative: Boolean
}

input Type40 {
  amount: Int
  description: String
  invoice_line_item: String
  quantity: Int
  tax_amounts: Type0
  tax_rates: Type0
  type: String!
  unit_amount: Int
  unit_amount_decimal: String
}

input Type41 {
  shipping_rate: String
}

input Type6 {
  director: Boolean
  executive: Boolean
  legal_guardian: Boolean
  owner: Boolean
  representative: Boolean
}

input Type65 {
  account: String
  customer: String
}

input Type69 {
  after: String!
}

input Type71 {
  gt: Int
  gte: Int
  lt: Int
  lte: Int
}

input Type83 {
  enabled: Boolean!
  liability: Type0
}

input Type84 {
  address: Type0
  shipping: Type0
  tax: Type0
  tax_exempt: String
  tax_ids: [Type0]
}

input Type86 {
  amount: Int
  currency: String
  description: String
  discountable: Boolean
  discounts: Type0
  invoiceitem: String
  metadata: Type0
  period: Type0
  price: String
  price_data: Type0
  quantity: Int
  tax_behavior: String
  tax_code: Type0
  tax_rates: Type0
  unit_amount: Int
  unit_amount_decimal: String
}

input Type87 {
  account: String
  type: String!
}

input Type92 {
  billing_thresholds: Type0
  clear_usage: Boolean
  deleted: Boolean
  id: String
  metadata: Type0
  price: String
  price_data: Type0
  quantity: Int
  tax_rates: Type0
}

input Type94 {
  enabled: Boolean!
  liability: Type0
}

input Type95 {
  address: Type0
  shipping: Type0
  tax: Type0
  tax_exempt: String
  tax_ids: [Type0]
}

input Type97 {
  amount: Int
  currency: String
  description: String
  discountable: Boolean
  discounts: Type0
  invoiceitem: String
  metadata: Type0
  period: Type0
  price: String
  price_data: Type0
  quantity: Int
  tax_behavior: String
  tax_code: Type0
  tax_rates: Type0
  unit_amount: Int
  unit_amount_decimal: String
}

input Type98 {
  account: String
  type: String!
}

union DeletedExternalAccount = DeletedBankAccount | DeletedCard

union DeletedPaymentSource = DeletedBankAccount | DeletedCard

union ExternalAccount = BankAccount | Card

union PaymentSource = Account | BankAccount | Card | Source

union Type0 = Int | Type0

union Type100 = Int | String

union Type101 = Int | String

union Type102 = String | Type0

union Type104 = Int | String

union Type107 = Int | Type0

union Type109 = Int | Type0

union Type111 = Int | Type0

union Type113 = Int | Type0

union Type118 = Int | Type0

union Type120 = Int | Type0

union Type122 = Int | Type0

union Type127 = Int | Type0

union Type132 = String

union Type136 = Int | Type0

union Type137 = Int | Type0

union Type139 = Int | Type0

union Type141 = Int | Type0

union Type145 = Int | Type0

union Type148 = Int | Type0

union Type15 = Int | Type0

union Type153 = Int | Type0

union Type155 = Int | Type0

union Type157 = Int | Type0

union Type159 = Int | Type0

union Type161 = Int | Type0

union Type164 = Int | Type0

union Type166 = Int | Type0

union Type168 = Int | Type0

union Type17 = Int | Type0

union Type170 = Int | Type0

union Type176 = Int | Type0

union Type177 = Int | Type0

union Type178 = Int | Type0

union Type179 = Int | Type0

union Type182 = Int | Type0

union Type183 = Int | Type0

union Type184 = Int | Type0

union Type193 = Int | Type0

union Type196 = DeletedTerminal.configuration | Terminal.configuration

union Type198 = DeletedTerminal.location | Terminal.location

union Type200 = DeletedTerminal.reader | Terminal.reader

union Type202 = Int | Type0

union Type203 = Int | Type0

union Type205 = Int | Type0

union Type210 = Int | Type0

union Type213 = Int | Type0

union Type219 = Int | Type0

union Type22 = Int | Type0

union Type220 = Int | Type0

union Type222 = Int | Type0

union Type226 = AccountBusinessProfile

union Type228 = AccountSettings

union Type229 = File | String

union Type230 = File | String

union Type231 = AccountAnnualRevenue

union Type232 = Address

union Type233 = String | TaxId

union Type234 = BankAccount | Card | Source

union Type235 = Account | String

union Type236 = Application | String

union Type237 = BalanceTransaction | String

union Type238 = Charge | String

union Type239 = Charge | String

union Type241 = ConnectAccountReference

union Type242 = ApplicationFee | Charge | ConnectCollectionTransfer | CustomerCashBalanceTransaction | Dispute | FeeRefund | Issuing.authorization | Issuing.dispute | Issuing.transaction | Payout | PlatformTaxFee | Refund | ReserveTransaction | String | TaxDeductedAtSource | Topup | Transfer | TransferReversal

union Type243 = Account | String

union Type244 = Customer | DeletedCustomer | String

union Type245 = ExternalAccountRequirements

union Type246 = ExternalAccountRequirements

union Type247 = Account | String

union Type248 = Customer | String

union Type249 = Address

union Type250 = Application | DeletedApplication | String

union Type251 = BillingPortal.configuration | String

union Type252 = PortalFlowsFlow

union Type253 = Account | String

union Type254 = Account | String

union Type255 = Customer | DeletedCustomer | String

union Type256 = Application | String

union Type257 = ApplicationFee | String

union Type258 = BalanceTransaction | String

union Type259 = Customer | DeletedCustomer | String

union Type26 = Int | Type0

union Type260 = BalanceTransaction | String

union Type261 = ChargeFraudDetails

union Type262 = Invoice | String

union Type263 = Account | String

union Type264 = ChargeOutcome

union Type265 = PaymentIntent | String

union Type266 = PaymentMethodDetails

union Type268 = Review | String

union Type269 = Shipping

union Type270 = String | Transfer

union Type271 = String | Transfer

union Type272 = ChargeTransferData

union Type273 = Rule | String

union Type274 = Account | String

union Type275 = PaymentPagesCheckoutSessionAfterExpiration

union Type276 = PaymentPagesCheckoutSessionConsent

union Type277 = PaymentPagesCheckoutSessionConsentCollection

union Type278 = PaymentPagesCheckoutSessionCurrencyConversion

union Type279 = Customer | DeletedCustomer | String

union Type280 = PaymentPagesCheckoutSessionCustomerDetails

union Type281 = Invoice | String

union Type282 = PaymentPagesCheckoutSessionInvoiceCreation

union Type284 = PaymentIntent | String

union Type285 = PaymentLink | String

union Type286 = PaymentMethodConfigBizPaymentMethodConfigurationDetails

union Type287 = CheckoutSessionPaymentMethodOptions

union Type288 = SetupIntent | String

union Type289 = PaymentPagesCheckoutSessionShippingAddressCollection

union Type290 = PaymentPagesCheckoutSessionShippingCost

union Type291 = Shipping

union Type292 = String | Subscription

union Type293 = PaymentPagesCheckoutSessionTotalDetails

union Type294 = Climate.product | String

union Type295 = ClimateRemovalsLocation

union Type296 = ConfirmationTokensResourceMandateData

union Type297 = ConfirmationTokensResourcePaymentMethodPreview

union Type298 = ConfirmationTokensResourceShipping

union Type299 = ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline

union Type300 = Account | String

union Type301 = Account | String

union Type302 = Customer | DeletedCustomer | String

union Type303 = CustomerBalanceTransaction | String

union Type304 = Invoice | String

union Type306 = Refund | String

union Type307 = InvoicesResourceShippingCost

union Type308 = String | TaxRate

union Type309 = CustomUnitAmount

union Type310 = Address

union Type311 = CashBalance

union Type312 = BankAccount | Card | Source | String

union Type313 = Discount

union Type314 = Shipping

union Type318 = String | TestHelpers.testClock

union Type319 = BalanceTransaction | String

union Type320 = CustomerCashBalanceTransaction | String

union Type321 = PaymentIntent | String

union Type322 = Refund | String

union Type323 = BalanceTransaction | String

union Type324 = PaymentIntent | String

union Type325 = CreditNote | String

union Type326 = Customer | String

union Type327 = Invoice | String

union Type328 = Customer | String

union Type329 = Customer | String

union Type330 = CustomerTaxLocation

union Type331 = Customer | DeletedCustomer | String

union Type332 = PromotionCode | String

union Type337 = Customer | DeletedCustomer | String

union Type338 = PromotionCode | String

union Type339 = DeletedDiscount | Discount | String

union Type34 = Int | Type0

union Type340 = Charge | String

union Type341 = PaymentIntent | String

union Type342 = File | String

union Type343 = File | String

union Type344 = File | String

union Type345 = File | String

union Type346 = File | String

union Type347 = File | String

union Type348 = File | String

union Type349 = File | String

union Type350 = File | String

union Type351 = DisputePaymentMethodDetailsCard

union Type352 = NotificationEventRequest

union Type355 = BalanceTransaction | String

union Type356 = ApplicationFee | String

union Type358 = File | String

union Type359 = BankConnectionsResourceAccountholder

union Type36 = Int | Type0

union Type360 = BankConnectionsResourceBalance

union Type361 = BankConnectionsResourceBalanceRefresh

union Type362 = FinancialConnections.accountOwnership | String

union Type363 = BankConnectionsResourceOwnershipRefresh

union Type364 = BankConnectionsResourceTransactionRefresh

union Type366 = BankConnectionsResourceAccountholder

union Type368 = ForwardedRequestContext

union Type369 = ForwardedRequestDetails

union Type370 = ForwardedResponseDetails

union Type371 = Address

union Type372 = GelatoDataDocumentReportDateOfBirth

union Type373 = GelatoDocumentReportError

union Type374 = GelatoDataDocumentReportExpirationDate

union Type375 = GelatoDataDocumentReportIssuedDate

union Type376 = GelatoDataIdNumberReportDate

union Type377 = GelatoIdNumberReportError

union Type378 = GelatoSelfieReportError

union Type379 = Address

union Type380 = GelatoDataVerifiedOutputsDate

union Type381 = GelatoSessionLastError

union Type382 = Identity.verificationReport | String

union Type383 = GelatoVerificationSessionOptions

union Type384 = VerificationSessionRedaction

union Type385 = GelatoVerifiedOutputs

union Type386 = Mandate | String

union Type387 = DeletedTaxId | String | TaxId

union Type388 = Application | DeletedApplication | String

union Type389 = Charge | String

union Type390 = Customer | DeletedCustomer | String

union Type391 = Address

union Type392 = Shipping

union Type393 = PaymentMethod | String

union Type394 = BankAccount | Card | Source | String

union Type395 = Discount

union Type396 = DeletedDiscount | Discount | String

union Type397 = InvoicesResourceFromInvoice

union Type398 = ApiErrors

union Type399 = Invoice | String

union Type401 = Account | String

union Type402 = PaymentIntent | String

union Type403 = Quote | String

union Type404 = InvoicesResourceInvoiceRendering

union Type405 = InvoicesResourceShippingCost

union Type406 = Shipping

union Type407 = String | Subscription

union Type408 = SubscriptionDetailsData

union Type409 = String | TestHelpers.testClock

union Type410 = InvoiceTransferData

union Type411 = PaymentMethod | String

union Type412 = InvoiceSettingRenderingOptions

union Type413 = DeletedTaxId | String | TaxId

union Type414 = ConnectAccountReference

union Type415 = DeletedTaxId | String | TaxId

union Type416 = String | TaxRate

union Type417 = Account | String

union Type418 = Customer | DeletedCustomer | String

union Type419 = Discount | String

union Type420 = Invoice | String

union Type421 = Price

union Type422 = String | Subscription

union Type423 = String | TestHelpers.testClock

union Type424 = InvoicePaymentMethodOptionsAcssDebit

union Type425 = InvoicePaymentMethodOptionsBancontact

union Type426 = InvoicePaymentMethodOptionsCard

union Type427 = InvoicePaymentMethodOptionsCustomerBalance

union Type428 = InvoicePaymentMethodOptionsKonbini

union Type429 = InvoicePaymentMethodOptionsSepaDebit

union Type430 = InvoicePaymentMethodOptionsUsBankAccount

union Type431 = InvoicesPaymentMethodOptions

union Type432 = Invoice | String

union Type433 = InvoiceRenderingPdf

union Type434 = InvoicesResourceLineItemsCreditedItems

union Type435 = ShippingRate | String

union Type436 = IssuingAuthorizationAmountDetails

union Type437 = Issuing.cardholder | String

union Type438 = IssuingAuthorizationNetworkData

union Type439 = IssuingAuthorizationPendingRequest

union Type44 = Int | Type0

union Type440 = Issuing.token | String

union Type441 = IssuingAuthorizationTreasury

union Type442 = Issuing.personalizationDesign | String

union Type443 = Issuing.card | String

union Type444 = Issuing.card | String

union Type445 = IssuingCardShipping

union Type446 = IssuingCardWallets

union Type447 = IssuingCardholderCompany

union Type448 = IssuingCardholderIndividual

union Type449 = IssuingCardholderAuthorizationControls

union Type450 = Issuing.transaction | String

union Type451 = IssuingDisputeTreasury

union Type452 = File | String

union Type453 = IssuingPersonalizationDesignCarrierText

union Type454 = Issuing.physicalBundle | String

union Type455 = Issuing.card | String

union Type456 = IssuingTransactionAmountDetails

union Type457 = Issuing.authorization | String

union Type458 = BalanceTransaction | String

union Type459 = Issuing.card | String

union Type460 = Issuing.cardholder | String

union Type461 = Issuing.dispute | String

union Type462 = IssuingTransactionNetworkData

union Type463 = IssuingTransactionPurchaseDetails

union Type464 = Issuing.token | String

union Type465 = IssuingTransactionTreasury

union Type466 = IssuingAuthorizationAmountDetails

union Type467 = IssuingAuthorizationAmountDetails

union Type468 = IssuingAuthorizationAuthenticationExemption

union Type469 = IssuingAuthorizationThreeDSecure

union Type47 = Customer | DeletedCustomer

union Type470 = IssuingCardShippingCustoms

union Type471 = IssuingCardholderUserTermsAcceptance

union Type472 = File | String

union Type473 = File | String

union Type474 = IssuingCardholderCardIssuing

union Type475 = IssuingCardholderIndividualDob

union Type476 = IssuingCardholderVerification

union Type477 = IssuingCardholderIdDocument

union Type478 = File | String

union Type479 = File | String

union Type480 = File | String

union Type481 = File | String

union Type482 = File | String

union Type483 = File | String

union Type484 = File | String

union Type485 = File | String

union Type486 = File | String

union Type487 = File | String

union Type488 = IssuingTransactionFlightData

union Type489 = IssuingTransactionFuelData

union Type490 = IssuingTransactionLodgingData

union Type491 = Price

union Type492 = LegalEntityJapanAddress

union Type493 = LegalEntityJapanAddress

union Type494 = LegalEntityUboDeclaration

union Type495 = LegalEntityCompanyVerification

union Type496 = File | String

union Type497 = File | String

union Type498 = LegalEntityPersonVerificationDocument

union Type499 = File | String

union Type500 = File | String

union Type501 = Discount | String

union Type502 = Invoiceitem | String

union Type503 = Price

union Type504 = InvoicesResourceLineItemsProrationDetails

union Type505 = String | Subscription

union Type506 = String | SubscriptionItem

union Type507 = PaymentMethod | String

union Type508 = Mandate | String

union Type509 = Mandate | String

union Type510 = Application | String

union Type511 = PaymentFlowsAutomaticPaymentMethodsPaymentIntent

union Type512 = Customer | DeletedCustomer | String

union Type513 = Invoice | String

union Type514 = ApiErrors

union Type515 = Charge | String

union Type516 = PaymentIntentNextAction

union Type517 = Account | String

union Type518 = PaymentMethod | String

union Type519 = PaymentMethodConfigBizPaymentMethodConfigurationDetails

union Type520 = PaymentIntentPaymentMethodOptions

union Type521 = PaymentIntentProcessing

union Type522 = Review | String

union Type523 = Shipping

union Type524 = TransferData

union Type525 = PaymentIntentNextActionKonbiniFamilymart

union Type526 = PaymentIntentNextActionKonbiniLawson

union Type527 = PaymentIntentNextActionKonbiniMinistop

union Type528 = PaymentIntentNextActionKonbiniSeicomart

union Type529 = PaymentIntentPaymentMethodOptionsAcssDebit | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type530 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAffirm

union Type531 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAfterpayClearpay

union Type532 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsAlipay

union Type533 = PaymentIntentPaymentMethodOptionsAuBecsDebit | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type534 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBacsDebit

union Type535 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBancontact

union Type536 = PaymentIntentPaymentMethodOptionsBlik | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type537 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsBoleto

union Type538 = PaymentIntentPaymentMethodOptionsCard | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type539 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCardPresent

union Type540 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCashapp

union Type541 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsCustomerBalance

union Type542 = PaymentIntentPaymentMethodOptionsEps | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type543 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsFpx

union Type544 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGiropay

union Type545 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsGrabpay

union Type546 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsIdeal

union Type547 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsInteracPresent

union Type548 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKlarna

union Type549 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsKonbini

union Type550 = PaymentIntentPaymentMethodOptionsLink | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type551 = PaymentIntentPaymentMethodOptionsMobilepay | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type552 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsOxxo

union Type553 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsP24

union Type554 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPaynow

union Type555 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPaypal

union Type556 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPix

union Type557 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsPromptpay

union Type558 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsRevolutPay

union Type559 = PaymentIntentPaymentMethodOptionsSepaDebit | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type56 = Int | Type0

union Type560 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsSofort

union Type561 = PaymentIntentPaymentMethodOptionsSwish | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type562 = PaymentIntentPaymentMethodOptionsUsBankAccount | PaymentIntentTypeSpecificPaymentMethodOptionsClient

union Type563 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsWechatPay

union Type564 = PaymentIntentTypeSpecificPaymentMethodOptionsClient | PaymentMethodOptionsZip

union Type565 = PaymentMethodOptionsCardInstallments

union Type566 = PaymentMethodOptionsCardMandateOptions

union Type567 = Application | DeletedApplication | String

union Type568 = PaymentLinksResourceConsentCollection

union Type569 = PaymentLinksResourceInvoiceCreation

union Type571 = Account | String

union Type572 = PaymentLinksResourcePaymentIntentData

union Type573 = PaymentLinksResourceRestrictions

union Type574 = PaymentLinksResourceShippingAddressCollection

union Type575 = PaymentLinksResourceSubscriptionData

union Type576 = PaymentLinksResourceTransferData

union Type577 = ConnectAccountReference

union Type578 = PaymentLinksResourcePaymentMethodReuseAgreement

union Type579 = PaymentLinksResourceCustomTextPosition

union Type58 = Int | Type0

union Type580 = PaymentLinksResourceCustomTextPosition

union Type581 = PaymentLinksResourceCustomTextPosition

union Type582 = PaymentLinksResourceCustomTextPosition

union Type583 = PaymentLinksResourceInvoiceSettings

union Type584 = DeletedTaxId | String | TaxId

union Type585 = ConnectAccountReference

union Type586 = InvoiceSettingRenderingOptions

union Type587 = ShippingRate | String

union Type588 = SubscriptionsTrialsResourceTrialSettings

union Type589 = Account | String

union Type590 = Customer | String

union Type591 = PaymentMethodCardChecks

union Type592 = PaymentMethodCardGeneratedCard

union Type593 = Networks

union Type594 = ThreeDSecureUsage

union Type595 = PaymentMethodCardWallet

union Type596 = CardGeneratedFromPaymentMethodDetails

union Type597 = SetupAttempt | String

union Type598 = PaymentMethodCardPresentNetworks

union Type599 = Address

union Type600 = Address

union Type601 = Address

union Type602 = Address

union Type603 = PaymentMethod | String

union Type604 = Mandate | String

union Type605 = PaymentMethodDetailsCardChecks

union Type606 = PaymentMethodDetailsCardInstallments

union Type607 = PaymentMethodDetailsCardNetworkToken

union Type608 = ThreeDSecureDetailsCharge

union Type609 = PaymentMethodDetailsCardWallet

union Type61 = Int | Type0

union Type610 = PaymentMethodDetailsCardInstallmentsPlan

union Type611 = PaymentMethodDetailsCardPresentOffline

union Type612 = PaymentMethodDetailsCardPresentReceipt

union Type613 = Address

union Type614 = Address

union Type615 = Address

union Type616 = Address

union Type617 = PaymentMethod | String

union Type618 = Mandate | String

union Type619 = PaymentMethodDetailsInteracPresentReceipt

union Type620 = PaymentMethodDetailsKonbiniStore

union Type621 = InternalCard

union Type622 = PaypalSellerProtection

union Type623 = PaymentMethod | String

union Type624 = Mandate | String

union Type625 = Mandate | String

union Type626 = PaymentMethodCardPresentNetworks

union Type627 = PaymentFlowsPrivatePaymentMethodsKlarnaDob

union Type628 = PaymentMethodDetailsCardInstallmentsPlan

union Type629 = SepaDebitGeneratedFrom

union Type63 = Int | Type0

union Type630 = UsBankAccountNetworks

union Type631 = PaymentMethodUsBankAccountStatusDetails

union Type632 = PaymentPagesCheckoutSessionAfterExpirationRecovery

union Type633 = ConnectAccountReference

union Type634 = PaymentPagesCheckoutSessionPaymentMethodReuseAgreement

union Type635 = PaymentPagesCheckoutSessionCustomTextPosition

union Type636 = PaymentPagesCheckoutSessionCustomTextPosition

union Type637 = PaymentPagesCheckoutSessionCustomTextPosition

union Type638 = PaymentPagesCheckoutSessionCustomTextPosition

union Type639 = Address

union Type640 = DeletedTaxId | String | TaxId

union Type641 = ConnectAccountReference

union Type642 = InvoiceSettingRenderingOptions

union Type643 = ShippingRate | String

union Type644 = ShippingRate | String

union Type649 = BalanceTransaction | String

union Type650 = BankAccount | Card | DeletedBankAccount | DeletedCard | String

union Type651 = BalanceTransaction | String

union Type652 = Payout | String

union Type653 = Payout | String

union Type654 = LegalEntityJapanAddress

union Type655 = LegalEntityJapanAddress

union Type656 = PersonFutureRequirements

union Type657 = PersonRequirements

union Type658 = DeletedProduct | Product | String

union Type659 = TransformUsage

union Type660 = PortalFlowsFlowSubscriptionCancel

union Type661 = PortalFlowsFlowSubscriptionUpdate

union Type662 = PortalFlowsFlowSubscriptionUpdateConfirm

union Type663 = PortalFlowsAfterCompletionHostedConfirmation

union Type664 = PortalFlowsAfterCompletionRedirect

union Type665 = PortalFlowsRetention

union Type666 = PortalFlowsCouponOffer

union Type667 = CustomUnitAmount

union Type668 = DeletedProduct | Product | String

union Type669 = Recurring

union Type670 = TransformQuantity

union Type671 = Price | String

union Type672 = PackageDimensions

union Type673 = String | TaxCode

union Type674 = Customer | DeletedCustomer | String

union Type675 = Application | DeletedApplication | String

union Type676 = Customer | DeletedCustomer | String

union Type677 = String | TaxRate

union Type678 = Discount | String

union Type679 = QuotesResourceFromQuote

union Type68 = Int | Type0

union Type680 = DeletedInvoice | Invoice | String

union Type682 = Account | String

union Type683 = String | Subscription

union Type684 = String | SubscriptionSchedule

union Type685 = String | TestHelpers.testClock

union Type686 = QuotesResourceTransferData

union Type687 = ConnectAccountReference

union Type688 = QuotesResourceRecurring

union Type689 = Quote | String

union Type690 = Account | String

union Type692 = Charge | String

union Type693 = PaymentIntent | String

union Type695 = BalanceTransaction | String

union Type696 = Charge | String

union Type697 = BalanceTransaction | String

union Type698 = PaymentIntent | String

union Type699 = String | TransferReversal

union Type700 = String | TransferReversal

union Type701 = RefundNextActionDisplayDetails

union Type702 = File

union Type703 = Charge | String

union Type704 = RadarReviewResourceLocation

union Type705 = PaymentIntent | String

union Type706 = RadarReviewResourceSession

union Type707 = File

union Type708 = ConnectAccountReference

union Type709 = Charge | String

union Type710 = SetupAttempt | String

union Type711 = Application | String

union Type712 = Customer | DeletedCustomer | String

union Type713 = Account | String

union Type714 = PaymentMethod | String

union Type715 = ApiErrors

union Type716 = SetupIntent | String

union Type717 = PaymentMethod | String

union Type718 = Mandate | String

union Type719 = SetupAttemptPaymentMethodDetailsCardChecks

union Type720 = ThreeDSecureDetails

union Type721 = SetupAttemptPaymentMethodDetailsCardWallet

union Type722 = PaymentMethod | String

union Type723 = PaymentMethod | String

union Type724 = Mandate | String

union Type725 = PaymentMethod | String

union Type726 = Mandate | String

union Type727 = Application | String

union Type728 = PaymentFlowsAutomaticPaymentMethodsSetupIntent

union Type729 = Customer | DeletedCustomer | String

union Type73 = Int | Type0

union Type730 = ApiErrors

union Type731 = SetupAttempt | String

union Type732 = Mandate | String

union Type733 = SetupIntentNextAction

union Type734 = Account | String

union Type735 = PaymentMethod | String

union Type736 = PaymentMethodConfigBizPaymentMethodConfigurationDetails

union Type737 = SetupIntentPaymentMethodOptions

union Type738 = Mandate | String

union Type739 = SetupIntentPaymentMethodOptionsAcssDebit | SetupIntentTypeSpecificPaymentMethodOptionsClient

union Type740 = SetupIntentPaymentMethodOptionsLink | SetupIntentTypeSpecificPaymentMethodOptionsClient

union Type741 = SetupIntentPaymentMethodOptionsPaypal | SetupIntentTypeSpecificPaymentMethodOptionsClient

union Type742 = SetupIntentPaymentMethodOptionsSepaDebit | SetupIntentTypeSpecificPaymentMethodOptionsClient

union Type743 = SetupIntentPaymentMethodOptionsUsBankAccount | SetupIntentTypeSpecificPaymentMethodOptionsClient

union Type744 = SetupIntentPaymentMethodOptionsCardMandateOptions

union Type745 = ShippingRateDeliveryEstimate

union Type746 = String | TaxCode

union Type747 = ShippingRateDeliveryEstimateBound

union Type748 = ShippingRateDeliveryEstimateBound

union Type749 = SourceOwner

union Type75 = Int | Type0

union Type750 = Address

union Type751 = Address

union Type752 = Application | DeletedApplication | String

union Type753 = SubscriptionsResourceBillingCycleAnchorConfig

union Type754 = SubscriptionBillingThresholds

union Type755 = CancellationDetails

union Type756 = Customer | DeletedCustomer | String

union Type757 = PaymentMethod | String

union Type758 = BankAccount | Card | Source | String

union Type759 = Discount

union Type761 = Invoice | String

union Type762 = Account | String

union Type763 = SubscriptionsResourcePauseCollection

union Type764 = SubscriptionsResourcePaymentSettings

union Type765 = SubscriptionPendingInvoiceItemInterval

union Type766 = SetupIntent | String

union Type767 = SubscriptionsResourcePendingUpdate

union Type768 = String | SubscriptionSchedule

union Type769 = String | TestHelpers.testClock

union Type77 = Int | Type0

union Type770 = SubscriptionTransferData

union Type771 = SubscriptionsTrialsResourceTrialSettings

union Type772 = ConnectAccountReference

union Type773 = SubscriptionItemBillingThresholds

union Type774 = Application | DeletedApplication | String

union Type775 = SubscriptionScheduleCurrentPhase

union Type776 = Customer | DeletedCustomer | String

union Type777 = String | Subscription

union Type778 = String | TestHelpers.testClock

union Type779 = DeletedPrice | Price | String

union Type780 = SubscriptionItemBillingThresholds

union Type781 = DeletedPrice | Price | String

union Type782 = SubscriptionBillingThresholds

union Type783 = Coupon | DeletedCoupon | String

union Type784 = PaymentMethod | String

union Type785 = InvoiceSettingSubscriptionSchedulePhaseSetting

union Type786 = Account | String

union Type787 = SubscriptionTransferData

union Type788 = SubscriptionBillingThresholds

union Type789 = PaymentMethod | String

union Type79 = Int | Type0

union Type790 = Account | String

union Type791 = SubscriptionTransferData

union Type792 = ConnectAccountReference

union Type793 = Account | String

union Type794 = InvoicePaymentMethodOptionsAcssDebit

union Type795 = InvoicePaymentMethodOptionsBancontact

union Type796 = SubscriptionPaymentMethodOptionsCard

union Type797 = InvoicePaymentMethodOptionsCustomerBalance

union Type798 = InvoicePaymentMethodOptionsKonbini

union Type799 = InvoicePaymentMethodOptionsSepaDebit

union Type80 = Int | Type0

union Type800 = InvoicePaymentMethodOptionsUsBankAccount

union Type801 = SubscriptionsResourcePaymentMethodOptions

union Type803 = TaxProductResourceTaxCalculationShippingCost

union Type804 = TaxProductResourceTaxSettingsHeadOffice

union Type806 = TaxProductResourceTaxTransactionResourceReversal

union Type807 = TaxProductResourceTaxTransactionShippingCost

union Type808 = TaxProductResourceTaxTransactionLineItemResourceReversal

union Type809 = Account | String

union Type810 = Application | String

union Type811 = Customer | String

union Type812 = Customer | String

union Type813 = TaxIDsOwner

union Type814 = TaxIdVerification

union Type815 = TaxProductResourcePostalAddress

union Type816 = TaxProductResourceLineItemTaxRateDetails

union Type817 = TerminalReaderReaderResourceReaderAction

union Type818 = String | Terminal.location

union Type819 = File | String

union Type820 = PaymentIntent | String

union Type821 = SetupIntent | String

union Type822 = Charge | String

union Type823 = PaymentIntent | String

union Type824 = Refund | String

union Type825 = TerminalReaderReaderResourceCart

union Type826 = BalanceTransaction | String

union Type827 = Source

union Type828 = BalanceTransaction | String

union Type829 = Account | String

union Type830 = Charge | String

union Type832 = Charge | String

union Type833 = Account | String

union Type834 = BalanceTransaction | String

union Type835 = Refund | String

union Type836 = Refund | String

union Type837 = String | Transfer

union Type838 = String | Treasury.transaction

union Type839 = TreasuryReceivedDebitsResourceDebitReversalLinkedFlows

union Type840 = String | Treasury.transaction

union Type841 = TreasuryFinancialAccountsResourcePlatformRestrictions

union Type842 = TreasuryInboundTransfersResourceFailureDetails

union Type843 = InboundTransfers

union Type844 = String | Treasury.transaction

union Type845 = OutboundPaymentsPaymentMethodDetails

union Type846 = TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails

union Type847 = TreasuryOutboundPaymentsResourceReturnedStatus

union Type848 = String | Treasury.transaction

union Type849 = TreasuryOutboundTransfersResourceReturnedDetails

union Type85 = String | Type0

union Type850 = String | Treasury.transaction

union Type851 = TreasuryReceivedCreditsResourceReversalDetails

union Type852 = String | Treasury.transaction

union Type853 = TreasuryReceivedDebitsResourceReversalDetails

union Type854 = String | Treasury.transaction

union Type856 = TreasuryTransactionsResourceFlowDetails

union Type857 = TreasuryTransactionsResourceFlowDetails

union Type858 = String | Treasury.transaction

union Type859 = TreasuryFinancialAccountsResourceClosedStatusDetails

union Type860 = String | Treasury.transaction

union Type861 = String | Treasury.transaction

union Type862 = TreasuryReceivedCreditsResourceSourceFlowsDetails

union Type88 = String

union Type89 = Int | String

union Type9 = Int | Type0

union Type90 = Int | String

union Type91 = String | Type0

union Type93 = Int | String

union Type96 = String | Type0

union Type99 = String

  """
  This is an object representing a Stripe account. You can retrieve it to see
properties on the account like its current requirements or if the account is
enabled to make live charges or receive payouts.

For Custom accounts, the properties below are always returned. For other accounts, some properties are returned until that
account has started to go through Connect Onboarding. Once you create an [Account Link](https://stripe.com/docs/api/account_links) or [Account Session](https://stripe.com/docs/api/account_sessions),
some properties are only returned for Custom accounts. Learn about the differences [between accounts](https://stripe.com/docs/connect/accounts).
  """
type Account {
  """
  Business information about the account.
  """
  business_profile: Type226
  """
  The business type. Once you create an [Account Link](https://stripe.com/docs/api/account_links) or [Account Session](https://stripe.com/docs/api/account_sessions), this property is only returned for Custom accounts.
  """
  business_type: String
  """
  
  """
  capabilities: AccountCapabilities
  """
  Whether the account can create live charges.
  """
  charges_enabled: Boolean
  """
  
  """
  company: LegalEntityCompany
  """
  
  """
  controller: AccountUnificationAccountController
  """
  The account's country.
  """
  country: String
  """
  Time at which the account was connected. Measured in seconds since the Unix epoch.
  """
  created: Int
  """
  Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  """
  default_currency: String
  """
  Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
  """
  details_submitted: Boolean
  """
  An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
  """
  email: String
  """
  External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
  """
  external_accounts: Type227
  """
  
  """
  future_requirements: AccountFutureRequirements
  """
  Unique identifier for the object.
  """
  id: String!
  """
  This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform prefilling and account onboarding steps.

Related guide: [Handling identity verification with the API](https://stripe.com/docs/connect/handling-api-verification#person-information)
  """
  individual: Person
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Whether Stripe can send payouts to this account.
  """
  payouts_enabled: Boolean
  """
  
  """
  requirements: AccountRequirements
  """
  Options for customizing how the account functions within Stripe.
  """
  settings: Type228
  """
  
  """
  tos_acceptance: AccountTosAcceptance
  """
  The Stripe account type. Can be `standard`, `express`, or `custom`.
  """
  type: String
}

  """
  
  """
type AccountAnnualRevenue {
  """
  A non-negative integer representing the amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  """
  The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023.
  """
  fiscal_year_end: String
}

  """
  
  """
type AccountBacsDebitPaymentsSettings {
  """
  The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free.
  """
  display_name: String
  """
  The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners.
  """
  service_user_number: String
}

  """
  
  """
type AccountBrandingSettings {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
  """
  icon: Type229
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
  """
  logo: Type230
  """
  A CSS hex color value representing the primary branding color for this account
  """
  primary_color: String
  """
  A CSS hex color value representing the secondary branding color for this account
  """
  secondary_color: String
}

  """
  
  """
type AccountBusinessProfile {
  """
  The applicant's gross annual revenue for its preceding fiscal year.
  """
  annual_revenue: Type231
  """
  An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.
  """
  estimated_worker_count: Int
  """
  [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
  """
  mcc: String
  """
  
  """
  monthly_estimated_revenue: AccountMonthlyEstimatedRevenue
  """
  The customer-facing business name.
  """
  name: String
  """
  Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
  """
  product_description: String
  """
  A publicly available mailing address for sending support issues to.
  """
  support_address: Type232
  """
  A publicly available email address for sending support issues to.
  """
  support_email: String
  """
  A publicly available phone number to call with support issues.
  """
  support_phone: String
  """
  A publicly available website for handling support issues.
  """
  support_url: String
  """
  The business's publicly available website.
  """
  url: String
}

  """
  
  """
type AccountCapabilities {
  """
  The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
  """
  acss_debit_payments: String
  """
  The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
  """
  affirm_payments: String
  """
  The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
  """
  afterpay_clearpay_payments: String
  """
  The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.
  """
  amazon_pay_payments: String
  """
  The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
  """
  au_becs_debit_payments: String
  """
  The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
  """
  bacs_debit_payments: String
  """
  The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
  """
  bancontact_payments: String
  """
  The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
  """
  bank_transfer_payments: String
  """
  The status of the blik payments capability of the account, or whether the account can directly process blik charges.
  """
  blik_payments: String
  """
  The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
  """
  boleto_payments: String
  """
  The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
  """
  card_issuing: String
  """
  The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
  """
  card_payments: String
  """
  The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
  """
  cartes_bancaires_payments: String
  """
  The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
  """
  cashapp_payments: String
  """
  The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
  """
  eps_payments: String
  """
  The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
  """
  fpx_payments: String
  """
  The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
  """
  giropay_payments: String
  """
  The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
  """
  grabpay_payments: String
  """
  The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
  """
  ideal_payments: String
  """
  The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
  """
  india_international_payments: String
  """
  The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
  """
  jcb_payments: String
  """
  The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
  """
  klarna_payments: String
  """
  The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
  """
  konbini_payments: String
  """
  The status of the legacy payments capability of the account.
  """
  legacy_payments: String
  """
  The status of the link_payments capability of the account, or whether the account can directly process Link charges.
  """
  link_payments: String
  """
  The status of the MobilepPay capability of the account, or whether the account can directly process MobilePay charges.
  """
  mobilepay_payments: String
  """
  The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
  """
  oxxo_payments: String
  """
  The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
  """
  p24_payments: String
  """
  The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
  """
  paynow_payments: String
  """
  The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
  """
  promptpay_payments: String
  """
  The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
  """
  revolut_pay_payments: String
  """
  The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
  """
  sepa_debit_payments: String
  """
  The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
  """
  sofort_payments: String
  """
  The status of the Swish capability of the account, or whether the account can directly process Swish payments.
  """
  swish_payments: String
  """
  The status of the tax reporting 1099-K (US) capability of the account.
  """
  tax_reporting_us_1099_k: String
  """
  The status of the tax reporting 1099-MISC (US) capability of the account.
  """
  tax_reporting_us_1099_misc: String
  """
  The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
  """
  transfers: String
  """
  The status of the banking capability, or whether the account can have bank accounts.
  """
  treasury: String
  """
  The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
  """
  us_bank_account_ach_payments: String
  """
  The status of the Zip capability of the account, or whether the account can directly process Zip charges.
  """
  zip_payments: String
}

  """
  
  """
type AccountCapabilityFutureRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
  """
  current_deadline: Int
  """
  Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  """
  currently_due: [String]!
  """
  This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
  """
  disabled_reason: String
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]!
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
  """
  eventually_due: [String]!
  """
  Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]!
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]!
}

  """
  
  """
type AccountCapabilityRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
  """
  current_deadline: Int
  """
  Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
  """
  currently_due: [String]!
  """
  If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.

`rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:

- [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)

If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
  """
  disabled_reason: String
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]!
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  """
  eventually_due: [String]!
  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
  """
  past_due: [String]!
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]!
}

  """
  
  """
type AccountCardIssuingSettings {
  """
  
  """
  tos_acceptance: CardIssuingAccountTermsOfService
}

  """
  
  """
type AccountCardPaymentsSettings {
  """
  
  """
  decline_on: AccountDeclineChargeOn
  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix: String
  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix_kana: String
  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix_kanji: String
}

  """
  
  """
type AccountDashboardSettings {
  """
  The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
  """
  display_name: String
  """
  The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
  """
  timezone: String
}

  """
  
  """
type AccountDeclineChargeOn {
  """
  Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
  """
  avs_failure: Boolean!
  """
  Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
  """
  cvc_failure: Boolean!
}

  """
  
  """
type AccountFutureRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
  """
  current_deadline: Int
  """
  Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  """
  currently_due: [String]
  """
  This is typed as a string for consistency with `requirements.disabled_reason`.
  """
  disabled_reason: String
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
  """
  eventually_due: [String]
  """
  Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]
}

  """
  
  """
type AccountInvoicesSettings {
  """
  The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized.
  """
  default_account_tax_ids: [Type233]
}

  """
  Account Links are the means by which a Connect platform grants a connected account permission to access
Stripe-hosted applications, such as Connect Onboarding.

Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
  """
type AccountLink {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The timestamp at which this account link will expire.
  """
  expires_at: Int!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The URL for the account link.
  """
  url: String!
}

  """
  
  """
type AccountMonthlyEstimatedRevenue {
  """
  A non-negative integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
}

  """
  
  """
type AccountPaymentsSettings {
  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
  """
  statement_descriptor: String
  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kana: String
  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kanji: String
  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix_kana: String
  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix_kanji: String
}

  """
  
  """
type AccountPayoutSettings {
  """
  A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
  """
  debit_negative_balances: Boolean!
  """
  
  """
  schedule: TransferSchedule!
  """
  The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
  """
  statement_descriptor: String
}

  """
  
  """
type AccountRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
  """
  current_deadline: Int
  """
  Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]
  """
  If the account is disabled, this string describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification). Can be `action_required.requested_capabilities`, `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.incomplete_verification`, `rejected.listed`, `rejected.other`, `rejected.terms_of_service`, `under_review`, or `other`.
  """
  disabled_reason: String
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  """
  eventually_due: [String]
  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
  """
  past_due: [String]
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

  """
  
  """
type AccountRequirementsAlternative {
  """
  Fields that can be provided to satisfy all fields in `original_fields_due`.
  """
  alternative_fields_due: [String]!
  """
  Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
  """
  original_fields_due: [String]!
}

  """
  
  """
type AccountRequirementsError {
  """
  The code for the type of error.
  """
  code: String!
  """
  An informative message that indicates the error type and provides additional details about the error.
  """
  reason: String!
  """
  The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
  """
  requirement: String!
}

  """
  
  """
type AccountSepaDebitPaymentsSettings {
  """
  SEPA creditor identifier that identifies the company making the payment.
  """
  creditor_id: String
}

  """
  An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.

We recommend that you create an AccountSession each time you need to display an embedded component
to your user. Do not save AccountSessions to your database as they expire relatively
quickly, and cannot be used more than once.

Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
  """
type AccountSession {
  """
  The ID of the account the AccountSession was created for
  """
  account: String!
  """
  The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.

The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.

Refer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.
  """
  client_secret: String!
  """
  
  """
  components: ConnectEmbeddedAccountSessionCreateComponents!
  """
  The timestamp at which this AccountSession will expire.
  """
  expires_at: Int!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type AccountSettings {
  """
  
  """
  bacs_debit_payments: AccountBacsDebitPaymentsSettings
  """
  
  """
  branding: AccountBrandingSettings!
  """
  
  """
  card_issuing: AccountCardIssuingSettings
  """
  
  """
  card_payments: AccountCardPaymentsSettings!
  """
  
  """
  dashboard: AccountDashboardSettings!
  """
  
  """
  invoices: AccountInvoicesSettings
  """
  
  """
  payments: AccountPaymentsSettings!
  """
  
  """
  payouts: AccountPayoutSettings
  """
  
  """
  sepa_debit_payments: AccountSepaDebitPaymentsSettings
  """
  
  """
  treasury: AccountTreasurySettings
}

  """
  
  """
type AccountTermsOfService {
  """
  The Unix timestamp marking when the account representative accepted the service agreement.
  """
  date: Int
  """
  The IP address from which the account representative accepted the service agreement.
  """
  ip: String
  """
  The user agent of the browser from which the account representative accepted the service agreement.
  """
  user_agent: String
}

  """
  
  """
type AccountTosAcceptance {
  """
  The Unix timestamp marking when the account representative accepted their service agreement
  """
  date: Int
  """
  The IP address from which the account representative accepted their service agreement
  """
  ip: String
  """
  The user's service agreement type
  """
  service_agreement: String
  """
  The user agent of the browser from which the account representative accepted their service agreement
  """
  user_agent: String
}

  """
  
  """
type AccountTreasurySettings {
  """
  
  """
  tos_acceptance: AccountTermsOfService
}

  """
  
  """
type AccountUnificationAccountController {
  """
  `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
  """
  is_controller: Boolean
  """
  The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
  """
  type: String!
}

  """
  
  """
type Address {
  """
  City, district, suburb, town, or village.
  """
  city: String
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String
  """
  Address line 1 (e.g., street, PO Box, or company name).
  """
  line1: String
  """
  Address line 2 (e.g., apartment, suite, unit, or building).
  """
  line2: String
  """
  ZIP or postal code.
  """
  postal_code: String
  """
  State, county, province, or region.
  """
  state: String
}

  """
  
  """
type ApiErrors {
  """
  For card errors, the ID of the failed charge.
  """
  charge: String
  """
  For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  """
  code: String
  """
  For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  """
  decline_code: String
  """
  A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  """
  doc_url: String
  """
  A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  """
  message: String
  """
  If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  """
  param: String
  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
We recommend that you create exactly one PaymentIntent for each order or
customer session in your system. You can reference the PaymentIntent later to
see the history of payment attempts for a particular session.

A PaymentIntent transitions through
[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
throughout its lifetime as it interfaces with Stripe.js to perform
authentication flows and ultimately creates at most one successful charge.

Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
  """
  payment_intent: PaymentIntent
  """
  PaymentMethod objects represent your customer's payment instruments.
You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
Customer objects to store instrument details for future payments.

Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
  payment_method: PaymentMethod
  """
  If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
  """
  payment_method_type: String
  """
  A URL to the request log entry in your dashboard.
  """
  request_log_url: String
  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.

Create a SetupIntent when you're ready to collect your customer's payment credentials.
Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
The SetupIntent transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
you through the setup process.

Successful SetupIntents result in payment credentials that are optimized for future payments.
For example, cardholders in [certain regions](/guides/strong-customer-authentication) might need to be run through
[Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) during payment method collection
to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
it automatically attaches the resulting payment method to that Customer after successful setup.
We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.

By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.

Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents)
  """
  setup_intent: SetupIntent
  """
  The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source.
  """
  source: Type234
  """
  The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
  """
  type: String!
}

  """
  
  """
type ApplePayDomain {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  domain_name: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type Application {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The name of the application.
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type ApplicationFee {
  """
  ID of the Stripe account this fee was taken from.
  """
  account: Type235!
  """
  Amount earned, in cents (or local equivalent).
  """
  amount: Int!
  """
  Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
  """
  amount_refunded: Int!
  """
  ID of the Connect application that earned the fee.
  """
  application: Type236!
  """
  Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
  """
  balance_transaction: Type237
  """
  ID of the charge that the application fee was taken from.
  """
  charge: Type238!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
  """
  originating_transaction: Type239
  """
  Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean!
  """
  A list of refunds that have been applied to the fee.
  """
  refunds: Type240!
}

  """
  Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.

The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.

All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.

A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.

Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
  """
type Apps.secret {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  If true, indicates that this secret has been deleted
  """
  deleted: Boolean
  """
  The Unix timestamp for the expiry time of the secret, after which the secret deletes.
  """
  expires_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  A name for the secret that's unique within the scope.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The plaintext secret value to be stored.
  """
  payload: String
  """
  
  """
  scope: SecretServiceResourceScope!
}

  """
  
  """
type AutomaticTax {
  """
  Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type241
  """
  The status of the most recent automated tax calculation for this invoice.
  """
  status: String
}

  """
  This is an object representing your Stripe balance. You can retrieve it to see
the balance currently on your Stripe account.

You can also retrieve the balance history, which contains a list of
[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
(charges, payouts, and so forth).

The available and pending amounts for each currency are broken down further by
payment source types.

Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
  """
type Balance {
  """
  Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.
  """
  available: [BalanceAmount]!
  """
  Funds held due to negative balances on connected Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.
  """
  connect_reserved: [BalanceAmount]
  """
  Funds that you can pay out using Instant Payouts.
  """
  instant_available: [BalanceAmountNet]
  """
  
  """
  issuing: BalanceDetail
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.
  """
  pending: [BalanceAmount]!
}

  """
  
  """
type BalanceAmount {
  """
  Balance amount.
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  
  """
  source_types: BalanceAmountBySourceType
}

  """
  
  """
type BalanceAmountBySourceType {
  """
  Amount for bank account.
  """
  bank_account: Int
  """
  Amount for card.
  """
  card: Int
  """
  Amount for FPX.
  """
  fpx: Int
}

  """
  
  """
type BalanceAmountNet {
  """
  Balance amount.
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  
  """
  source_types: BalanceAmountBySourceType
}

  """
  
  """
type BalanceDetail {
  """
  Funds that are available for use.
  """
  available: [BalanceAmount]!
}

  """
  Balance transactions represent funds moving through your Stripe account.
Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.

Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
  """
type BalanceTransaction {
  """
  Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.
  """
  amount: Int!
  """
  The date that the transaction's net funds become available in the Stripe balance.
  """
  available_on: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`.
  """
  exchange_rate: Int
  """
  Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.
  """
  fee: Int!
  """
  Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.
  """
  fee_details: [Fee]!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`
  """
  net: Int!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective.
  """
  reporting_category: String!
  """
  This transaction relates to the Stripe object.
  """
  source: Type242
  """
  The transaction's net funds status in the Stripe balance, which are either `available` or `pending`.
  """
  status: String!
  """
  Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.
  """
  type: String!
}

  """
  These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank debits and transfers](https://stripe.com/docs/payments/bank-debits-transfers)
  """
type BankAccount {
  """
  The ID of the account that the bank account is associated with.
  """
  account: Type243
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String
  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String
  """
  The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String
  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String!
  """
  The ID of the customer that the bank account is associated with.
  """
  customer: Type244
  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
  """
  future_requirements: Type245
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the bank account number.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Information about the requirements for the bank account, including what information needs to be collected.
  """
  requirements: Type246
  """
  The routing transit number for the bank account.
  """
  routing_number: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.

For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
  """
  status: String!
}

  """
  
  """
type BankConnectionsResourceAccountholder {
  """
  The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`.
  """
  account: Type247
  """
  ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`.
  """
  customer: Type248
  """
  Type of account holder that this account belongs to.
  """
  type: String!
}

  """
  
  """
type BankConnectionsResourceBalance {
  """
  The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
  """
  as_of: Int!
  """
  
  """
  cash: BankConnectionsResourceBalanceApiResourceCashBalance
  """
  
  """
  credit: BankConnectionsResourceBalanceApiResourceCreditBalance
  """
  The balances owed to (or by) the account holder.

Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.

Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  """
  current: JSON!
  """
  The `type` of the balance. An additional hash is included on the balance with a name matching this value.
  """
  type: String!
}

  """
  
  """
type BankConnectionsResourceBalanceApiResourceCashBalance {
  """
  The funds available to the account holder. Typically this is the current balance less any holds.

Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.

Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  """
  available: JSON
}

  """
  
  """
type BankConnectionsResourceBalanceApiResourceCreditBalance {
  """
  The credit that has been used by the account holder.

Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.

Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  """
  used: JSON
}

  """
  
  """
type BankConnectionsResourceBalanceRefresh {
  """
  The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  """
  last_attempted_at: Int!
  """
  Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
  """
  next_refresh_available_at: Int
  """
  The status of the last refresh attempt.
  """
  status: String!
}

  """
  
  """
type BankConnectionsResourceLinkAccountSessionFilters {
  """
  List of countries from which to filter accounts.
  """
  countries: [String]
}

  """
  
  """
type BankConnectionsResourceOwnershipRefresh {
  """
  The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  """
  last_attempted_at: Int!
  """
  The status of the last refresh attempt.
  """
  status: String!
}

  """
  
  """
type BankConnectionsResourceTransactionRefresh {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  """
  last_attempted_at: Int!
  """
  Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
  """
  next_refresh_available_at: Int
  """
  The status of the last refresh attempt.
  """
  status: String!
}

  """
  
  """
type BankConnectionsResourceTransactionResourceStatusTransitions {
  """
  Time at which this transaction posted. Measured in seconds since the Unix epoch.
  """
  posted_at: Int
  """
  Time at which this transaction was voided. Measured in seconds since the Unix epoch.
  """
  void_at: Int
}

  """
  A billing meter is a resource that allows you to track usage of a particular event. For example, you might create a billing meter to track the number of API calls made by a particular user. You can then use the billing meter to charge the user for the number of API calls they make.
  """
type Billing.meter {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  
  """
  customer_mapping: BillingMeterResourceCustomerMappingSettings!
  """
  
  """
  default_aggregation: BillingMeterResourceAggregationSettings!
  """
  The meter's name.
  """
  display_name: String!
  """
  The name of the usage event to record usage for. Corresponds with the `event_name` field on usage events.
  """
  event_name: String!
  """
  The time window to pre-aggregate usage events for, if any.
  """
  event_time_window: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The meter's status.
  """
  status: String!
  """
  
  """
  status_transitions: BillingMeterResourceBillingMeterStatusTransitions!
  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int!
  """
  
  """
  value_settings: BillingMeterResourceBillingMeterValue!
}

  """
  A billing meter event represents a customer's usage of a product. Meter events are used to bill a customer based on their usage.
Meter events are associated with billing meters, which define the shape of the event's payload and how those events are aggregated for billing.
  """
type Billing.meterEvent {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The name of the meter event. Corresponds with the `event_name` field on a meter.
  """
  event_name: String!
  """
  A unique identifier for the event.
  """
  identifier: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The payload of the event.
  """
  payload: JSON!
  """
  The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
  """
  timestamp: Int!
}

  """
  A billing meter event adjustment represents the status of a meter event adjustment.
  """
type Billing.meterEventAdjustment {
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The meter event adjustment's status.
  """
  status: String!
}

  """
  A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
usage was accrued by a customer for that period.
  """
type Billing.meterEventSummary {
  """
  Aggregated value of all the events within start_time (inclusive) and end_time (inclusive). The aggregation strategy is defined on meter via `default_aggregation``.
  """
  aggregated_value: Int!
  """
  End timestamp for this usage summary (inclusive).
  """
  end_time: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The meter associated with this usage summary.
  """
  meter: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Start timestamp for this usage summary (inclusive).
  """
  start_time: Int!
}

  """
  
  """
type BillingDetails {
  """
  Billing address.
  """
  address: Type249
  """
  Email address.
  """
  email: String
  """
  Full name.
  """
  name: String
  """
  Billing phone number (including extension).
  """
  phone: String
}

  """
  
  """
type BillingMeterResourceAggregationSettings {
  """
  Specifies how events are aggregated.
  """
  formula: String!
}

  """
  
  """
type BillingMeterResourceBillingMeterStatusTransitions {
  """
  The time the meter was deactivated, if any. Measured in seconds since Unix epoch.
  """
  deactivated_at: Int
}

  """
  
  """
type BillingMeterResourceBillingMeterValue {
  """
  The key in the usage event payload to use as the value for this meter.
  """
  event_payload_key: String!
}

  """
  
  """
type BillingMeterResourceCustomerMappingSettings {
  """
  The key in the usage event payload to use for mapping the event to a customer.
  """
  event_payload_key: String!
  """
  The method for mapping a meter event to a customer.
  """
  type: String!
}

  """
  A portal configuration describes the functionality and behavior of a portal session.
  """
type BillingPortal.configuration {
  """
  Whether the configuration is active and can be used to create portal sessions.
  """
  active: Boolean!
  """
  ID of the Connect Application that created the configuration.
  """
  application: Type250
  """
  
  """
  business_profile: PortalBusinessProfile!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
  """
  default_return_url: String
  """
  
  """
  features: PortalFeatures!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
  """
  is_default: Boolean!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  
  """
  login_page: PortalLoginPage!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int!
}

  """
  The Billing customer portal is a Stripe-hosted UI for subscription and
billing management.

A portal configuration describes the functionality and features that you
want to provide to your customers through the portal.

A portal session describes the instantiation of the customer portal for
a particular customer. By visiting the session's URL, the customer
can manage their subscriptions and billing details. For security reasons,
sessions are short-lived and will expire if the customer does not visit the URL.
Create sessions on-demand when customers intend to manage their subscriptions
and billing details.

Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
  """
type BillingPortal.session {
  """
  The configuration used by this session, describing the features available.
  """
  configuration: Type251!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The ID of the customer for this session.
  """
  customer: String!
  """
  Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.
  """
  flow: Type252
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
  """
  locale: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
  """
  on_behalf_of: String
  """
  The URL to redirect customers to when they click on the portal's link to return to your website.
  """
  return_url: String
  """
  The short-lived URL of the session that gives customers access to the customer portal.
  """
  url: String!
}

  """
  
  """
type CancellationDetails {
  """
  Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user.
  """
  comment: String
  """
  The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
  """
  feedback: String
  """
  Why this subscription was canceled.
  """
  reason: String
}

  """
  This is an object representing a capability for a Stripe account.

Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
  """
type Capability {
  """
  The account for which the capability enables functionality.
  """
  account: Type253!
  """
  
  """
  future_requirements: AccountCapabilityFutureRequirements
  """
  The identifier for the capability.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Whether the capability has been requested.
  """
  requested: Boolean!
  """
  Time at which the capability was requested. Measured in seconds since the Unix epoch.
  """
  requested_at: Int
  """
  
  """
  requirements: AccountCapabilityRequirements
  """
  The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
  """
  status: String!
}

  """
  You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
  """
type Card {
  """
  The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
  """
  account: Type254
  """
  City/District/Suburb/Town/Village.
  """
  address_city: String
  """
  Billing address country, if provided when creating card.
  """
  address_country: String
  """
  Address line 1 (Street address/PO Box/Company name).
  """
  address_line1: String
  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  Address line 2 (Apartment/Suite/Unit/Building).
  """
  address_line2: String
  """
  State/County/Province/Region.
  """
  address_state: String
  """
  ZIP or postal code.
  """
  address_zip: String
  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String
  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String!
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  """
  The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
  """
  customer: Type255
  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String
  """
  Whether this card is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the card.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Cardholder name.
  """
  name: String
  """
  
  """
  networks: TokenCardNetworks
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
  """
  status: String
  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

  """
  
  """
type CardGeneratedFromPaymentMethodDetails {
  """
  
  """
  card_present: PaymentMethodDetailsCardPresent
  """
  The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
  """
  type: String!
}

  """
  
  """
type CardIssuingAccountTermsOfService {
  """
  The Unix timestamp marking when the account representative accepted the service agreement.
  """
  date: Int
  """
  The IP address from which the account representative accepted the service agreement.
  """
  ip: String
  """
  The user agent of the browser from which the account representative accepted the service agreement.
  """
  user_agent: String
}

  """
  A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
  """
type CashBalance {
  """
  A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  available: JSON
  """
  The ID of the customer whose cash balance this object represents.
  """
  customer: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  settings: CustomerBalanceCustomerBalanceSettings!
}

  """
  The `Charge` object represents a single attempt to move money into your Stripe account.
PaymentIntent confirmation is the most common way to create Charges, but transferring
money to a different Stripe account through Connect also creates Charges.
Some legacy payment flows create Charges directly, which is not recommended for new integrations.
  """
type Charge {
  """
  Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int!
  """
  Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
  """
  amount_captured: Int!
  """
  Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
  """
  amount_refunded: Int!
  """
  ID of the Connect application that created the charge.
  """
  application: Type256
  """
  The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
  """
  application_fee: Type257
  """
  The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
  """
  application_fee_amount: Int
  """
  ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
  """
  balance_transaction: Type258
  """
  
  """
  billing_details: BillingDetails!
  """
  The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
  """
  calculated_statement_descriptor: String
  """
  If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
  """
  captured: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the customer this charge is for if one exists.
  """
  customer: Type259
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Whether the charge has been disputed.
  """
  disputed: Boolean!
  """
  ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
  """
  failure_balance_transaction: Type260
  """
  Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
  """
  failure_code: String
  """
  Message to user further explaining reason for charge failure if available.
  """
  failure_message: String
  """
  Information on fraud assessments for the charge.
  """
  fraud_details: Type261
  """
  Unique identifier for the object.
  """
  id: String!
  """
  ID of the invoice this charge is for if one exists.
  """
  invoice: Type262
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
  """
  on_behalf_of: Type263
  """
  Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
  """
  outcome: Type264
  """
  `true` if the charge succeeded, or was successfully authorized for later capture.
  """
  paid: Boolean!
  """
  ID of the PaymentIntent associated with this charge, if one exists.
  """
  payment_intent: Type265
  """
  ID of the payment method used in this charge.
  """
  payment_method: String
  """
  Details about the payment method at the time of the transaction.
  """
  payment_method_details: Type266
  """
  Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
  """
  radar_options: RadarRadarOptions
  """
  This is the email address that the receipt for this charge was sent to.
  """
  receipt_email: String
  """
  This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
  """
  receipt_number: String
  """
  This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
  """
  receipt_url: String
  """
  Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean!
  """
  A list of refunds that have been applied to the charge.
  """
  refunds: Type267
  """
  ID of the review associated with this charge if one exists.
  """
  review: Type268
  """
  Shipping information for the charge.
  """
  shipping: Type269
  """
  The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
  """
  source_transfer: Type270
  """
  For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String
  """
  Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String
  """
  The status of the payment is either `succeeded`, `pending`, or `failed`.
  """
  status: String!
  """
  ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
  """
  transfer: Type271
  """
  An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
  """
  transfer_data: Type272
  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  """
  transfer_group: String
}

  """
  
  """
type ChargeFraudDetails {
  """
  Assessments from Stripe. If set, the value is `fraudulent`.
  """
  stripe_report: String
  """
  Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
  """
  user_report: String
}

  """
  
  """
type ChargeOutcome {
  """
  Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
  """
  network_status: String
  """
  An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
  """
  reason: String
  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
  """
  risk_level: String
  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
  """
  risk_score: Int
  """
  The ID of the Radar rule that matched the payment, if applicable.
  """
  rule: Type273
  """
  A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
  """
  seller_message: String
  """
  Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
  """
  type: String!
}

  """
  
  """
type ChargeTransferData {
  """
  The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
  """
  amount: Int
  """
  ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
  """
  destination: Type274!
}

  """
  A Checkout Session represents your customer's session as they pay for
one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
new Session each time your customer attempts to pay.

Once payment is successful, the Checkout Session will contain a reference
to the [Customer](https://stripe.com/docs/api/customers), and either the successful
[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
[Subscription](https://stripe.com/docs/api/subscriptions).

You can create a Checkout Session on your server and redirect to its URL
to begin Checkout.

Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
  """
type Checkout.session {
  """
  When set, provides configuration for actions to take if this Checkout Session expires.
  """
  after_expiration: Type275
  """
  Enables user redeemable promotion codes.
  """
  allow_promotion_codes: Boolean
  """
  Total of all items before discounts or taxes are applied.
  """
  amount_subtotal: Int
  """
  Total of all items after discounts and taxes are applied.
  """
  amount_total: Int
  """
  
  """
  automatic_tax: PaymentPagesCheckoutSessionAutomaticTax!
  """
  Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
  """
  billing_address_collection: String
  """
  If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
  """
  cancel_url: String
  """
  A unique string to reference the Checkout Session. This can be a
customer ID, a cart ID, or similar, and can be used to reconcile the
Session with your internal systems.
  """
  client_reference_id: String
  """
  Client secret to be used when initializing Stripe.js embedded checkout.
  """
  client_secret: String
  """
  Results of `consent_collection` for this session.
  """
  consent: Type276
  """
  When set, provides configuration for the Checkout Session to gather active consent from customers.
  """
  consent_collection: Type277
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  """
  Currency conversion details for automatic currency conversion sessions
  """
  currency_conversion: Type278
  """
  Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  """
  custom_fields: [PaymentPagesCheckoutSessionCustomFields]!
  """
  
  """
  custom_text: PaymentPagesCheckoutSessionCustomText!
  """
  The ID of the customer for this Session.
For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
will create a new customer object based on information provided
during the payment flow unless an existing customer was provided when
the Session was created.
  """
  customer: Type279
  """
  Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
  """
  customer_creation: String
  """
  The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode.
  """
  customer_details: Type280
  """
  If provided, this value will be used when the Customer object is created.
If not provided, customers will be asked to enter their email address.
Use this parameter to prefill customer data if you already have an email
on file. To access information about the customer once the payment flow is
complete, use the `customer` attribute.
  """
  customer_email: String
  """
  The timestamp at which the Checkout Session will expire.
  """
  expires_at: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  ID of the invoice created by the Checkout Session, if it exists.
  """
  invoice: Type281
  """
  Details on the state of invoice creation for the Checkout Session.
  """
  invoice_creation: Type282
  """
  The line items purchased by the customer.
  """
  line_items: Type283
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
  """
  locale: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The mode of the Checkout Session.
  """
  mode: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
  """
  payment_intent: Type284
  """
  The ID of the Payment Link that created this Session.
  """
  payment_link: Type285
  """
  Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
  """
  payment_method_collection: String
  """
  Information about the payment method configuration used for this Checkout session if using dynamic payment methods.
  """
  payment_method_configuration_details: Type286
  """
  Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
  """
  payment_method_options: Type287
  """
  A list of the types of payment methods (e.g. card) this Checkout
Session is allowed to accept.
  """
  payment_method_types: [String]!
  """
  The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
You can use this value to decide when to fulfill your customer's order.
  """
  payment_status: String!
  """
  
  """
  phone_number_collection: PaymentPagesCheckoutSessionPhoneNumberCollection
  """
  The ID of the original expired Checkout Session that triggered the recovery flow.
  """
  recovered_from: String
  """
  This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-redirect-behavior) of embedded sessions. Defaults to `always`.
  """
  redirect_on_completion: String
  """
  Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
  """
  return_url: String
  """
  The ID of the SetupIntent for Checkout Sessions in `setup` mode.
  """
  setup_intent: Type288
  """
  When set, provides configuration for Checkout to collect a shipping address from a customer.
  """
  shipping_address_collection: Type289
  """
  The details of the customer cost of shipping, including the customer chosen ShippingRate.
  """
  shipping_cost: Type290
  """
  Shipping information for this Checkout Session.
  """
  shipping_details: Type291
  """
  The shipping rate options applied to this Session.
  """
  shipping_options: [PaymentPagesCheckoutSessionShippingOption]!
  """
  The status of the Checkout Session, one of `open`, `complete`, or `expired`.
  """
  status: String
  """
  Describes the type of transaction being performed by Checkout in order to customize
relevant text on the page, such as the submit button. `submit_type` can only be
specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
  """
  submit_type: String
  """
  The ID of the subscription for Checkout Sessions in `subscription` mode.
  """
  subscription: Type292
  """
  The URL the customer will be directed to after the payment or
subscription creation is successful.
  """
  success_url: String
  """
  
  """
  tax_id_collection: PaymentPagesCheckoutSessionTaxIdCollection
  """
  Tax and discount details for the computed total amount.
  """
  total_details: Type293
  """
  The UI mode of the Session. Defaults to `hosted`.
  """
  ui_mode: String
  """
  The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
This value is only present when the session is active.
  """
  url: String
}

  """
  
  """
type CheckoutAcssDebitMandateOptions {
  """
  A URL for custom mandate text
  """
  custom_mandate_url: String
  """
  List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
  """
  default_for: [String]
  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String
  """
  Payment schedule for the mandate.
  """
  payment_schedule: String
  """
  Transaction type of the mandate.
  """
  transaction_type: String
}

  """
  
  """
type CheckoutAcssDebitPaymentMethodOptions {
  """
  Currency supported by the bank account. Returned when the Session is in `setup` mode.
  """
  currency: String
  """
  
  """
  mandate_options: CheckoutAcssDebitMandateOptions
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type CheckoutAffirmPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutAfterpayClearpayPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutAlipayPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutAuBecsDebitPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutBacsDebitPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutBancontactPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutBoletoPaymentMethodOptions {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutCardInstallmentsOptions {
  """
  Indicates if installments are enabled
  """
  enabled: Boolean
}

  """
  
  """
type CheckoutCardPaymentMethodOptions {
  """
  
  """
  installments: CheckoutCardInstallmentsOptions
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: String!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
  """
  statement_descriptor_suffix_kana: String
  """
  Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
  """
  statement_descriptor_suffix_kanji: String
}

  """
  
  """
type CheckoutCashappPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutCustomerBalanceBankTransferPaymentMethodOptions {
  """
  
  """
  eu_bank_transfer: PaymentMethodOptionsCustomerBalanceEuBankAccount
  """
  List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.

Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
  """
  requested_address_types: [String]
  """
  The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String
}

  """
  
  """
type CheckoutCustomerBalancePaymentMethodOptions {
  """
  
  """
  bank_transfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions
  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutEpsPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutFpxPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutGiropayPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutGrabPayPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutIdealPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutKlarnaPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutKonbiniPaymentMethodOptions {
  """
  The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  """
  expires_after_days: Int
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutLinkPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutOxxoPaymentMethodOptions {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutP24PaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutPaynowPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutPaypalPaymentMethodOptions {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Preferred locale of the PayPal checkout page that the customer is redirected to.
  """
  preferred_locale: String
  """
  A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
  """
  reference: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutPixPaymentMethodOptions {
  """
  The number of seconds after which Pix payment will expire.
  """
  expires_after_seconds: Int
}

  """
  
  """
type CheckoutSepaDebitPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutSessionPaymentMethodOptions {
  """
  
  """
  acss_debit: CheckoutAcssDebitPaymentMethodOptions
  """
  
  """
  affirm: CheckoutAffirmPaymentMethodOptions
  """
  
  """
  afterpay_clearpay: CheckoutAfterpayClearpayPaymentMethodOptions
  """
  
  """
  alipay: CheckoutAlipayPaymentMethodOptions
  """
  
  """
  au_becs_debit: CheckoutAuBecsDebitPaymentMethodOptions
  """
  
  """
  bacs_debit: CheckoutBacsDebitPaymentMethodOptions
  """
  
  """
  bancontact: CheckoutBancontactPaymentMethodOptions
  """
  
  """
  boleto: CheckoutBoletoPaymentMethodOptions
  """
  
  """
  card: CheckoutCardPaymentMethodOptions
  """
  
  """
  cashapp: CheckoutCashappPaymentMethodOptions
  """
  
  """
  customer_balance: CheckoutCustomerBalancePaymentMethodOptions
  """
  
  """
  eps: CheckoutEpsPaymentMethodOptions
  """
  
  """
  fpx: CheckoutFpxPaymentMethodOptions
  """
  
  """
  giropay: CheckoutGiropayPaymentMethodOptions
  """
  
  """
  grabpay: CheckoutGrabPayPaymentMethodOptions
  """
  
  """
  ideal: CheckoutIdealPaymentMethodOptions
  """
  
  """
  klarna: CheckoutKlarnaPaymentMethodOptions
  """
  
  """
  konbini: CheckoutKonbiniPaymentMethodOptions
  """
  
  """
  link: CheckoutLinkPaymentMethodOptions
  """
  
  """
  oxxo: CheckoutOxxoPaymentMethodOptions
  """
  
  """
  p24: CheckoutP24PaymentMethodOptions
  """
  
  """
  paynow: CheckoutPaynowPaymentMethodOptions
  """
  
  """
  paypal: CheckoutPaypalPaymentMethodOptions
  """
  
  """
  pix: CheckoutPixPaymentMethodOptions
  """
  
  """
  revolut_pay: CheckoutRevolutPayPaymentMethodOptions
  """
  
  """
  sepa_debit: CheckoutSepaDebitPaymentMethodOptions
  """
  
  """
  sofort: CheckoutSofortPaymentMethodOptions
  """
  
  """
  swish: CheckoutSwishPaymentMethodOptions
  """
  
  """
  us_bank_account: CheckoutUsBankAccountPaymentMethodOptions
}

  """
  
  """
type CheckoutSofortPaymentMethodOptions {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type CheckoutSwishPaymentMethodOptions {
  """
  The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent.
  """
  reference: String
}

  """
  
  """
type CheckoutUsBankAccountPaymentMethodOptions {
  """
  
  """
  financial_connections: LinkedAccountOptionsUsBankAccount
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  Orders represent your intent to purchase a particular Climate product. When you create an order, the
payment is deducted from your merchant balance.
  """
type Climate.order {
  """
  Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit.
  """
  amount_fees: Int!
  """
  Total amount of the carbon removal in the currency's smallest unit.
  """
  amount_subtotal: Int!
  """
  Total amount of the order including fees in the currency's smallest unit.
  """
  amount_total: Int!
  """
  
  """
  beneficiary: ClimateRemovalsBeneficiary
  """
  Time at which the order was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int
  """
  Reason for the cancellation of this order.
  """
  cancellation_reason: String
  """
  For delivered orders, a URL to a delivery certificate for the order.
  """
  certificate: String
  """
  Time at which the order was confirmed. Measured in seconds since the Unix epoch.
  """
  confirmed_at: Int
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.
  """
  currency: String!
  """
  Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
  """
  delayed_at: Int
  """
  Time at which the order was delivered. Measured in seconds since the Unix epoch.
  """
  delivered_at: Int
  """
  Details about the delivery of carbon removal for this order.
  """
  delivery_details: [ClimateRemovalsOrderDeliveries]!
  """
  The year this order is expected to be delivered.
  """
  expected_delivery_year: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  Quantity of carbon removal that is included in this order.
  """
  metric_tons: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Unique ID for the Climate `Product` this order is purchasing.
  """
  product: Type294!
  """
  Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch.
  """
  product_substituted_at: Int
  """
  The current status of this order.
  """
  status: String!
}

  """
  A Climate product represents a type of carbon removal unit available for reservation.
You can retrieve it to see the current price and availability.
  """
type Climate.product {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Current prices for a metric ton of carbon removal in a currency's smallest unit.
  """
  current_prices_per_metric_ton: JSON!
  """
  The year in which the carbon removal is expected to be delivered.
  """
  delivery_year: Int
  """
  Unique identifier for the object. For convenience, Climate product IDs are human-readable strings
that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)
for a list of available carbon removal products.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The quantity of metric tons available for reservation.
  """
  metric_tons_available: String!
  """
  The Climate product's name.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The carbon removal suppliers that fulfill orders for this Climate product.
  """
  suppliers: [Climate.supplier]!
}

  """
  A supplier of carbon removal.
  """
type Climate.supplier {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Link to a webpage to learn more about the supplier.
  """
  info_url: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The locations in which this supplier operates.
  """
  locations: [ClimateRemovalsLocation]!
  """
  Name of this carbon removal supplier.
  """
  name: String!
  """
  String representing the object’s type. Objects of the same type share the same value.
  """
  object: String!
  """
  The scientific pathway used for carbon removal.
  """
  removal_pathway: String!
}

  """
  
  """
type ClimateRemovalsBeneficiary {
  """
  Publicly displayable name for the end beneficiary of carbon removal.
  """
  public_name: String!
}

  """
  
  """
type ClimateRemovalsLocation {
  """
  The city where the supplier is located.
  """
  city: String
  """
  Two-letter ISO code representing the country where the supplier is located.
  """
  country: String!
  """
  The geographic latitude where the supplier is located.
  """
  latitude: Int
  """
  The geographic longitude where the supplier is located.
  """
  longitude: Int
  """
  The state/county/province/region where the supplier is located.
  """
  region: String
}

  """
  The delivery of a specified quantity of carbon for an order.
  """
type ClimateRemovalsOrderDeliveries {
  """
  Time at which the delivery occurred. Measured in seconds since the Unix epoch.
  """
  delivered_at: Int!
  """
  Specific location of this delivery.
  """
  location: Type295
  """
  Quantity of carbon removal supplied by this delivery.
  """
  metric_tons: String!
  """
  Once retired, a URL to the registry entry for the tons from this delivery.
  """
  registry_url: String
  """
  A supplier of carbon removal.
  """
  supplier: Climate.supplier!
}

  """
  
  """
type ClimateRemovalsProductsPrice {
  """
  Fees for one metric ton of carbon removal in the currency's smallest unit.
  """
  amount_fees: Int!
  """
  Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit.
  """
  amount_subtotal: Int!
  """
  Total for one metric ton of carbon removal (including fees) in the currency's smallest unit.
  """
  amount_total: Int!
}

  """
  ConfirmationTokens help transport client side data collected by Stripe JS over
to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
is successful, values present on the ConfirmationToken are written onto the Intent.

To learn more about how to use ConfirmationToken, visit the related guides:
- [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
- [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
  """
type ConfirmationToken {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent. This is set to null once this ConfirmationToken has been used.
  """
  expires_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Data used for generating a Mandate.
  """
  mandate_data: Type296
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
  """
  payment_intent: String
  """
  Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.
  """
  payment_method_preview: Type297
  """
  Return URL used to confirm the Intent.
  """
  return_url: String
  """
  Indicates that you intend to make future payments with this ConfirmationToken's payment method.

The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
  """
  setup_future_usage: String
  """
  ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
  """
  setup_intent: String
  """
  Shipping information collected on this ConfirmationToken.
  """
  shipping: Type298
  """
  Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.
  """
  use_stripe_sdk: Boolean!
}

  """
  Data used for generating a Mandate.
  """
type ConfirmationTokensResourceMandateData {
  """
  This hash contains details about the customer acceptance of the Mandate.
  """
  customer_acceptance: ConfirmationTokensResourceMandateDataResourceCustomerAcceptance!
}

  """
  This hash contains details about the customer acceptance of the Mandate.
  """
type ConfirmationTokensResourceMandateDataResourceCustomerAcceptance {
  """
  If this is a Mandate accepted online, this hash contains details about the online acceptance.
  """
  online: Type299
  """
  The type of customer acceptance information included with the Mandate.
  """
  type: String!
}

  """
  This hash contains details about the online acceptance.
  """
type ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline {
  """
  The IP address from which the Mandate was accepted by the customer.
  """
  ip_address: String
  """
  The user agent of the browser from which the Mandate was accepted by the customer.
  """
  user_agent: String
}

  """
  Details of the PaymentMethod collected by Payment Element
  """
type ConfirmationTokensResourcePaymentMethodPreview {
  """
  
  """
  acss_debit: PaymentMethodAcssDebit
  """
  
  """
  affirm: PaymentMethodAffirm
  """
  
  """
  afterpay_clearpay: PaymentMethodAfterpayClearpay
  """
  
  """
  alipay: PaymentFlowsPrivatePaymentMethodsAlipay
  """
  
  """
  au_becs_debit: PaymentMethodAuBecsDebit
  """
  
  """
  bacs_debit: PaymentMethodBacsDebit
  """
  
  """
  bancontact: PaymentMethodBancontact
  """
  
  """
  billing_details: BillingDetails!
  """
  
  """
  blik: PaymentMethodBlik
  """
  
  """
  boleto: PaymentMethodBoleto
  """
  
  """
  card: PaymentMethodCard
  """
  
  """
  card_present: PaymentMethodCardPresent
  """
  
  """
  cashapp: PaymentMethodCashapp
  """
  
  """
  customer_balance: PaymentMethodCustomerBalance
  """
  
  """
  eps: PaymentMethodEps
  """
  
  """
  fpx: PaymentMethodFpx
  """
  
  """
  giropay: PaymentMethodGiropay
  """
  
  """
  grabpay: PaymentMethodGrabpay
  """
  
  """
  ideal: PaymentMethodIdeal
  """
  
  """
  interac_present: PaymentMethodInteracPresent
  """
  
  """
  klarna: PaymentMethodKlarna
  """
  
  """
  konbini: PaymentMethodKonbini
  """
  
  """
  link: PaymentMethodLink
  """
  
  """
  mobilepay: PaymentMethodMobilepay
  """
  
  """
  oxxo: PaymentMethodOxxo
  """
  
  """
  p24: PaymentMethodP24
  """
  
  """
  paynow: PaymentMethodPaynow
  """
  
  """
  paypal: PaymentMethodPaypal
  """
  
  """
  pix: PaymentMethodPix
  """
  
  """
  promptpay: PaymentMethodPromptpay
  """
  
  """
  revolut_pay: PaymentMethodRevolutPay
  """
  
  """
  sepa_debit: PaymentMethodSepaDebit
  """
  
  """
  sofort: PaymentMethodSofort
  """
  
  """
  swish: PaymentMethodSwish
  """
  The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  """
  type: String!
  """
  
  """
  us_bank_account: PaymentMethodUsBankAccount
  """
  
  """
  wechat_pay: PaymentMethodWechatPay
  """
  
  """
  zip: PaymentMethodZip
}

  """
  
  """
type ConfirmationTokensResourceShipping {
  """
  
  """
  address: Address!
  """
  Recipient name.
  """
  name: String!
  """
  Recipient phone (including extension).
  """
  phone: String
}

  """
  
  """
type ConnectAccountReference {
  """
  The connected account being referenced when `type` is `account`.
  """
  account: Type300
  """
  Type of the account referenced.
  """
  type: String!
}

  """
  
  """
type ConnectCollectionTransfer {
  """
  Amount transferred, in cents (or local equivalent).
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the account that funds are being collected for.
  """
  destination: Type301!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type ConnectEmbeddedAccountConfig {
  """
  Whether the embedded component is enabled.
  """
  enabled: Boolean!
  """
  
  """
  features: ConnectEmbeddedAccountFeatures!
}

  """
  
  """
type ConnectEmbeddedAccountSessionCreateComponents {
  """
  
  """
  account_onboarding: ConnectEmbeddedAccountConfig!
  """
  
  """
  documents: ConnectEmbeddedBaseConfigClaim!
  """
  
  """
  payment_details: ConnectEmbeddedPaymentsConfig!
  """
  
  """
  payments: ConnectEmbeddedPaymentsConfig!
  """
  
  """
  payouts: ConnectEmbeddedPayoutsConfig!
}

  """
  
  """
type ConnectEmbeddedBaseConfigClaim {
  """
  Whether the embedded component is enabled.
  """
  enabled: Boolean!
  """
  
  """
  features: ConnectEmbeddedBaseFeatures!
}

  """
  
  """
type ConnectEmbeddedPaymentsConfig {
  """
  Whether the embedded component is enabled.
  """
  enabled: Boolean!
  """
  
  """
  features: ConnectEmbeddedPaymentsFeatures!
}

  """
  
  """
type ConnectEmbeddedPaymentsFeatures {
  """
  Whether to allow capturing and cancelling payment intents. This is `true` by default.
  """
  capture_payments: Boolean!
  """
  Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default.
  """
  destination_on_behalf_of_charge_management: Boolean
  """
  Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default.
  """
  dispute_management: Boolean!
  """
  Whether to allow sending refunds. This is `true` by default.
  """
  refund_management: Boolean!
}

  """
  
  """
type ConnectEmbeddedPayoutsConfig {
  """
  Whether the embedded component is enabled.
  """
  enabled: Boolean!
  """
  
  """
  features: ConnectEmbeddedPayoutsFeatures!
}

  """
  
  """
type ConnectEmbeddedPayoutsFeatures {
  """
  Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
  """
  edit_payout_schedule: Boolean!
  """
  Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
  """
  instant_payouts: Boolean!
  """
  Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
  """
  standard_payouts: Boolean!
}

  """
  Stripe needs to collect certain pieces of information about each account
created. These requirements can differ depending on the account's country. The
Country Specs API makes these rules available to your integration.

You can also view the information from this API call as [an online
guide](/docs/connect/required-verification-information).
  """
type CountrySpec {
  """
  The default currency for this country. This applies to both payment methods and bank accounts.
  """
  default_currency: String!
  """
  Unique identifier for the object. Represented as the ISO country code for this country.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Currencies that can be accepted in the specific country (for transfers).
  """
  supported_bank_account_currencies: JSON!
  """
  Currencies that can be accepted in the specified country (for payments).
  """
  supported_payment_currencies: [String]!
  """
  Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
  """
  supported_payment_methods: [String]!
  """
  Countries that can accept transfers from the specified country.
  """
  supported_transfer_countries: [String]!
  """
  
  """
  verification_fields: CountrySpecVerificationFields!
}

  """
  
  """
type CountrySpecVerificationFieldDetails {
  """
  Additional fields which are only required for some users.
  """
  additional: [String]!
  """
  Fields which every account must eventually provide.
  """
  minimum: [String]!
}

  """
  
  """
type CountrySpecVerificationFields {
  """
  
  """
  company: CountrySpecVerificationFieldDetails!
  """
  
  """
  individual: CountrySpecVerificationFieldDetails!
}

  """
  A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  """
type Coupon {
  """
  Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  """
  amount_off: Int
  """
  
  """
  applies_to: CouponAppliesTo
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
  """
  currency: String
  """
  Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  """
  currency_options: JSON
  """
  One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
  """
  duration: String!
  """
  If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
  """
  duration_in_months: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
  """
  max_redemptions: Int
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Name of the coupon displayed to customers on for instance invoices or receipts.
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
  """
  percent_off: Int
  """
  Date after which the coupon can no longer be redeemed.
  """
  redeem_by: Int
  """
  Number of times this coupon has been applied to a customer.
  """
  times_redeemed: Int!
  """
  Taking account of the above properties, whether this coupon can still be applied to a customer.
  """
  valid: Boolean!
}

  """
  
  """
type CouponAppliesTo {
  """
  A list of product IDs this coupon applies to
  """
  products: [String]!
}

  """
  
  """
type CouponCurrencyOption {
  """
  Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  """
  amount_off: Int!
}

  """
  Issue a credit note to adjust an invoice's amount after the invoice is finalized.

Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
  """
type CreditNote {
  """
  The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.
  """
  amount: Int!
  """
  This is the sum of all the shipping amounts.
  """
  amount_shipping: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the customer.
  """
  customer: Type302!
  """
  Customer balance transaction related to this credit note.
  """
  customer_balance_transaction: Type303
  """
  The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.
  """
  discount_amount: Int!
  """
  The aggregate amounts calculated per discount for all line items.
  """
  discount_amounts: [DiscountsResourceDiscountAmount]!
  """
  The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
  """
  effective_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  ID of the invoice.
  """
  invoice: Type304!
  """
  Line items that make up the credit note
  """
  lines: Type305!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Customer-facing text that appears on the credit note PDF.
  """
  memo: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
  """
  number: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Amount that was credited outside of Stripe.
  """
  out_of_band_amount: Int
  """
  The link to download the PDF of the credit note.
  """
  pdf: String!
  """
  Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
  """
  reason: String
  """
  Refund related to this credit note.
  """
  refund: Type306
  """
  The details of the cost of shipping, including the ShippingRate applied to the invoice.
  """
  shipping_cost: Type307
  """
  Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
  """
  status: String!
  """
  The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
  """
  subtotal: Int!
  """
  The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.
  """
  subtotal_excluding_tax: Int
  """
  The aggregate amounts calculated per tax rate for all line items.
  """
  tax_amounts: [CreditNoteTaxAmount]!
  """
  The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.
  """
  total: Int!
  """
  The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.
  """
  total_excluding_tax: Int
  """
  Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
  """
  type: String!
  """
  The time that the credit note was voided.
  """
  voided_at: Int
}

  """
  The credit note line item object
  """
type CreditNoteLineItem {
  """
  The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
  """
  amount: Int!
  """
  The integer amount in cents (or local equivalent) representing the amount being credited for this line item, excluding all tax and discounts.
  """
  amount_excluding_tax: Int
  """
  Description of the item being credited.
  """
  description: String
  """
  The integer amount in cents (or local equivalent) representing the discount being credited for this line item.
  """
  discount_amount: Int!
  """
  The amount of discount calculated per discount for this line item
  """
  discount_amounts: [DiscountsResourceDiscountAmount]!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  ID of the invoice line item being credited
  """
  invoice_line_item: String
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The number of units of product being credited.
  """
  quantity: Int
  """
  The amount of tax calculated per tax rate for this line item
  """
  tax_amounts: [CreditNoteTaxAmount]!
  """
  The tax rates which apply to the line item.
  """
  tax_rates: [TaxRate]!
  """
  The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
  """
  type: String!
  """
  The cost of each unit of product being credited.
  """
  unit_amount: Int
  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
  """
  The amount in cents (or local equivalent) representing the unit amount being credited for this line item, excluding all tax and discounts.
  """
  unit_amount_excluding_tax: String
}

  """
  
  """
type CreditNoteTaxAmount {
  """
  The amount, in cents (or local equivalent), of the tax.
  """
  amount: Int!
  """
  Whether this tax amount is inclusive or exclusive.
  """
  inclusive: Boolean!
  """
  The tax rate that was applied to get this tax amount.
  """
  tax_rate: Type308!
  """
  The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  """
  taxability_reason: String
  """
  The amount on which tax is calculated, in cents (or local equivalent).
  """
  taxable_amount: Int
}

  """
  
  """
type CurrencyOption {
  """
  When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
  """
  custom_unit_amount: Type309
  """
  Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  """
  tax_behavior: String
  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [PriceTier]
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  unit_amount: Int
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  unit_amount_decimal: String
}

  """
  
  """
type CustomUnitAmount {
  """
  The maximum unit amount the customer can specify for this item.
  """
  maximum: Int
  """
  The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
  """
  minimum: Int
  """
  The starting unit amount which can be updated by the customer.
  """
  preset: Int
}

  """
  This object represents a customer of your business. Use it to create recurring charges and track payments that belong to the same customer.

Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment)
  """
type Customer {
  """
  The customer's address.
  """
  address: Type310
  """
  The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
  """
  balance: Int
  """
  The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.
  """
  cash_balance: Type311
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
  """
  currency: String
  """
  ID of the default payment source for the customer.

If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
  """
  default_source: Type312
  """
  Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.

If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.

If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
  """
  delinquent: Boolean
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Describes the current discount active on the customer, if there is one.
  """
  discount: Type313
  """
  The customer's email address.
  """
  email: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes.
  """
  invoice_credit_balance: JSON
  """
  The prefix for the customer used to generate unique invoice numbers.
  """
  invoice_prefix: String
  """
  
  """
  invoice_settings: InvoiceSettingCustomerSetting
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The customer's full name or business name.
  """
  name: String
  """
  The suffix of the customer's next invoice number (for example, 0001).
  """
  next_invoice_sequence: Int
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The customer's phone number.
  """
  phone: String
  """
  The customer's preferred locales (languages), ordered by preference.
  """
  preferred_locales: [String]
  """
  Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
  """
  shipping: Type314
  """
  The customer's payment sources, if any.
  """
  sources: Type315
  """
  The customer's current subscriptions, if any.
  """
  subscriptions: Type316
  """
  
  """
  tax: CustomerTax
  """
  Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
  """
  tax_exempt: String
  """
  The customer's tax IDs.
  """
  tax_ids: Type317
  """
  ID of the test clock that this customer belongs to.
  """
  test_clock: Type318
}

  """
  
  """
type CustomerAcceptance {
  """
  The time that the customer accepts the mandate.
  """
  accepted_at: Int
  """
  
  """
  offline: OfflineAcceptance
  """
  
  """
  online: OnlineAcceptance
  """
  The mandate includes the type of customer acceptance information, such as: `online` or `offline`.
  """
  type: String!
}

  """
  
  """
type CustomerBalanceCustomerBalanceSettings {
  """
  The configuration for how funds that land in the customer cash balance are reconciled.
  """
  reconciliation_mode: String!
  """
  A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance
  """
  using_merchant_default: Boolean!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft {
  """
  The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance.
  """
  balance_transaction: Type319!
  """
  The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.
  """
  linked_transaction: Type320!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
  """
  The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to.
  """
  payment_intent: Type321!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
  """
  
  """
  bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
  """
  
  """
  eu_bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
  """
  
  """
  gb_bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer
  """
  
  """
  jp_bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer
  """
  The user-supplied reference field on the bank transfer.
  """
  reference: String
  """
  The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String!
  """
  
  """
  us_bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
  """
  The BIC of the bank of the sender of the funding.
  """
  bic: String
  """
  The last 4 digits of the IBAN of the sender of the funding.
  """
  iban_last4: String
  """
  The full name of the sender, as supplied by the sending bank.
  """
  sender_name: String
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer {
  """
  The last 4 digits of the account number of the sender of the funding.
  """
  account_number_last4: String
  """
  The full name of the sender, as supplied by the sending bank.
  """
  sender_name: String
  """
  The sort code of the bank of the sender of the funding
  """
  sort_code: String
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer {
  """
  The name of the bank of the sender of the funding.
  """
  sender_bank: String
  """
  The name of the bank branch of the sender of the funding.
  """
  sender_branch: String
  """
  The full name of the sender, as supplied by the sending bank.
  """
  sender_name: String
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer {
  """
  The banking network used for this funding.
  """
  network: String
  """
  The full name of the sender, as supplied by the sending bank.
  """
  sender_name: String
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
  """
  The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance.
  """
  refund: Type322!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance {
  """
  The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance.
  """
  balance_transaction: Type323!
}

  """
  
  """
type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
  """
  The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from.
  """
  payment_intent: Type324!
}

  """
  Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.

Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
  """
type CustomerBalanceTransaction {
  """
  The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
  """
  amount: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The ID of the credit note (if any) related to the transaction.
  """
  credit_note: Type325
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The ID of the customer the transaction belongs to.
  """
  customer: Type326!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
  """
  ending_balance: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The ID of the invoice (if any) related to the transaction.
  """
  invoice: Type327
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
  """
  type: String!
}

  """
  Customers with certain payments enabled have a cash balance, representing funds that were paid
by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
to payments, and refunds to the customer.
  """
type CustomerCashBalanceTransaction {
  """
  
  """
  adjusted_for_overdraft: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft
  """
  
  """
  applied_to_payment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The customer whose available cash balance changed as a result of this transaction.
  """
  customer: Type328!
  """
  The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  ending_balance: Int!
  """
  
  """
  funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
  """
  net_amount: Int!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  refunded_from_payment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
  """
  
  """
  transferred_to_balance: CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance
  """
  The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
  """
  type: String!
  """
  
  """
  unapplied_from_payment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
}

  """
  A customer session allows you to grant client access to Stripe's frontend SDKs (like StripeJs)
control over a customer.
  """
type CustomerSession {
  """
  The client secret of this customer session. Used on the client to set up secure access to the given `customer`.

The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  client_secret: String!
  """
  Configuration for the components supported by this customer session.
  """
  components: CustomerSessionResourceComponents
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The customer the customer session was created for.
  """
  customer: Type329!
  """
  The timestamp at which this customer session will expire.
  """
  expires_at: Int!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  Configuration for the components supported by this customer session.
  """
type CustomerSessionResourceComponents {
  """
  This hash contains whether the buy button is enabled.
  """
  buy_button: CustomerSessionResourceComponentsResourceBuyButton!
  """
  This hash contains whether the pricing table is enabled.
  """
  pricing_table: CustomerSessionResourceComponentsResourcePricingTable!
}

  """
  This hash contains whether the buy button is enabled.
  """
type CustomerSessionResourceComponentsResourceBuyButton {
  """
  Whether the buy button is enabled.
  """
  enabled: Boolean!
}

  """
  This hash contains whether the pricing table is enabled.
  """
type CustomerSessionResourceComponentsResourcePricingTable {
  """
  Whether the pricing table is enabled.
  """
  enabled: Boolean!
}

  """
  
  """
type CustomerTax {
  """
  Surfaces if automatic tax computation is possible given the current customer location information.
  """
  automatic_tax: String!
  """
  A recent IP address of the customer used for tax reporting and tax location inference.
  """
  ip_address: String
  """
  The customer's location as identified by Stripe Tax.
  """
  location: Type330
}

  """
  
  """
type CustomerTaxLocation {
  """
  The customer's country as identified by Stripe Tax.
  """
  country: String!
  """
  The data source used to infer the customer's location.
  """
  source: String!
  """
  The customer's state, county, province, or region as identified by Stripe Tax.
  """
  state: String
}

  """
  
  """
type DeletedAccount {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedApplePayDomain {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedApplication {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The name of the application.
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedBankAccount {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedCard {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedCoupon {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedCustomer {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedDiscount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  """
  A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  """
  coupon: Coupon!
  """
  The ID of the customer associated with this discount.
  """
  customer: Type331
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String!
  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String
  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The promotion code applied to create this discount.
  """
  promotion_code: Type332
  """
  Date that the coupon was applied.
  """
  start: Int!
  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

  """
  
  """
type DeletedInvoice {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedInvoiceitem {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedPerson {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedPlan {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedPrice {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedProduct {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedRadar.valueList {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedRadar.valueListItem {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedSubscriptionItem {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedTaxId {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedTerminal.configuration {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedTerminal.location {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedTerminal.reader {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedTestHelpers.testClock {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type DeletedWebhookEndpoint {
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
It contains information about when the discount began, when it will end, and what it is applied to.

Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
  """
type Discount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  """
  A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  """
  coupon: Coupon!
  """
  The ID of the customer associated with this discount.
  """
  customer: Type337
  """
  If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
  """
  end: Int
  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String!
  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String
  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The promotion code applied to create this discount.
  """
  promotion_code: Type338
  """
  Date that the coupon was applied.
  """
  start: Int!
  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

  """
  
  """
type DiscountsResourceDiscountAmount {
  """
  The amount, in cents (or local equivalent), of the discount.
  """
  amount: Int!
  """
  The discount that was applied to get this discount amount.
  """
  discount: Type339!
}

  """
  A dispute occurs when a customer questions your charge with their card issuer.
When this happens, you have the opportunity to respond to the dispute with
evidence that shows that the charge is legitimate.

Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
  """
type Dispute {
  """
  Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).
  """
  amount: Int!
  """
  List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
  """
  balance_transactions: [BalanceTransaction]!
  """
  ID of the charge that's disputed.
  """
  charge: Type340!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  
  """
  evidence: DisputeEvidence!
  """
  
  """
  evidence_details: DisputeEvidenceDetails!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.
  """
  is_charge_refundable: Boolean!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the PaymentIntent that's disputed.
  """
  payment_intent: Type341
  """
  
  """
  payment_method_details: DisputePaymentMethodDetails
  """
  Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).
  """
  reason: String!
  """
  Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
  """
  status: String!
}

  """
  
  """
type DisputeEvidence {
  """
  Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
  """
  access_activity_log: String
  """
  The billing address provided by the customer.
  """
  billing_address: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
  """
  cancellation_policy: Type342
  """
  An explanation of how and when the customer was shown your refund policy prior to purchase.
  """
  cancellation_policy_disclosure: String
  """
  A justification for why the customer's subscription was not canceled.
  """
  cancellation_rebuttal: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
  """
  customer_communication: Type343
  """
  The email address of the customer.
  """
  customer_email_address: String
  """
  The name of the customer.
  """
  customer_name: String
  """
  The IP address that the customer used when making the purchase.
  """
  customer_purchase_ip: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
  """
  customer_signature: Type344
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
  """
  duplicate_charge_documentation: Type345
  """
  An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
  """
  duplicate_charge_explanation: String
  """
  The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
  """
  duplicate_charge_id: String
  """
  A description of the product or service that was sold.
  """
  product_description: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
  """
  receipt: Type346
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
  """
  refund_policy: Type347
  """
  Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  """
  refund_policy_disclosure: String
  """
  A justification for why the customer is not entitled to a refund.
  """
  refund_refusal_explanation: String
  """
  The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
  """
  service_date: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
  """
  service_documentation: Type348
  """
  The address to which a physical product was shipped. You should try to include as complete address information as possible.
  """
  shipping_address: String
  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
  """
  shipping_carrier: String
  """
  The date on which a physical product began its route to the shipping address, in a clear human-readable format.
  """
  shipping_date: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
  """
  shipping_documentation: Type349
  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  shipping_tracking_number: String
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
  """
  uncategorized_file: Type350
  """
  Any additional evidence or statements.
  """
  uncategorized_text: String
}

  """
  
  """
type DisputeEvidenceDetails {
  """
  Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
  """
  due_by: Int
  """
  Whether evidence has been staged for this dispute.
  """
  has_evidence: Boolean!
  """
  Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
  """
  past_due: Boolean!
  """
  The number of times evidence has been submitted. Typically, you may only submit evidence once.
  """
  submission_count: Int!
}

  """
  
  """
type DisputePaymentMethodDetails {
  """
  Card specific dispute details.
  """
  card: Type351
  """
  Payment method type.
  """
  type: String!
}

  """
  
  """
type DisputePaymentMethodDetailsCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String!
  """
  The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network.
  """
  network_reason_code: String
}

  """
  
  """
type EmailSent {
  """
  The timestamp when the email was sent.
  """
  email_sent_at: Int!
  """
  The recipient's email address.
  """
  email_sent_to: String!
}

  """
  
  """
type EphemeralKey {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Time at which the key will expire. Measured in seconds since the Unix epoch.
  """
  expires: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The key's secret. You can use this value to make authorized requests to the Stripe API.
  """
  secret: String
}

  """
  An error response from the Stripe API
  """
type Error {
  """
  
  """
  error: ApiErrors!
}

  """
  Events are our way of letting you know when something interesting happens in
your account. When an interesting event occurs, we create a new `Event`
object. For example, when a charge succeeds, we create a `charge.succeeded`
event, and when an invoice payment attempt fails, we create an
`invoice.payment_failed` event. Certain API requests might create multiple
events. For example, if you create a new subscription for a
customer, you receive both a `customer.subscription.created` event and a
`charge.succeeded` event.

Events occur when the state of another API resource changes. The event's data
field embeds the resource's state at the time of the change. For
example, a `charge.succeeded` event contains a charge, and an
`invoice.payment_failed` event contains an invoice.

As with other API resources, you can use endpoints to retrieve an
[individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
from the API. We also have a separate
[webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
`Event` objects directly to an endpoint on your server. You can manage
webhooks in your
[account settings](https://dashboard.stripe.com/account/webhooks). Learn how
to [listen for events](https://stripe.com/docs/webhooks)
so that your integration can automatically trigger reactions.

When using [Connect](https://stripe.com/docs/connect), you can also receive event notifications
that occur in connected accounts. For these events, there's an
additional `account` attribute in the received `Event` object.

We only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
for 30 days.
  """
type Event {
  """
  The connected account that originates the event.
  """
  account: String
  """
  The Stripe API version used to render `data`. This property is populated only for events on or after October 31, 2014.
  """
  api_version: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  
  """
  data: NotificationEventData!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify.
  """
  pending_webhooks: Int!
  """
  Information on the API request that triggers the event.
  """
  request: Type352
  """
  Description of the event (for example, `invoice.created` or `charge.refunded`).
  """
  type: String!
}

  """
  `ExchangeRate` objects allow you to determine the rates that Stripe is currently
using to convert from one currency to another. Since this number is variable
throughout the day, there are various reasons why you might want to know the current
rate (for example, to dynamically price an item for a user with a default
payment in a foreign currency).

Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.

*[Note: this integration path is supported but no longer recommended]* Additionally,
you can guarantee that a charge is made with an exchange rate that you expect is
current. To do so, you must pass in the exchange_rate to charges endpoints. If the
value is no longer up to date, the charge won't go through. Please refer to our
[Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.

-----

&nbsp;

*This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*

- *localize prices for processing payments on Stripe*
- *reconcile Stripe transactions*
- *determine how much money to send to a connected account*
- *determine app fees to charge a connected account*

*Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
  """
type ExchangeRate {
  """
  Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
  """
  rates: JSON!
}

  """
  
  """
type ExternalAccountRequirements {
  """
  Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]
  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account.
  """
  past_due: [String]
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

  """
  
  """
type Fee {
  """
  Amount of the fee, in cents.
  """
  amount: Int!
  """
  ID of the Connect application that earned the fee.
  """
  application: String
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`.
  """
  type: String!
}

  """
  `Application Fee Refund` objects allow you to refund an application fee that
has previously been created but not yet refunded. Funds will be refunded to
the Stripe account from which the fee was originally collected.

Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
  """
type FeeRefund {
  """
  Amount, in cents (or local equivalent).
  """
  amount: Int!
  """
  Balance transaction that describes the impact on your account balance.
  """
  balance_transaction: Type355
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the application fee that was refunded.
  """
  fee: Type356!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  This object represents files hosted on Stripe's servers. You can upload
files with the [create file](https://stripe.com/docs/api#create_file) request
(for example, when uploading dispute evidence). Stripe also
creates files independently (for example, the results of a [Sigma scheduled
query](#scheduled_queries)).

Related guide: [File upload guide](https://stripe.com/docs/file-upload)
  """
type File {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The file expires and isn't available at this time in epoch seconds.
  """
  expires_at: Int
  """
  The suitable name for saving the file to a filesystem.
  """
  filename: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  """
  links: Type357
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  """
  purpose: String!
  """
  The size of the file object in bytes.
  """
  size: Int!
  """
  A suitable title for the document.
  """
  title: String
  """
  The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).
  """
  type: String
  """
  Use your live secret API key to download the file from this URL.
  """
  url: String
}

  """
  To share the contents of a `File` object with non-Stripe users, you can
create a `FileLink`. `FileLink`s contain a URL that you can use to
retrieve the contents of the file without authentication.
  """
type FileLink {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Returns if the link is already expired.
  """
  expired: Boolean!
  """
  Time that the link expires.
  """
  expires_at: Int
  """
  The file object this link points to.
  """
  file: Type358!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The publicly accessible URL to download the file.
  """
  url: String
}

  """
  A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
  """
type FinancialConnections.account {
  """
  The account holder that this account belongs to.
  """
  account_holder: Type359
  """
  The most recent information about the account's balance.
  """
  balance: Type360
  """
  The state of the most recent attempt to refresh the account balance.
  """
  balance_refresh: Type361
  """
  The type of the account. Account category is further divided in `subcategory`.
  """
  category: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  A human-readable name that has been assigned to this account, either by the account holder or by the institution.
  """
  display_name: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The name of the institution that holds this account.
  """
  institution_name: String!
  """
  The last 4 digits of the account number. If present, this will be 4 numeric characters.
  """
  last4: String
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The most recent information about the account's owners.
  """
  ownership: Type362
  """
  The state of the most recent attempt to refresh the account owners.
  """
  ownership_refresh: Type363
  """
  The list of permissions granted by this account.
  """
  permissions: [String]
  """
  The status of the link to the account.
  """
  status: String!
  """
  If `category` is `cash`, one of:

 - `checking`
 - `savings`
 - `other`

If `category` is `credit`, one of:

 - `mortgage`
 - `line_of_credit`
 - `credit_card`
 - `other`

If `category` is `investment` or `other`, this will be `other`.
  """
  subcategory: String!
  """
  The list of data refresh subscriptions requested on this account.
  """
  subscriptions: [String]
  """
  The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
  """
  supported_payment_method_types: [String]!
  """
  The state of the most recent attempt to refresh the account transactions.
  """
  transaction_refresh: Type364
}

  """
  Describes an owner of an account.
  """
type FinancialConnections.accountOwner {
  """
  The email address of the owner.
  """
  email: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The full name of the owner.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ownership object that this owner belongs to.
  """
  ownership: String!
  """
  The raw phone number of the owner.
  """
  phone: String
  """
  The raw physical address of the owner.
  """
  raw_address: String
  """
  The timestamp of the refresh that updated this owner.
  """
  refreshed_at: Int
}

  """
  Describes a snapshot of the owners of an account at a particular point in time.
  """
type FinancialConnections.accountOwnership {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  A paginated list of owners for this account.
  """
  owners: Type365!
}

  """
  A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
  """
type FinancialConnections.session {
  """
  The account holder for whom accounts are collected in this session.
  """
  account_holder: Type366
  """
  The accounts that were collected as part of this Session.
  """
  accounts: Type367!
  """
  A value that will be passed to the client to launch the authentication flow.
  """
  client_secret: String!
  """
  
  """
  filters: BankConnectionsResourceLinkAccountSessionFilters
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Permissions requested for accounts collected during this session.
  """
  permissions: [String]!
  """
  Data features requested to be retrieved upon account creation.
  """
  prefetch: [String]
  """
  For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  """
  return_url: String
}

  """
  A Transaction represents a real transaction that affects a Financial Connections Account balance.
  """
type FinancialConnections.transaction {
  """
  The ID of the Financial Connections Account this transaction belongs to.
  """
  account: String!
  """
  The amount of this transaction, in cents (or local equivalent).
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The description of this transaction.
  """
  description: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The status of the transaction.
  """
  status: String!
  """
  
  """
  status_transitions: BankConnectionsResourceTransactionResourceStatusTransitions!
  """
  Time at which the transaction was transacted. Measured in seconds since the Unix epoch.
  """
  transacted_at: Int!
  """
  The token of the transaction refresh that last updated or created this transaction.
  """
  transaction_refresh: String!
  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int!
}

  """
  
  """
type FinancialReportingFinanceReportRunRunParameters {
  """
  The set of output columns requested for inclusion in the report run.
  """
  columns: [String]
  """
  Connected account ID by which to filter the report run.
  """
  connected_account: String
  """
  Currency of objects to be included in the report run.
  """
  currency: String
  """
  Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value.
  """
  interval_end: Int
  """
  Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value.
  """
  interval_start: Int
  """
  Payout ID by which to filter the report run.
  """
  payout: String
  """
  Category of balance transactions to be included in the report run.
  """
  reporting_category: String
  """
  Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
  """
  timezone: String
}

  """
  Metadata about the forwarded request.
  """
type ForwardedRequestContext {
  """
  The time it took in milliseconds for the destination endpoint to respond.
  """
  destination_duration: Int!
  """
  The IP address of the destination.
  """
  destination_ip_address: String!
}

  """
  Details about the request forwarded to the destination endpoint.
  """
type ForwardedRequestDetails {
  """
  The body payload to send to the destination endpoint.
  """
  body: String!
  """
  The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included.
  """
  headers: [ForwardedRequestHeader]!
  """
  The HTTP method used to call the destination endpoint.
  """
  http_method: String!
}

  """
  Header data.
  """
type ForwardedRequestHeader {
  """
  The header name.
  """
  name: String!
  """
  The header value.
  """
  value: String!
}

  """
  Details about the response from the destination endpoint.
  """
type ForwardedResponseDetails {
  """
  The response body from the destination endpoint to Stripe.
  """
  body: String!
  """
  HTTP headers that the destination endpoint returned.
  """
  headers: [ForwardedRequestHeader]!
  """
  The HTTP status code that the destination endpoint returned.
  """
  status: Int!
}

  """
  Instructs Stripe to make a request on your behalf using the destination URL and HTTP method in the config.
A config is set up for each destination URL by Stripe at the time of onboarding. Stripe verifies requests with
your credentials in the config, and injects card details from the payment_method into the request.

Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
before storing the request and response data in the forwarding Request object, which are subject to a
30-day retention period.

You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
keys provided on the underlying third-party request.

Forwarding Requests are synchronous requests that return a response or time out according to
Stripe’s limits.

Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
  """
type Forwarding.request {
  """
  The Forwarding Config used when making the forwarded request. The config specifes the HTTP method, merchant credentials, connection settings, and supported destination URLs.
  """
  config: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
  """
  payment_method: String!
  """
  The field kinds to be replaced in the forwarded request.
  """
  replacements: [String]!
  """
  Context about the request from Stripe's servers to the destination endpoint.
  """
  request_context: Type368
  """
  The request that was sent to the destination endpoint. We redact any sensitive fields.
  """
  request_details: Type369
  """
  The response that the destination endpoint returned to us. We redact any sensitive fields.
  """
  response_details: Type370
  """
  The destination URL for the forwarded request. Must be supported by the config.
  """
  url: String
}

  """
  Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
automatically applied to future invoices and payments using the `customer_balance` payment method.
Customers can fund this balance by initiating a bank transfer to any account in the
`financial_addresses` field.
Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
  """
type FundingInstructions {
  """
  
  """
  bank_transfer: FundingInstructionsBankTransfer!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The `funding_type` of the returned instructions
  """
  funding_type: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type FundingInstructionsBankTransfer {
  """
  The country of the bank account to fund
  """
  country: String!
  """
  A list of financial addresses that can be used to fund a particular balance
  """
  financial_addresses: [FundingInstructionsBankTransferFinancialAddress]!
  """
  The bank_transfer type
  """
  type: String!
}

  """
  ABA Records contain U.S. bank account details per the ABA format.
  """
type FundingInstructionsBankTransferAbaRecord {
  """
  The ABA account number
  """
  account_number: String!
  """
  The bank name
  """
  bank_name: String!
  """
  The ABA routing number
  """
  routing_number: String!
}

  """
  FinancialAddresses contain identifying information that resolves to a FinancialAccount.
  """
type FundingInstructionsBankTransferFinancialAddress {
  """
  ABA Records contain U.S. bank account details per the ABA format.
  """
  aba: FundingInstructionsBankTransferAbaRecord
  """
  Iban Records contain E.U. bank account details per the SEPA format.
  """
  iban: FundingInstructionsBankTransferIbanRecord
  """
  Sort Code Records contain U.K. bank account details per the sort code format.
  """
  sort_code: FundingInstructionsBankTransferSortCodeRecord
  """
  SPEI Records contain Mexico bank account details per the SPEI format.
  """
  spei: FundingInstructionsBankTransferSpeiRecord
  """
  The payment networks supported by this FinancialAddress
  """
  supported_networks: [String]
  """
  SWIFT Records contain U.S. bank account details per the SWIFT format.
  """
  swift: FundingInstructionsBankTransferSwiftRecord
  """
  The type of financial address
  """
  type: String!
  """
  Zengin Records contain Japan bank account details per the Zengin format.
  """
  zengin: FundingInstructionsBankTransferZenginRecord
}

  """
  Iban Records contain E.U. bank account details per the SEPA format.
  """
type FundingInstructionsBankTransferIbanRecord {
  """
  The name of the person or business that owns the bank account
  """
  account_holder_name: String!
  """
  The BIC/SWIFT code of the account.
  """
  bic: String!
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String!
  """
  The IBAN of the account.
  """
  iban: String!
}

  """
  Sort Code Records contain U.K. bank account details per the sort code format.
  """
type FundingInstructionsBankTransferSortCodeRecord {
  """
  The name of the person or business that owns the bank account
  """
  account_holder_name: String!
  """
  The account number
  """
  account_number: String!
  """
  The six-digit sort code
  """
  sort_code: String!
}

  """
  SPEI Records contain Mexico bank account details per the SPEI format.
  """
type FundingInstructionsBankTransferSpeiRecord {
  """
  The three-digit bank code
  """
  bank_code: String!
  """
  The short banking institution name
  """
  bank_name: String!
  """
  The CLABE number
  """
  clabe: String!
}

  """
  SWIFT Records contain U.S. bank account details per the SWIFT format.
  """
type FundingInstructionsBankTransferSwiftRecord {
  """
  The account number
  """
  account_number: String!
  """
  The bank name
  """
  bank_name: String!
  """
  The SWIFT code
  """
  swift_code: String!
}

  """
  Zengin Records contain Japan bank account details per the Zengin format.
  """
type FundingInstructionsBankTransferZenginRecord {
  """
  The account holder name
  """
  account_holder_name: String
  """
  The account number
  """
  account_number: String
  """
  The bank account type. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String
  """
  The bank code of the account
  """
  bank_code: String
  """
  The bank name of the account
  """
  bank_name: String
  """
  The branch code of the account
  """
  branch_code: String
  """
  The branch name of the account
  """
  branch_name: String
}

  """
  Point in Time
  """
type GelatoDataDocumentReportDateOfBirth {
  """
  Numerical day between 1 and 31.
  """
  day: Int
  """
  Numerical month between 1 and 12.
  """
  month: Int
  """
  The four-digit year.
  """
  year: Int
}

  """
  Point in Time
  """
type GelatoDataDocumentReportExpirationDate {
  """
  Numerical day between 1 and 31.
  """
  day: Int
  """
  Numerical month between 1 and 12.
  """
  month: Int
  """
  The four-digit year.
  """
  year: Int
}

  """
  Point in Time
  """
type GelatoDataDocumentReportIssuedDate {
  """
  Numerical day between 1 and 31.
  """
  day: Int
  """
  Numerical month between 1 and 12.
  """
  month: Int
  """
  The four-digit year.
  """
  year: Int
}

  """
  Point in Time
  """
type GelatoDataIdNumberReportDate {
  """
  Numerical day between 1 and 31.
  """
  day: Int
  """
  Numerical month between 1 and 12.
  """
  month: Int
  """
  The four-digit year.
  """
  year: Int
}

  """
  Point in Time
  """
type GelatoDataVerifiedOutputsDate {
  """
  Numerical day between 1 and 31.
  """
  day: Int
  """
  Numerical month between 1 and 12.
  """
  month: Int
  """
  The four-digit year.
  """
  year: Int
}

  """
  Result from a document check
  """
type GelatoDocumentReport {
  """
  Address as it appears in the document.
  """
  address: Type371
  """
  Date of birth as it appears in the document.
  """
  dob: Type372
  """
  Details on the verification error. Present when status is `unverified`.
  """
  error: Type373
  """
  Expiration date of the document.
  """
  expiration_date: Type374
  """
  Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
  """
  files: [String]
  """
  First name as it appears in the document.
  """
  first_name: String
  """
  Issued date of the document.
  """
  issued_date: Type375
  """
  Issuing country of the document.
  """
  issuing_country: String
  """
  Last name as it appears in the document.
  """
  last_name: String
  """
  Document ID number.
  """
  number: String
  """
  Status of this `document` check.
  """
  status: String!
  """
  Type of the document.
  """
  type: String
}

  """
  
  """
type GelatoDocumentReportError {
  """
  A short machine-readable string giving the reason for the verification failure.
  """
  code: String
  """
  A human-readable message giving the reason for the failure. These messages can be shown to your users.
  """
  reason: String
}

  """
  Result from an id_number check
  """
type GelatoIdNumberReport {
  """
  Date of birth.
  """
  dob: Type376
  """
  Details on the verification error. Present when status is `unverified`.
  """
  error: Type377
  """
  First name.
  """
  first_name: String
  """
  ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present.
  """
  id_number: String
  """
  Type of ID number.
  """
  id_number_type: String
  """
  Last name.
  """
  last_name: String
  """
  Status of this `id_number` check.
  """
  status: String!
}

  """
  
  """
type GelatoIdNumberReportError {
  """
  A short machine-readable string giving the reason for the verification failure.
  """
  code: String
  """
  A human-readable message giving the reason for the failure. These messages can be shown to your users.
  """
  reason: String
}

  """
  
  """
type GelatoReportDocumentOptions {
  """
  Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
  """
  allowed_types: [String]
  """
  Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
  """
  require_id_number: Boolean
  """
  Disable image uploads, identity document images have to be captured using the device’s camera.
  """
  require_live_capture: Boolean
  """
  Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
  """
  require_matching_selfie: Boolean
}

  """
  Result from a selfie check
  """
type GelatoSelfieReport {
  """
  ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
  """
  document: String
  """
  Details on the verification error. Present when status is `unverified`.
  """
  error: Type378
  """
  ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
  """
  selfie: String
  """
  Status of this `selfie` check.
  """
  status: String!
}

  """
  
  """
type GelatoSelfieReportError {
  """
  A short machine-readable string giving the reason for the verification failure.
  """
  code: String
  """
  A human-readable message giving the reason for the failure. These messages can be shown to your users.
  """
  reason: String
}

  """
  
  """
type GelatoSessionDocumentOptions {
  """
  Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
  """
  allowed_types: [String]
  """
  Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
  """
  require_id_number: Boolean
  """
  Disable image uploads, identity document images have to be captured using the device’s camera.
  """
  require_live_capture: Boolean
  """
  Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
  """
  require_matching_selfie: Boolean
}

  """
  Shows last VerificationSession error
  """
type GelatoSessionLastError {
  """
  A short machine-readable string giving the reason for the verification or user-session failure.
  """
  code: String
  """
  A message that explains the reason for verification or user-session failure.
  """
  reason: String
}

  """
  
  """
type GelatoVerificationReportOptions {
  """
  
  """
  document: GelatoReportDocumentOptions
  """
  
  """
  id_number: GelatoReportIdNumberOptions
}

  """
  
  """
type GelatoVerificationSessionOptions {
  """
  
  """
  document: GelatoSessionDocumentOptions
  """
  
  """
  id_number: GelatoSessionIdNumberOptions
}

  """
  
  """
type GelatoVerifiedOutputs {
  """
  The user's verified address.
  """
  address: Type379
  """
  The user’s verified date of birth.
  """
  dob: Type380
  """
  The user's verified first name.
  """
  first_name: String
  """
  The user's verified id number.
  """
  id_number: String
  """
  The user's verified id number type.
  """
  id_number_type: String
  """
  The user's verified last name.
  """
  last_name: String
}

  """
  A VerificationReport is the result of an attempt to collect and verify data from a user.
The collection of verification checks performed is determined from the `type` and `options`
parameters used. You can find the result of each verification check performed in the
appropriate sub-resource: `document`, `id_number`, `selfie`.

Each VerificationReport contains a copy of any data collected by the user as well as
reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
API. To configure and create VerificationReports, use the
[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.

Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
  """
type Identity.verificationReport {
  """
  A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  """
  client_reference_id: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Result from a document check
  """
  document: GelatoDocumentReport
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Result from an id_number check
  """
  id_number: GelatoIdNumberReport
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  options: GelatoVerificationReportOptions
  """
  Result from a selfie check
  """
  selfie: GelatoSelfieReport
  """
  Type of report.
  """
  type: String!
  """
  ID of the VerificationSession that created this report.
  """
  verification_session: String
}

  """
  A VerificationSession guides you through the process of collecting and verifying the identities
of your users. It contains details about the type of verification, such as what [verification
check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
each verification in your system.

A VerificationSession transitions through [multiple
statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
the verification flow. The VerificationSession contains the user's verified data after
verification checks are complete.

Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
  """
type Identity.verificationSession {
  """
  A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  """
  client_reference_id: String
  """
  The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
  """
  client_secret: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  If present, this property tells you the last error encountered when processing the verification.
  """
  last_error: Type381
  """
  ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
  """
  last_verification_report: Type382
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  A set of options for the session’s verification checks.
  """
  options: Type383
  """
  Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
  """
  redaction: Type384
  """
  Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
  """
  status: String!
  """
  The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
  """
  type: String!
  """
  The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
  """
  url: String
  """
  The user’s verified data.
  """
  verified_outputs: Type385
}

  """
  
  """
type InboundTransfers {
  """
  
  """
  billing_details: TreasurySharedResourceBillingDetails!
  """
  The type of the payment method used in the InboundTransfer.
  """
  type: String!
  """
  
  """
  us_bank_account: InboundTransfersPaymentMethodDetailsUsBankAccount
}

  """
  
  """
type InboundTransfersPaymentMethodDetailsUsBankAccount {
  """
  Account holder type: individual or company.
  """
  account_holder_type: String
  """
  Account type: checkings or savings. Defaults to checking if omitted.
  """
  account_type: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: Type386
  """
  The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  """
  network: String!
  """
  Routing number of the bank account.
  """
  routing_number: String
}

  """
  
  """
type InternalCard {
  """
  Brand of the card used in the transaction
  """
  brand: String
  """
  Two-letter ISO code representing the country of the card
  """
  country: String
  """
  Two digit number representing the card's expiration month
  """
  exp_month: Int
  """
  Two digit number representing the card's expiration year
  """
  exp_year: Int
  """
  The last 4 digits of the card
  """
  last4: String
}

  """
  Invoices are statements of amounts owed by a customer, and are either
generated one-off, or generated periodically from a subscription.

They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
that may be caused by subscription upgrades/downgrades (if necessary).

If your invoice is configured to be billed through automatic charges,
Stripe automatically finalizes your invoice and attempts payment. Note
that finalizing the invoice,
[when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
not happen immediately as the invoice is created. Stripe waits
until one hour after the last webhook was successfully sent (or the last
webhook timed out after failing). If you (and the platforms you may have
connected to) have no webhooks configured, Stripe waits one hour after
creation to finalize the invoice.

If your invoice is configured to be billed by sending an email, then based on your
[email settings](https://dashboard.stripe.com/account/billing/automatic),
Stripe will email the invoice to your customer and await payment. These
emails can contain a link to a hosted page to pay the invoice.

Stripe applies any customer credit on the account before determining the
amount due for the invoice (i.e., the amount that will be actually
charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
invoice is automatically marked paid, and we add the amount due to the
customer's credit balance which is applied to the next invoice.

More details on the customer's credit balance are
[here](https://stripe.com/docs/billing/customer/balance).

Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
  """
type Invoice {
  """
  The country of the business associated with this invoice, most often the business creating the invoice.
  """
  account_country: String
  """
  The public name of the business associated with this invoice, most often the business creating the invoice.
  """
  account_name: String
  """
  The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
  """
  account_tax_ids: [Type387]
  """
  Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
  """
  amount_due: Int!
  """
  The amount, in cents (or local equivalent), that was paid.
  """
  amount_paid: Int!
  """
  The difference between amount_due and amount_paid, in cents (or local equivalent).
  """
  amount_remaining: Int!
  """
  This is the sum of all the shipping amounts.
  """
  amount_shipping: Int!
  """
  ID of the Connect Application that created the invoice.
  """
  application: Type388
  """
  The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
  """
  application_fee_amount: Int
  """
  Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
  """
  attempt_count: Int!
  """
  Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
  """
  attempted: Boolean!
  """
  Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
  """
  auto_advance: Boolean
  """
  
  """
  automatic_tax: AutomaticTax!
  """
  Indicates the reason why the invoice was created.

* `manual`: Unrelated to a subscription, for example, created via the invoice editor.
* `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
* `subscription_create`: A new subscription was created.
* `subscription_cycle`: A subscription advanced into a new period.
* `subscription_threshold`: A subscription reached a billing threshold.
* `subscription_update`: A subscription was updated.
* `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
  """
  billing_reason: String
  """
  ID of the latest charge generated for this invoice, if any.
  """
  charge: Type389
  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
  """
  collection_method: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Custom fields displayed on the invoice.
  """
  custom_fields: [InvoiceSettingCustomField]
  """
  The ID of the customer who will be billed.
  """
  customer: Type390
  """
  The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_address: Type391
  """
  The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_email: String
  """
  The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_name: String
  """
  The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_phone: String
  """
  The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_shipping: Type392
  """
  The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_exempt: String
  """
  The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_ids: [InvoicesResourceInvoiceTaxId]
  """
  ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
  """
  default_payment_method: Type393
  """
  ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
  """
  default_source: Type394
  """
  The tax rates applied to this invoice, if any.
  """
  default_tax_rates: [TaxRate]!
  """
  An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  """
  description: String
  """
  Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.
  """
  discount: Type395
  """
  The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Type396]
  """
  The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
  """
  due_date: Int
  """
  The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
  """
  effective_at: Int
  """
  Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  ending_balance: Int
  """
  Footer displayed on the invoice.
  """
  footer: String
  """
  Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.
  """
  from_invoice: Type397
  """
  The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
  """
  hosted_invoice_url: String
  """
  Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.
  """
  id: String
  """
  The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  invoice_pdf: String
  """
  
  """
  issuer: ConnectAccountReference!
  """
  The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
  """
  last_finalization_error: Type398
  """
  The ID of the most recent non-draft revision of this invoice
  """
  latest_revision: Type399
  """
  The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
  """
  lines: Type400!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
  """
  next_payment_attempt: Int
  """
  A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
  """
  number: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
  """
  on_behalf_of: Type401
  """
  Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
  """
  paid: Boolean!
  """
  Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
  """
  paid_out_of_band: Boolean!
  """
  The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
  """
  payment_intent: Type402
  """
  
  """
  payment_settings: InvoicesPaymentSettings!
  """
  End of the usage period during which invoice items were added to this invoice.
  """
  period_end: Int!
  """
  Start of the usage period during which invoice items were added to this invoice.
  """
  period_start: Int!
  """
  Total amount of all post-payment credit notes issued for this invoice.
  """
  post_payment_credit_notes_amount: Int!
  """
  Total amount of all pre-payment credit notes issued for this invoice.
  """
  pre_payment_credit_notes_amount: Int!
  """
  The quote this invoice was generated from.
  """
  quote: Type403
  """
  This is the transaction number that appears on email receipts sent for this invoice.
  """
  receipt_number: String
  """
  The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
  """
  rendering: Type404
  """
  The details of the cost of shipping, including the ShippingRate applied on the invoice.
  """
  shipping_cost: Type405
  """
  Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
  """
  shipping_details: Type406
  """
  Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
  """
  starting_balance: Int!
  """
  Extra information about an invoice for the customer's credit card statement.
  """
  statement_descriptor: String
  """
  The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  """
  status: String
  """
  
  """
  status_transitions: InvoicesResourceStatusTransitions!
  """
  The subscription that this invoice was prepared for, if any.
  """
  subscription: Type407
  """
  Details about the subscription that created this invoice.
  """
  subscription_details: Type408
  """
  Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
  """
  subscription_proration_date: Int
  """
  Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
  """
  subtotal: Int!
  """
  The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
  """
  subtotal_excluding_tax: Int
  """
  The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
  """
  tax: Int
  """
  ID of the test clock this invoice belongs to.
  """
  test_clock: Type409
  """
  
  """
  threshold_reason: InvoiceThresholdReason
  """
  Total after discounts and taxes.
  """
  total: Int!
  """
  The aggregate amounts calculated per discount across all line items.
  """
  total_discount_amounts: [DiscountsResourceDiscountAmount]
  """
  The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
  """
  total_excluding_tax: Int
  """
  The aggregate amounts calculated per tax rate for all line items.
  """
  total_tax_amounts: [InvoiceTaxAmount]!
  """
  The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.
  """
  transfer_data: Type410
  """
  Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
  """
  webhooks_delivered_at: Int
}

  """
  
  """
type InvoiceInstallmentsCard {
  """
  Whether Installments are enabled for this Invoice.
  """
  enabled: Boolean
}

  """
  
  """
type InvoiceItemThresholdReason {
  """
  The IDs of the line items that triggered the threshold invoice.
  """
  line_item_ids: [String]!
  """
  The quantity threshold boundary that applied to the given line item.
  """
  usage_gte: Int!
}

  """
  
  """
type InvoiceLineItemPeriod {
  """
  The end of the period, which must be greater than or equal to the start. This value is inclusive.
  """
  end: Int!
  """
  The start of the period. This value is inclusive.
  """
  start: Int!
}

  """
  
  """
type InvoiceMandateOptionsCard {
  """
  Amount to be charged for future payments.
  """
  amount: Int
  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: String
  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String
}

  """
  
  """
type InvoicePaymentMethodOptionsAcssDebit {
  """
  
  """
  mandate_options: InvoicePaymentMethodOptionsAcssDebitMandateOptions
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type InvoicePaymentMethodOptionsAcssDebitMandateOptions {
  """
  Transaction type of the mandate.
  """
  transaction_type: String
}

  """
  
  """
type InvoicePaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: String!
}

  """
  
  """
type InvoicePaymentMethodOptionsCard {
  """
  
  """
  installments: InvoiceInstallmentsCard
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: String
}

  """
  
  """
type InvoicePaymentMethodOptionsCustomerBalance {
  """
  
  """
  bank_transfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer
  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: String
}

  """
  
  """
type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
  """
  
  """
  eu_bank_transfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer
  """
  The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String
}

  """
  
  """
type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
  """
  The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
  """
  country: String!
}

  """
  
  """
type InvoicePaymentMethodOptionsUsBankAccount {
  """
  
  """
  financial_connections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
  """
  The list of permissions to request. The `payment_method` permission must be included.
  """
  permissions: [String]
  """
  Data features requested to be retrieved upon account creation.
  """
  prefetch: [String]
}

  """
  
  """
type InvoiceRenderingPdf {
  """
  Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
  """
  page_size: String
}

  """
  
  """
type InvoiceSettingCustomField {
  """
  The name of the custom field.
  """
  name: String!
  """
  The value of the custom field.
  """
  value: String!
}

  """
  
  """
type InvoiceSettingCustomerSetting {
  """
  Default custom fields to be displayed on invoices for this customer.
  """
  custom_fields: [InvoiceSettingCustomField]
  """
  ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
  """
  default_payment_method: Type411
  """
  Default footer to be displayed on invoices for this customer.
  """
  footer: String
  """
  Default options for invoice PDF rendering for this customer.
  """
  rendering_options: Type412
}

  """
  
  """
type InvoiceSettingQuoteSetting {
  """
  Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
  """
  days_until_due: Int
  """
  
  """
  issuer: ConnectAccountReference!
}

  """
  
  """
type InvoiceSettingRenderingOptions {
  """
  How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
  """
  amount_tax_display: String
}

  """
  
  """
type InvoiceSettingSubscriptionSchedulePhaseSetting {
  """
  The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
  """
  account_tax_ids: [Type413]
  """
  Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  """
  days_until_due: Int
  """
  The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  """
  issuer: Type414
}

  """
  
  """
type InvoiceSettingSubscriptionScheduleSetting {
  """
  The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
  """
  account_tax_ids: [Type415]
  """
  Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  """
  days_until_due: Int
  """
  
  """
  issuer: ConnectAccountReference!
}

  """
  
  """
type InvoiceTaxAmount {
  """
  The amount, in cents (or local equivalent), of the tax.
  """
  amount: Int!
  """
  Whether this tax amount is inclusive or exclusive.
  """
  inclusive: Boolean!
  """
  The tax rate that was applied to get this tax amount.
  """
  tax_rate: Type416!
  """
  The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  """
  taxability_reason: String
  """
  The amount on which tax is calculated, in cents (or local equivalent).
  """
  taxable_amount: Int
}

  """
  
  """
type InvoiceThresholdReason {
  """
  The total invoice amount threshold boundary if it triggered the threshold invoice.
  """
  amount_gte: Int
  """
  Indicates which line items triggered a threshold invoice.
  """
  item_reasons: [InvoiceItemThresholdReason]!
}

  """
  
  """
type InvoiceTransferData {
  """
  The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  """
  The account where funds from the payment will be transferred to upon payment success.
  """
  destination: Type417!
}

  """
  Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
invoice by creating or updating it with an `invoice` field, at which point it will be included as
[an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
[invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).

Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges
(to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.

Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
  """
type Invoiceitem {
  """
  Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The ID of the customer who will be billed when this invoice item is billed.
  """
  customer: Type418!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  date: Int!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  If true, discounts will apply to this invoice item. Always false for prorations.
  """
  discountable: Boolean!
  """
  The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Type419]
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The ID of the invoice this invoice item belongs to.
  """
  invoice: Type420
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  period: InvoiceLineItemPeriod!
  """
  The price of the invoice item.
  """
  price: Type421
  """
  Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
  """
  proration: Boolean!
  """
  Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
  """
  quantity: Int!
  """
  The subscription that this invoice item has been created for, if any.
  """
  subscription: Type422
  """
  The subscription item that this invoice item has been created for, if any.
  """
  subscription_item: String
  """
  The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
  """
  tax_rates: [TaxRate]
  """
  ID of the test clock this invoice item belongs to.
  """
  test_clock: Type423
  """
  Unit amount (in the `currency` specified) of the invoice item.
  """
  unit_amount: Int
  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
}

  """
  
  """
type InvoicesPaymentMethodOptions {
  """
  If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
  """
  acss_debit: Type424
  """
  If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
  """
  bancontact: Type425
  """
  If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
  """
  card: Type426
  """
  If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.
  """
  customer_balance: Type427
  """
  If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.
  """
  konbini: Type428
  """
  If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent.
  """
  sepa_debit: Type429
  """
  If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.
  """
  us_bank_account: Type430
}

  """
  
  """
type InvoicesPaymentSettings {
  """
  ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
  """
  default_mandate: String
  """
  Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
  """
  payment_method_options: Type431
  """
  The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [String]
}

  """
  
  """
type InvoicesResourceFromInvoice {
  """
  The relation between this invoice and the cloned invoice
  """
  action: String!
  """
  The invoice that was cloned.
  """
  invoice: Type432!
}

  """
  
  """
type InvoicesResourceInvoiceRendering {
  """
  How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
  """
  amount_tax_display: String
  """
  Invoice pdf rendering options
  """
  pdf: Type433
}

  """
  
  """
type InvoicesResourceInvoiceTaxId {
  """
  The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
  """
  type: String!
  """
  The value of the tax ID.
  """
  value: String
}

  """
  
  """
type InvoicesResourceLineItemsCreditedItems {
  """
  Invoice containing the credited invoice line items
  """
  invoice: String!
  """
  Credited invoice line items
  """
  invoice_line_items: [String]!
}

  """
  
  """
type InvoicesResourceLineItemsProrationDetails {
  """
  For a credit proration `line_item`, the original debit line_items to which the credit proration applies.
  """
  credited_items: Type434
}

  """
  
  """
type InvoicesResourceShippingCost {
  """
  Total shipping cost before any taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
  """
  amount_tax: Int!
  """
  Total shipping cost after taxes are applied.
  """
  amount_total: Int!
  """
  The ID of the ShippingRate for this invoice.
  """
  shipping_rate: Type435
  """
  The taxes applied to the shipping rate.
  """
  taxes: [LineItemsTaxAmount]
}

  """
  
  """
type InvoicesResourceStatusTransitions {
  """
  The time that the invoice draft was finalized.
  """
  finalized_at: Int
  """
  The time that the invoice was marked uncollectible.
  """
  marked_uncollectible_at: Int
  """
  The time that the invoice was paid.
  """
  paid_at: Int
  """
  The time that the invoice was voided.
  """
  voided_at: Int
}

  """
  When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
purchase to be completed successfully.

Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
  """
type Issuing.authorization {
  """
  The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
  """
  amount: Int!
  """
  Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_details: Type436
  """
  Whether the authorization has been approved.
  """
  approved: Boolean!
  """
  How the card details were provided.
  """
  authorization_method: String!
  """
  List of balance transactions associated with this authorization.
  """
  balance_transactions: [BalanceTransaction]!
  """
  You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
  """
  card: Issuing.card!
  """
  The cardholder to whom this authorization belongs.
  """
  cardholder: Type437
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
  """
  merchant_amount: Int!
  """
  The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String!
  """
  
  """
  merchant_data: IssuingAuthorizationMerchantData!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  Details about the authorization, such as identifiers, set by the card network.
  """
  network_data: Type438
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
  """
  pending_request: Type439
  """
  History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
  """
  request_history: [IssuingAuthorizationRequest]!
  """
  The current status of the authorization in its lifecycle.
  """
  status: String!
  """
  [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null.
  """
  token: Type440
  """
  List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
  """
  transactions: [Issuing.transaction]!
  """
  [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).
  """
  treasury: Type441
  """
  
  """
  verification_data: IssuingAuthorizationVerificationData!
  """
  The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
  """
  wallet: String
}

  """
  You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
  """
type Issuing.card {
  """
  The brand of the card.
  """
  brand: String!
  """
  The reason why the card was canceled.
  """
  cancellation_reason: String
  """
  An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.

Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
  """
  cardholder: Issuing.cardholder!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
  """
  currency: String!
  """
  The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  cvc: String
  """
  The expiration month of the card.
  """
  exp_month: Int!
  """
  The expiration year of the card.
  """
  exp_year: Int!
  """
  The financial account this card is attached to.
  """
  financial_account: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last 4 digits of the card number.
  """
  last4: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  number: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The personalization design object belonging to this card.
  """
  personalization_design: Type442
  """
  The latest card that replaces this card, if any.
  """
  replaced_by: Type443
  """
  The card this card replaces, if any.
  """
  replacement_for: Type444
  """
  The reason why the previous card needed to be replaced.
  """
  replacement_reason: String
  """
  Where and how the card will be shipped.
  """
  shipping: Type445
  """
  
  """
  spending_controls: IssuingCardAuthorizationControls!
  """
  Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
  """
  status: String!
  """
  The type of the card.
  """
  type: String!
  """
  Information relating to digital wallets (like Apple Pay and Google Pay).
  """
  wallets: Type446
}

  """
  An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.

Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
  """
type Issuing.cardholder {
  """
  
  """
  billing: IssuingCardholderAddress!
  """
  Additional information about a `company` cardholder.
  """
  company: Type447
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The cardholder's email address.
  """
  email: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Additional information about an `individual` cardholder.
  """
  individual: Type448
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The cardholder's name. This will be printed on cards issued to them.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  """
  phone_number: String
  """
  The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
 This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
  """
  preferred_locales: [String]
  """
  
  """
  requirements: IssuingCardholderRequirements!
  """
  Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
  """
  spending_controls: Type449
  """
  Specifies whether to permit authorizations on this cardholder's cards.
  """
  status: String!
  """
  One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
  """
  type: String!
}

  """
  As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.

Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
  """
type Issuing.dispute {
  """
  Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
  """
  amount: Int!
  """
  List of balance transactions associated with the dispute.
  """
  balance_transactions: [BalanceTransaction]
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The currency the `transaction` was made in.
  """
  currency: String!
  """
  
  """
  evidence: IssuingDisputeEvidence!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Current status of the dispute.
  """
  status: String!
  """
  The transaction being disputed.
  """
  transaction: Type450!
  """
  [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
  """
  treasury: Type451
}

  """
  A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
  """
type Issuing.personalizationDesign {
  """
  The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
  """
  card_logo: Type452
  """
  Hash containing carrier text, for use with physical bundles that support carrier text.
  """
  carrier_text: Type453
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
  """
  lookup_key: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  Friendly display name.
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The physical bundle object belonging to this personalization design.
  """
  physical_bundle: Type454!
  """
  
  """
  preferences: IssuingPersonalizationDesignPreferences!
  """
  
  """
  rejection_reasons: IssuingPersonalizationDesignRejectionReasons!
  """
  Whether this personalization design can be used to create cards.
  """
  status: String!
}

  """
  A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
  """
type Issuing.physicalBundle {
  """
  
  """
  features: IssuingPhysicalBundleFeatures
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Friendly display name.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Whether this physical bundle can be used to create cards.
  """
  status: String!
  """
  Whether this physical bundle is a standard Stripe offering or custom-made for you.
  """
  type: String!
}

  """
  When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
  """
type Issuing.settlement {
  """
  The Bank Identification Number reflecting this settlement record.
  """
  bin: String!
  """
  The date that the transactions are cleared and posted to user's accounts.
  """
  clearing_date: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The total interchange received as reimbursement for the transactions.
  """
  interchange_fees: Int!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The total net amount required to settle with the network.
  """
  net_total: Int!
  """
  The card network for this settlement report. One of ["visa"]
  """
  network: String!
  """
  The total amount of fees owed to the network.
  """
  network_fees: Int!
  """
  The Settlement Identification Number assigned by the network.
  """
  network_settlement_identifier: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  One of `international` or `uk_national_net`.
  """
  settlement_service: String!
  """
  The total number of transactions reflected in this settlement.
  """
  transaction_count: Int!
  """
  The total transaction amount reflected in this settlement.
  """
  transaction_volume: Int!
}

  """
  An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
  """
type Issuing.token {
  """
  Card associated with this token.
  """
  card: Type455!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The hashed ID derived from the device ID from the card network associated with the token.
  """
  device_fingerprint: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the token.
  """
  last4: String
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The token service provider / card network associated with the token.
  """
  network: String!
  """
  
  """
  network_data: IssuingNetworkTokenNetworkData
  """
  Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
  """
  network_updated_at: Int!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The usage state of the token.
  """
  status: String!
  """
  The digital wallet for this token, if one was used.
  """
  wallet_provider: String
}

  """
  Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
your Stripe account, such as a completed purchase or refund, is represented by an Issuing
`Transaction` object.

Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
  """
type Issuing.transaction {
  """
  The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_details: Type456
  """
  The `Authorization` object that led to this transaction.
  """
  authorization: Type457
  """
  ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
  """
  balance_transaction: Type458
  """
  The card used to make this transaction.
  """
  card: Type459!
  """
  The cardholder to whom this transaction belongs.
  """
  cardholder: Type460
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  If you've disputed the transaction, the ID of the dispute.
  """
  dispute: Type461
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
  """
  merchant_amount: Int!
  """
  The currency with which the merchant is taking payment.
  """
  merchant_currency: String!
  """
  
  """
  merchant_data: IssuingAuthorizationMerchantData!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  Details about the transaction, such as processing dates, set by the card network.
  """
  network_data: Type462
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Additional purchase information that is optionally provided by the merchant.
  """
  purchase_details: Type463
  """
  [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null.
  """
  token: Type464
  """
  [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
  """
  treasury: Type465
  """
  The nature of the transaction.
  """
  type: String!
  """
  The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: String
}

  """
  
  """
type IssuingAuthorizationAmountDetails {
  """
  The fee charged by the ATM for the cash withdrawal.
  """
  atm_fee: Int
  """
  The amount of cash requested by the cardholder.
  """
  cashback_amount: Int
}

  """
  
  """
type IssuingAuthorizationAuthenticationExemption {
  """
  The entity that requested the exemption, either the acquiring merchant or the Issuing user.
  """
  claimed_by: String!
  """
  The specific exemption claimed for this authorization.
  """
  type: String!
}

  """
  
  """
type IssuingAuthorizationMerchantData {
  """
  A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
  """
  category: String!
  """
  The merchant category code for the seller’s business
  """
  category_code: String!
  """
  City where the seller is located
  """
  city: String
  """
  Country where the seller is located
  """
  country: String
  """
  Name of the seller
  """
  name: String
  """
  Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.
  """
  network_id: String!
  """
  Postal code where the seller is located
  """
  postal_code: String
  """
  State where the seller is located
  """
  state: String
  """
  An ID assigned by the seller to the location of the sale.
  """
  terminal_id: String
  """
  URL provided by the merchant on a 3DS request
  """
  url: String
}

  """
  
  """
type IssuingAuthorizationNetworkData {
  """
  Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`.
  """
  acquiring_institution_id: String
  """
  The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements.
  """
  system_trace_audit_number: String
  """
  Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
  """
  transaction_id: String
}

  """
  
  """
type IssuingAuthorizationPendingRequest {
  """
  The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_details: Type466
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  """
  is_amount_controllable: Boolean!
  """
  The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int!
  """
  The local currency the merchant is requesting to authorize.
  """
  merchant_currency: String!
  """
  The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
  """
  network_risk_score: Int
}

  """
  
  """
type IssuingAuthorizationRequest {
  """
  The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
  """
  amount: Int!
  """
  Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_details: Type467
  """
  Whether this request was approved.
  """
  approved: Boolean!
  """
  A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
  """
  authorization_code: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int!
  """
  The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String!
  """
  The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
  """
  network_risk_score: Int
  """
  When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
  """
  reason: String!
  """
  If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.
  """
  reason_message: String
  """
  Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
  """
  requested_at: Int
}

  """
  
  """
type IssuingAuthorizationThreeDSecure {
  """
  The outcome of the 3D Secure authentication request.
  """
  result: String!
}

  """
  
  """
type IssuingAuthorizationTreasury {
  """
  The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization
  """
  received_credits: [String]!
  """
  The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization
  """
  received_debits: [String]!
  """
  The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization
  """
  transaction: String
}

  """
  
  """
type IssuingAuthorizationVerificationData {
  """
  Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
  """
  address_line1_check: String!
  """
  Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
  """
  address_postal_code_check: String!
  """
  The exemption applied to this authorization.
  """
  authentication_exemption: Type468
  """
  Whether the cardholder provided a CVC and if it matched Stripe’s record.
  """
  cvc_check: String!
  """
  Whether the cardholder provided an expiry date and if it matched Stripe’s record.
  """
  expiry_check: String!
  """
  The postal code submitted as part of the authorization used for postal code verification.
  """
  postal_code: String
  """
  3D Secure details.
  """
  three_d_secure: Type469
}

  """
  
  """
type IssuingCardApplePay {
  """
  Apple Pay Eligibility
  """
  eligible: Boolean!
  """
  Reason the card is ineligible for Apple Pay
  """
  ineligible_reason: String
}

  """
  
  """
type IssuingCardAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [String]
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [String]
  """
  Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
  """
  spending_limits: [IssuingCardSpendingLimit]
  """
  Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
  """
  spending_limits_currency: String
}

  """
  
  """
type IssuingCardGooglePay {
  """
  Google Pay Eligibility
  """
  eligible: Boolean!
  """
  Reason the card is ineligible for Google Pay
  """
  ineligible_reason: String
}

  """
  
  """
type IssuingCardShipping {
  """
  
  """
  address: Address!
  """
  The delivery company that shipped a card.
  """
  carrier: String
  """
  Additional information that may be required for clearing customs.
  """
  customs: Type470
  """
  A unix timestamp representing a best estimate of when the card will be delivered.
  """
  eta: Int
  """
  Recipient name.
  """
  name: String!
  """
  The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created.
  """
  phone_number: String
  """
  Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true.
  """
  require_signature: Boolean
  """
  Shipment service, such as `standard` or `express`.
  """
  service: String!
  """
  The delivery status of the card.
  """
  status: String
  """
  A tracking number for a card shipment.
  """
  tracking_number: String
  """
  A link to the shipping carrier's site where you can view detailed information about a card shipment.
  """
  tracking_url: String
  """
  Packaging options.
  """
  type: String!
}

  """
  
  """
type IssuingCardShippingCustoms {
  """
  A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU.
  """
  eori_number: String
}

  """
  
  """
type IssuingCardSpendingLimit {
  """
  Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [String]
  """
  Interval (or event) to which the amount applies.
  """
  interval: String!
}

  """
  
  """
type IssuingCardWallets {
  """
  
  """
  apple_pay: IssuingCardApplePay!
  """
  
  """
  google_pay: IssuingCardGooglePay!
  """
  Unique identifier for a card used with digital wallets
  """
  primary_account_identifier: String
}

  """
  
  """
type IssuingCardholderAddress {
  """
  
  """
  address: Address!
}

  """
  
  """
type IssuingCardholderAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [String]
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [String]
  """
  Limit spending with amount-based rules that apply across this cardholder's cards.
  """
  spending_limits: [IssuingCardholderSpendingLimit]
  """
  Currency of the amounts within `spending_limits`.
  """
  spending_limits_currency: String
}

  """
  
  """
type IssuingCardholderCardIssuing {
  """
  Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program.
  """
  user_terms_acceptance: Type471
}

  """
  
  """
type IssuingCardholderCompany {
  """
  Whether the company's business ID number was provided.
  """
  tax_id_provided: Boolean!
}

  """
  
  """
type IssuingCardholderIdDocument {
  """
  The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  """
  back: Type472
  """
  The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  """
  front: Type473
}

  """
  
  """
type IssuingCardholderIndividual {
  """
  Information related to the card_issuing program for this cardholder.
  """
  card_issuing: Type474
  """
  The date of birth of this cardholder.
  """
  dob: Type475
  """
  The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
  """
  first_name: String
  """
  The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
  """
  last_name: String
  """
  Government-issued ID document for this cardholder.
  """
  verification: Type476
}

  """
  
  """
type IssuingCardholderIndividualDob {
  """
  The day of birth, between 1 and 31.
  """
  day: Int
  """
  The month of birth, between 1 and 12.
  """
  month: Int
  """
  The four-digit year of birth.
  """
  year: Int
}

  """
  
  """
type IssuingCardholderRequirements {
  """
  If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
  """
  disabled_reason: String
  """
  Array of fields that need to be collected in order to verify and re-enable the cardholder.
  """
  past_due: [String]
}

  """
  
  """
type IssuingCardholderSpendingLimit {
  """
  Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [String]
  """
  Interval (or event) to which the amount applies.
  """
  interval: String!
}

  """
  
  """
type IssuingCardholderUserTermsAcceptance {
  """
  The Unix timestamp marking when the cardholder accepted the Authorized User Terms.
  """
  date: Int
  """
  The IP address from which the cardholder accepted the Authorized User Terms.
  """
  ip: String
  """
  The user agent of the browser from which the cardholder accepted the Authorized User Terms.
  """
  user_agent: String
}

  """
  
  """
type IssuingCardholderVerification {
  """
  An identifying document, either a passport or local ID card.
  """
  document: Type477
}

  """
  
  """
type IssuingDisputeCanceledEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type478
  """
  Date when order was canceled.
  """
  canceled_at: Int
  """
  Whether the cardholder was provided with a cancellation policy.
  """
  cancellation_policy_provided: Boolean
  """
  Reason for canceling the order.
  """
  cancellation_reason: String
  """
  Date when the cardholder expected to receive the product.
  """
  expected_at: Int
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Description of the merchandise or service that was purchased.
  """
  product_description: String
  """
  Whether the product was a merchandise or service.
  """
  product_type: String
  """
  Result of cardholder's attempt to return the product.
  """
  return_status: String
  """
  Date when the product was returned or attempted to be returned.
  """
  returned_at: Int
}

  """
  
  """
type IssuingDisputeDuplicateEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type479
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
  """
  card_statement: Type480
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
  """
  cash_receipt: Type481
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
  """
  check_image: Type482
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
  """
  original_transaction: String
}

  """
  
  """
type IssuingDisputeEvidence {
  """
  
  """
  canceled: IssuingDisputeCanceledEvidence
  """
  
  """
  duplicate: IssuingDisputeDuplicateEvidence
  """
  
  """
  fraudulent: IssuingDisputeFraudulentEvidence
  """
  
  """
  merchandise_not_as_described: IssuingDisputeMerchandiseNotAsDescribedEvidence
  """
  
  """
  not_received: IssuingDisputeNotReceivedEvidence
  """
  
  """
  other: IssuingDisputeOtherEvidence
  """
  The reason for filing the dispute. Its value will match the field containing the evidence.
  """
  reason: String!
  """
  
  """
  service_not_as_described: IssuingDisputeServiceNotAsDescribedEvidence
}

  """
  
  """
type IssuingDisputeFraudulentEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type483
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
}

  """
  
  """
type IssuingDisputeMerchandiseNotAsDescribedEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type484
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Date when the product was received.
  """
  received_at: Int
  """
  Description of the cardholder's attempt to return the product.
  """
  return_description: String
  """
  Result of cardholder's attempt to return the product.
  """
  return_status: String
  """
  Date when the product was returned or attempted to be returned.
  """
  returned_at: Int
}

  """
  
  """
type IssuingDisputeNotReceivedEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type485
  """
  Date when the cardholder expected to receive the product.
  """
  expected_at: Int
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Description of the merchandise or service that was purchased.
  """
  product_description: String
  """
  Whether the product was a merchandise or service.
  """
  product_type: String
}

  """
  
  """
type IssuingDisputeOtherEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type486
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Description of the merchandise or service that was purchased.
  """
  product_description: String
  """
  Whether the product was a merchandise or service.
  """
  product_type: String
}

  """
  
  """
type IssuingDisputeServiceNotAsDescribedEvidence {
  """
  (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  """
  additional_documentation: Type487
  """
  Date when order was canceled.
  """
  canceled_at: Int
  """
  Reason for canceling the order.
  """
  cancellation_reason: String
  """
  Explanation of why the cardholder is disputing this transaction.
  """
  explanation: String
  """
  Date when the product was received.
  """
  received_at: Int
}

  """
  
  """
type IssuingDisputeTreasury {
  """
  The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute
  """
  debit_reversal: String
  """
  The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed.
  """
  received_debit: String!
}

  """
  
  """
type IssuingNetworkTokenAddress {
  """
  The street address of the cardholder tokenizing the card.
  """
  line1: String!
  """
  The postal code of the cardholder tokenizing the card.
  """
  postal_code: String!
}

  """
  
  """
type IssuingNetworkTokenDevice {
  """
  An obfuscated ID derived from the device ID.
  """
  device_fingerprint: String
  """
  The IP address of the device at provisioning time.
  """
  ip_address: String
  """
  The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal.
  """
  location: String
  """
  The name of the device used for tokenization.
  """
  name: String
  """
  The phone number of the device used for tokenization.
  """
  phone_number: String
  """
  The type of device used for tokenization.
  """
  type: String
}

  """
  
  """
type IssuingNetworkTokenMastercard {
  """
  A unique reference ID from MasterCard to represent the card account number.
  """
  card_reference_id: String
  """
  The network-unique identifier for the token.
  """
  token_reference_id: String!
  """
  The ID of the entity requesting tokenization, specific to MasterCard.
  """
  token_requestor_id: String!
  """
  The name of the entity requesting tokenization, if known. This is directly provided from MasterCard.
  """
  token_requestor_name: String
}

  """
  
  """
type IssuingNetworkTokenNetworkData {
  """
  
  """
  device: IssuingNetworkTokenDevice
  """
  
  """
  mastercard: IssuingNetworkTokenMastercard
  """
  The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
  """
  type: String!
  """
  
  """
  visa: IssuingNetworkTokenVisa
  """
  
  """
  wallet_provider: IssuingNetworkTokenWalletProvider
}

  """
  
  """
type IssuingNetworkTokenVisa {
  """
  A unique reference ID from Visa to represent the card account number.
  """
  card_reference_id: String!
  """
  The network-unique identifier for the token.
  """
  token_reference_id: String!
  """
  The ID of the entity requesting tokenization, specific to Visa.
  """
  token_requestor_id: String!
  """
  Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa.
  """
  token_risk_score: String
}

  """
  
  """
type IssuingNetworkTokenWalletProvider {
  """
  The wallet provider-given account ID of the digital wallet the token belongs to.
  """
  account_id: String
  """
  An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.
  """
  account_trust_score: Int
  """
  The method used for tokenizing a card.
  """
  card_number_source: String
  """
  
  """
  cardholder_address: IssuingNetworkTokenAddress
  """
  The name of the cardholder tokenizing the card.
  """
  cardholder_name: String
  """
  An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.
  """
  device_trust_score: Int
  """
  The hashed email address of the cardholder's account with the wallet provider.
  """
  hashed_account_email_address: String
  """
  The reasons for suggested tokenization given by the card network.
  """
  reason_codes: [String]
  """
  The recommendation on responding to the tokenization request.
  """
  suggested_decision: String
  """
  The version of the standard for mapping reason codes followed by the wallet provider.
  """
  suggested_decision_version: String
}

  """
  
  """
type IssuingPersonalizationDesignCarrierText {
  """
  The footer body text of the carrier letter.
  """
  footer_body: String
  """
  The footer title text of the carrier letter.
  """
  footer_title: String
  """
  The header body text of the carrier letter.
  """
  header_body: String
  """
  The header title text of the carrier letter.
  """
  header_title: String
}

  """
  
  """
type IssuingPersonalizationDesignPreferences {
  """
  Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design.
  """
  is_default: Boolean!
  """
  Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist.
  """
  is_platform_default: Boolean
}

  """
  
  """
type IssuingPersonalizationDesignRejectionReasons {
  """
  The reason(s) the card logo was rejected.
  """
  card_logo: [String]
  """
  The reason(s) the carrier text was rejected.
  """
  carrier_text: [String]
}

  """
  
  """
type IssuingPhysicalBundleFeatures {
  """
  The policy for how to use card logo images in a card design with this physical bundle.
  """
  card_logo: String!
  """
  The policy for how to use carrier letter text in a card design with this physical bundle.
  """
  carrier_text: String!
  """
  The policy for how to use a second line on a card with this physical bundle.
  """
  second_line: String!
}

  """
  
  """
type IssuingTransactionAmountDetails {
  """
  The fee charged by the ATM for the cash withdrawal.
  """
  atm_fee: Int
  """
  The amount of cash requested by the cardholder.
  """
  cashback_amount: Int
}

  """
  
  """
type IssuingTransactionFlightData {
  """
  The time that the flight departed.
  """
  departure_at: Int
  """
  The name of the passenger.
  """
  passenger_name: String
  """
  Whether the ticket is refundable.
  """
  refundable: Boolean
  """
  The legs of the trip.
  """
  segments: [IssuingTransactionFlightDataLeg]
  """
  The travel agency that issued the ticket.
  """
  travel_agency: String
}

  """
  
  """
type IssuingTransactionFlightDataLeg {
  """
  The three-letter IATA airport code of the flight's destination.
  """
  arrival_airport_code: String
  """
  The airline carrier code.
  """
  carrier: String
  """
  The three-letter IATA airport code that the flight departed from.
  """
  departure_airport_code: String
  """
  The flight number.
  """
  flight_number: String
  """
  The flight's service class.
  """
  service_class: String
  """
  Whether a stopover is allowed on this flight.
  """
  stopover_allowed: Boolean
}

  """
  
  """
type IssuingTransactionFuelData {
  """
  The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
  """
  type: String!
  """
  The units for `volume_decimal`. One of `us_gallon` or `liter`.
  """
  unit: String!
  """
  The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  """
  unit_cost_decimal: String!
  """
  The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
  """
  volume_decimal: String
}

  """
  
  """
type IssuingTransactionLodgingData {
  """
  The time of checking into the lodging.
  """
  check_in_at: Int
  """
  The number of nights stayed at the lodging.
  """
  nights: Int
}

  """
  
  """
type IssuingTransactionNetworkData {
  """
  A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
  """
  authorization_code: String
  """
  The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network.
  """
  processing_date: String
  """
  Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
  """
  transaction_id: String
}

  """
  
  """
type IssuingTransactionPurchaseDetails {
  """
  Information about the flight that was purchased with this transaction.
  """
  flight: Type488
  """
  Information about fuel that was purchased with this transaction.
  """
  fuel: Type489
  """
  Information about lodging that was purchased with this transaction.
  """
  lodging: Type490
  """
  The line items in the purchase.
  """
  receipt: [IssuingTransactionReceiptData]
  """
  A merchant-specific order number.
  """
  reference: String
}

  """
  
  """
type IssuingTransactionReceiptData {
  """
  The description of the item. The maximum length of this field is 26 characters.
  """
  description: String
  """
  The quantity of the item.
  """
  quantity: Int
  """
  The total for this line item in cents.
  """
  total: Int
  """
  The unit cost of the item in cents.
  """
  unit_cost: Int
}

  """
  
  """
type IssuingTransactionTreasury {
  """
  The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund
  """
  received_credit: String
  """
  The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture
  """
  received_debit: String
}

  """
  A line item.
  """
type Item {
  """
  Total discount amount applied. If no discounts were applied, defaults to 0.
  """
  amount_discount: Int!
  """
  Total before any discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total tax amount applied. If no tax was applied, defaults to 0.
  """
  amount_tax: Int!
  """
  Total after discounts and taxes.
  """
  amount_total: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
  """
  description: String!
  """
  The discounts applied to the line item.
  """
  discounts: [LineItemsDiscountAmount]
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The price used to generate the line item.
  """
  price: Type491
  """
  The quantity of products being purchased.
  """
  quantity: Int
  """
  The taxes applied to the line item.
  """
  taxes: [LineItemsTaxAmount]
}

  """
  
  """
type LegalEntityCompany {
  """
  
  """
  address: Address
  """
  The Kana variation of the company's primary address (Japan only).
  """
  address_kana: Type492
  """
  The Kanji variation of the company's primary address (Japan only).
  """
  address_kanji: Type493
  """
  Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
  """
  directors_provided: Boolean
  """
  Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
  """
  executives_provided: Boolean
  """
  The export license ID number of the company, also referred as Import Export Code (India only).
  """
  export_license_id: String
  """
  The purpose code to use for export transactions (India only).
  """
  export_purpose_code: String
  """
  The company's legal name.
  """
  name: String
  """
  The Kana variation of the company's legal name (Japan only).
  """
  name_kana: String
  """
  The Kanji variation of the company's legal name (Japan only).
  """
  name_kanji: String
  """
  Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
  """
  owners_provided: Boolean
  """
  This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
  """
  ownership_declaration: Type494
  """
  The company's phone number (used for verification).
  """
  phone: String
  """
  The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
  """
  structure: String
  """
  Whether the company's business ID number was provided.
  """
  tax_id_provided: Boolean
  """
  The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  """
  tax_id_registrar: String
  """
  Whether the company's business VAT number was provided.
  """
  vat_id_provided: Boolean
  """
  Information on the verification state of the company.
  """
  verification: Type495
}

  """
  
  """
type LegalEntityCompanyVerification {
  """
  
  """
  document: LegalEntityCompanyVerificationDocument!
}

  """
  
  """
type LegalEntityCompanyVerificationDocument {
  """
  The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
  """
  back: Type496
  """
  A user-displayable string describing the verification state of this document.
  """
  details: String
  """
  One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  """
  The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
  """
  front: Type497
}

  """
  
  """
type LegalEntityDob {
  """
  The day of birth, between 1 and 31.
  """
  day: Int
  """
  The month of birth, between 1 and 12.
  """
  month: Int
  """
  The four-digit year of birth.
  """
  year: Int
}

  """
  
  """
type LegalEntityJapanAddress {
  """
  City/Ward.
  """
  city: String
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String
  """
  Block/Building number.
  """
  line1: String
  """
  Building details.
  """
  line2: String
  """
  ZIP or postal code.
  """
  postal_code: String
  """
  Prefecture.
  """
  state: String
  """
  Town/cho-me.
  """
  town: String
}

  """
  
  """
type LegalEntityPersonVerification {
  """
  A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
  """
  additional_document: Type498
  """
  A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
  """
  details: String
  """
  One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
  """
  details_code: String
  """
  
  """
  document: LegalEntityPersonVerificationDocument
  """
  The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
  """
  status: String!
}

  """
  
  """
type LegalEntityPersonVerificationDocument {
  """
  The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  """
  back: Type499
  """
  A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
  """
  details: String
  """
  One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  """
  The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  """
  front: Type500
}

  """
  
  """
type LegalEntityUboDeclaration {
  """
  The Unix timestamp marking when the beneficial owner attestation was made.
  """
  date: Int
  """
  The IP address from which the beneficial owner attestation was made.
  """
  ip: String
  """
  The user-agent string from the browser where the beneficial owner attestation was made.
  """
  user_agent: String
}

  """
  
  """
type LineItem {
  """
  The amount, in cents (or local equivalent).
  """
  amount: Int!
  """
  The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts.
  """
  amount_excluding_tax: Int
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  The amount of discount calculated per discount for this line item.
  """
  discount_amounts: [DiscountsResourceDiscountAmount]
  """
  If true, discounts will apply to this line item. Always false for prorations.
  """
  discountable: Boolean!
  """
  The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Type501]
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The ID of the invoice that contains this line item.
  """
  invoice: String
  """
  The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
  """
  invoice_item: Type502
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  period: InvoiceLineItemPeriod!
  """
  The price of the line item.
  """
  price: Type503
  """
  Whether this is a proration.
  """
  proration: Boolean!
  """
  Additional details for proration line items
  """
  proration_details: Type504
  """
  The quantity of the subscription, if the line item is a subscription or a proration.
  """
  quantity: Int
  """
  The subscription that the invoice item pertains to, if any.
  """
  subscription: Type505
  """
  The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription.
  """
  subscription_item: Type506
  """
  The amount of tax calculated per tax rate for this line item
  """
  tax_amounts: [InvoiceTaxAmount]
  """
  The tax rates which apply to the line item.
  """
  tax_rates: [TaxRate]
  """
  A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
  """
  type: String!
  """
  The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts.
  """
  unit_amount_excluding_tax: String
}

  """
  
  """
type LineItemsDiscountAmount {
  """
  The amount discounted.
  """
  amount: Int!
  """
  A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
It contains information about when the discount began, when it will end, and what it is applied to.

Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
  """
  discount: Discount!
}

  """
  
  """
type LineItemsTaxAmount {
  """
  Amount of tax applied for this rate.
  """
  amount: Int!
  """
  Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.

Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
  """
  rate: TaxRate!
  """
  The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  """
  taxability_reason: String
  """
  The amount on which tax is calculated, in cents (or local equivalent).
  """
  taxable_amount: Int
}

  """
  
  """
type LinkedAccountOptionsUsBankAccount {
  """
  The list of permissions to request. The `payment_method` permission must be included.
  """
  permissions: [String]
  """
  Data features requested to be retrieved upon account creation.
  """
  prefetch: [String]
  """
  For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  """
  return_url: String
}

  """
  Login Links are single-use login link for an Express account to access their Stripe dashboard.
  """
type LoginLink {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The URL for the login link.
  """
  url: String!
}

  """
  A Mandate is a record of the permission that your customer gives you to debit their payment method.
  """
type Mandate {
  """
  
  """
  customer_acceptance: CustomerAcceptance!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  
  """
  multi_use: MandateMultiUse
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) that the mandate is intended for.
  """
  on_behalf_of: String
  """
  ID of the payment method associated with this mandate.
  """
  payment_method: Type507!
  """
  
  """
  payment_method_details: MandatePaymentMethodDetails!
  """
  
  """
  single_use: MandateSingleUse
  """
  The mandate status indicates whether or not you can use it to initiate a payment.
  """
  status: String!
  """
  The type of the mandate.
  """
  type: String!
}

  """
  
  """
type MandateAcssDebit {
  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [String]
  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String
  """
  Payment schedule for the mandate.
  """
  payment_schedule: String!
  """
  Transaction type of the mandate.
  """
  transaction_type: String!
}

  """
  
  """
type MandateAuBecsDebit {
  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String!
}

  """
  
  """
type MandateBacsDebit {
  """
  The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
  """
  network_status: String!
  """
  The unique reference identifying the mandate on the Bacs network.
  """
  reference: String!
  """
  When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
  """
  revocation_reason: String
  """
  The URL that will contain the mandate that the customer has signed.
  """
  url: String!
}

  """
  
  """
type MandatePaymentMethodDetails {
  """
  
  """
  acss_debit: MandateAcssDebit
  """
  
  """
  au_becs_debit: MandateAuBecsDebit
  """
  
  """
  bacs_debit: MandateBacsDebit
  """
  
  """
  card: CardMandatePaymentMethodDetails
  """
  
  """
  cashapp: MandateCashapp
  """
  
  """
  link: MandateLink
  """
  
  """
  paypal: MandatePaypal
  """
  
  """
  sepa_debit: MandateSepaDebit
  """
  This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method.
  """
  type: String!
  """
  
  """
  us_bank_account: MandateUsBankAccount
}

  """
  
  """
type MandatePaypal {
  """
  The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
  """
  billing_agreement_id: String
  """
  PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  """
  payer_id: String
}

  """
  
  """
type MandateSepaDebit {
  """
  The unique reference of the mandate.
  """
  reference: String!
  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String!
}

  """
  
  """
type MandateSingleUse {
  """
  The amount of the payment on a single use mandate.
  """
  amount: Int!
  """
  The currency of the payment on a single use mandate.
  """
  currency: String!
}

  """
  
  """
type MandateUsBankAccount {
  """
  Mandate collection method
  """
  collection_method: String
}

  """
  
  """
type Networks {
  """
  All available networks for the card.
  """
  available: [String]!
  """
  The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
  """
  preferred: String
}

  """
  
  """
type NotificationEventData {
  """
  Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
  """
  object: JSON!
  """
  Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.
  """
  previous_attributes: JSON
}

  """
  
  """
type NotificationEventRequest {
  """
  ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
  """
  id: String
  """
  The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
  """
  idempotency_key: String
}

  """
  
  """
type OnlineAcceptance {
  """
  The customer accepts the mandate from this IP address.
  """
  ip_address: String
  """
  The customer accepts the mandate using the user agent of the browser.
  """
  user_agent: String
}

  """
  
  """
type OutboundPaymentsPaymentMethodDetails {
  """
  
  """
  billing_details: TreasurySharedResourceBillingDetails!
  """
  
  """
  financial_account: OutboundPaymentsPaymentMethodDetailsFinancialAccount
  """
  The type of the payment method used in the OutboundPayment.
  """
  type: String!
  """
  
  """
  us_bank_account: OutboundPaymentsPaymentMethodDetailsUsBankAccount
}

  """
  
  """
type OutboundPaymentsPaymentMethodDetailsFinancialAccount {
  """
  Token of the FinancialAccount.
  """
  id: String!
  """
  The rails used to send funds.
  """
  network: String!
}

  """
  
  """
type OutboundPaymentsPaymentMethodDetailsUsBankAccount {
  """
  Account holder type: individual or company.
  """
  account_holder_type: String
  """
  Account type: checkings or savings. Defaults to checking if omitted.
  """
  account_type: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: Type508
  """
  The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  """
  network: String!
  """
  Routing number of the bank account.
  """
  routing_number: String
}

  """
  
  """
type OutboundTransfersPaymentMethodDetails {
  """
  
  """
  billing_details: TreasurySharedResourceBillingDetails!
  """
  The type of the payment method used in the OutboundTransfer.
  """
  type: String!
  """
  
  """
  us_bank_account: OutboundTransfersPaymentMethodDetailsUsBankAccount
}

  """
  
  """
type OutboundTransfersPaymentMethodDetailsUsBankAccount {
  """
  Account holder type: individual or company.
  """
  account_holder_type: String
  """
  Account type: checkings or savings. Defaults to checking if omitted.
  """
  account_type: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: Type509
  """
  The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  """
  network: String!
  """
  Routing number of the bank account.
  """
  routing_number: String
}

  """
  
  """
type PackageDimensions {
  """
  Height, in inches.
  """
  height: Int!
  """
  Length, in inches.
  """
  length: Int!
  """
  Weight, in ounces.
  """
  weight: Int!
  """
  Width, in inches.
  """
  width: Int!
}

  """
  
  """
type PaymentFlowsAmountDetails {
  """
  
  """
  tip: PaymentFlowsAmountDetailsResourceTip
}

  """
  
  """
type PaymentFlowsAmountDetailsResourceTip {
  """
  Portion of the amount that corresponds to a tip.
  """
  amount: Int
}

  """
  
  """
type PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
  """
  Controls whether this PaymentIntent will accept redirect-based payment methods.

Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
  """
  allow_redirects: String
  """
  Automatically calculates compatible payment methods
  """
  enabled: Boolean!
}

  """
  
  """
type PaymentFlowsAutomaticPaymentMethodsSetupIntent {
  """
  Controls whether this SetupIntent will accept redirect-based payment methods.

Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
  """
  allow_redirects: String
  """
  Automatically calculates compatible payment methods
  """
  enabled: Boolean
}

  """
  
  """
type PaymentFlowsInstallmentOptions {
  enabled: Boolean!
  """
  
  """
  plan: PaymentMethodDetailsCardInstallmentsPlan
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsAlipayDetails {
  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  buyer_id: String
  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  fingerprint: String
  """
  Transaction ID of this particular Alipay transaction.
  """
  transaction_id: String
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization {
  """
  Indicates whether or not the capture window is extended beyond the standard authorization.
  """
  status: String!
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization {
  """
  Indicates whether or not the incremental authorization feature is supported.
  """
  status: String!
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture {
  """
  The maximum amount that can be captured.
  """
  maximum_amount_capturable: Int!
  """
  Indicates whether or not the authorized amount can be over-captured.
  """
  status: String!
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture {
  """
  Indicates whether or not multiple captures are supported.
  """
  status: String!
}

  """
  
  """
type PaymentFlowsPrivatePaymentMethodsKlarnaDob {
  """
  The day of birth, between 1 and 31.
  """
  day: Int
  """
  The month of birth, between 1 and 12.
  """
  month: Int
  """
  The four-digit year of birth.
  """
  year: Int
}

  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
We recommend that you create exactly one PaymentIntent for each order or
customer session in your system. You can reference the PaymentIntent later to
see the history of payment attempts for a particular session.

A PaymentIntent transitions through
[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
throughout its lifetime as it interfaces with Stripe.js to perform
authentication flows and ultimately creates at most one successful charge.

Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
  """
type PaymentIntent {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int!
  """
  Amount that can be captured from this PaymentIntent.
  """
  amount_capturable: Int
  """
  
  """
  amount_details: PaymentFlowsAmountDetails
  """
  Amount that this PaymentIntent collects.
  """
  amount_received: Int
  """
  ID of the Connect application that created the PaymentIntent.
  """
  application: Type510
  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  application_fee_amount: Int
  """
  Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
  """
  automatic_payment_methods: Type511
  """
  Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int
  """
  Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
  """
  cancellation_reason: String
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String!
  """
  The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 

The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.

Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
  """
  client_secret: String
  """
  Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  """
  confirmation_method: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the Customer this PaymentIntent belongs to, if one exists.

Payment methods attached to other Customers cannot be used with this PaymentIntent.

If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  """
  customer: Type512
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  ID of the invoice that created this PaymentIntent, if it exists.
  """
  invoice: Type513
  """
  The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
  """
  last_payment_error: Type514
  """
  The latest charge created by this PaymentIntent.
  """
  latest_charge: Type515
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  """
  metadata: JSON
  """
  If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
  """
  next_action: Type516
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  """
  on_behalf_of: Type517
  """
  ID of the payment method used in this PaymentIntent.
  """
  payment_method: Type518
  """
  Information about the payment method configuration used for this PaymentIntent.
  """
  payment_method_configuration_details: Type519
  """
  Payment-method-specific configuration for this PaymentIntent.
  """
  payment_method_options: Type520
  """
  The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
  """
  payment_method_types: [String]!
  """
  If present, this property tells you about the processing state of the payment.
  """
  processing: Type521
  """
  Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  """
  receipt_email: String
  """
  ID of the review associated with this PaymentIntent, if any.
  """
  review: Type522
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Shipping information for this PaymentIntent.
  """
  shipping: Type523
  """
  For card charges, use [statement_descriptor_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers' statements. It must contain at least one letter and be 1–22 characters long.
  """
  statement_descriptor: String
  """
  Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String
  """
  Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  """
  status: String!
  """
  The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  transfer_data: Type524
  """
  A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
  """
  transfer_group: String
}

  """
  
  """
type PaymentIntentCardProcessing {
  """
  
  """
  customer_notification: PaymentIntentProcessingCustomerNotification
}

  """
  
  """
type PaymentIntentNextAction {
  """
  
  """
  alipay_handle_redirect: PaymentIntentNextActionAlipayHandleRedirect
  """
  
  """
  boleto_display_details: PaymentIntentNextActionBoleto
  """
  
  """
  card_await_notification: PaymentIntentNextActionCardAwaitNotification
  """
  
  """
  cashapp_handle_redirect_or_display_qr_code: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
  """
  
  """
  display_bank_transfer_instructions: PaymentIntentNextActionDisplayBankTransferInstructions
  """
  
  """
  konbini_display_details: PaymentIntentNextActionKonbini
  """
  
  """
  oxxo_display_details: PaymentIntentNextActionDisplayOxxoDetails
  """
  
  """
  paynow_display_qr_code: PaymentIntentNextActionPaynowDisplayQrCode
  """
  
  """
  pix_display_qr_code: PaymentIntentNextActionPixDisplayQrCode
  """
  
  """
  promptpay_display_qr_code: PaymentIntentNextActionPromptpayDisplayQrCode
  """
  
  """
  redirect_to_url: PaymentIntentNextActionRedirectToUrl
  """
  
  """
  swish_handle_redirect_or_display_qr_code: PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode
  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String!
  """
  When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSON
  """
  
  """
  verify_with_microdeposits: PaymentIntentNextActionVerifyWithMicrodeposits
  """
  
  """
  wechat_pay_display_qr_code: PaymentIntentNextActionWechatPayDisplayQrCode
  """
  
  """
  wechat_pay_redirect_to_android_app: PaymentIntentNextActionWechatPayRedirectToAndroidApp
  """
  
  """
  wechat_pay_redirect_to_ios_app: PaymentIntentNextActionWechatPayRedirectToIosApp
}

  """
  
  """
type PaymentIntentNextActionAlipayHandleRedirect {
  """
  The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
  """
  native_data: String
  """
  The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
  """
  native_url: String
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String
  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

  """
  
  """
type PaymentIntentNextActionBoleto {
  """
  The timestamp after which the boleto expires.
  """
  expires_at: Int
  """
  The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
  """
  hosted_voucher_url: String
  """
  The boleto number.
  """
  number: String
  """
  The URL to the downloadable boleto voucher PDF.
  """
  pdf: String
}

  """
  
  """
type PaymentIntentNextActionCardAwaitNotification {
  """
  The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
  """
  charge_attempt_at: Int
  """
  For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
  """
  customer_approval_required: Boolean
}

  """
  
  """
type PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode {
  """
  The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.
  """
  hosted_instructions_url: String!
  """
  The url for mobile redirect based auth
  """
  mobile_auth_url: String!
  """
  
  """
  qr_code: PaymentIntentNextActionCashappQrCode!
}

  """
  
  """
type PaymentIntentNextActionCashappQrCode {
  """
  The date (unix timestamp) when the QR code expires.
  """
  expires_at: Int!
  """
  The image_url_png string used to render QR code
  """
  image_url_png: String!
  """
  The image_url_svg string used to render QR code
  """
  image_url_svg: String!
}

  """
  
  """
type PaymentIntentNextActionDisplayBankTransferInstructions {
  """
  The remaining amount that needs to be transferred to complete the payment.
  """
  amount_remaining: Int
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  """
  A list of financial addresses that can be used to fund the customer balance
  """
  financial_addresses: [FundingInstructionsBankTransferFinancialAddress]
  """
  A link to a hosted page that guides your customer through completing the transfer.
  """
  hosted_instructions_url: String
  """
  A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
  """
  reference: String
  """
  Type of bank transfer
  """
  type: String!
}

  """
  
  """
type PaymentIntentNextActionDisplayOxxoDetails {
  """
  The timestamp after which the OXXO voucher expires.
  """
  expires_after: Int
  """
  The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
  """
  hosted_voucher_url: String
  """
  OXXO reference number.
  """
  number: String
}

  """
  
  """
type PaymentIntentNextActionKonbini {
  """
  The timestamp at which the pending Konbini payment expires.
  """
  expires_at: Int!
  """
  The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
  """
  hosted_voucher_url: String
  """
  
  """
  stores: PaymentIntentNextActionKonbiniStores!
}

  """
  
  """
type PaymentIntentNextActionKonbiniFamilymart {
  """
  The confirmation number.
  """
  confirmation_number: String
  """
  The payment code.
  """
  payment_code: String!
}

  """
  
  """
type PaymentIntentNextActionKonbiniLawson {
  """
  The confirmation number.
  """
  confirmation_number: String
  """
  The payment code.
  """
  payment_code: String!
}

  """
  
  """
type PaymentIntentNextActionKonbiniMinistop {
  """
  The confirmation number.
  """
  confirmation_number: String
  """
  The payment code.
  """
  payment_code: String!
}

  """
  
  """
type PaymentIntentNextActionKonbiniSeicomart {
  """
  The confirmation number.
  """
  confirmation_number: String
  """
  The payment code.
  """
  payment_code: String!
}

  """
  
  """
type PaymentIntentNextActionKonbiniStores {
  """
  FamilyMart instruction details.
  """
  familymart: Type525
  """
  Lawson instruction details.
  """
  lawson: Type526
  """
  Ministop instruction details.
  """
  ministop: Type527
  """
  Seicomart instruction details.
  """
  seicomart: Type528
}

  """
  
  """
type PaymentIntentNextActionPaynowDisplayQrCode {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String!
  """
  The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.
  """
  hosted_instructions_url: String
  """
  The image_url_png string used to render QR code
  """
  image_url_png: String!
  """
  The image_url_svg string used to render QR code
  """
  image_url_svg: String!
}

  """
  
  """
type PaymentIntentNextActionPixDisplayQrCode {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String
  """
  The date (unix timestamp) when the PIX expires.
  """
  expires_at: Int
  """
  The URL to the hosted pix instructions page, which allows customers to view the pix QR code.
  """
  hosted_instructions_url: String
  """
  The image_url_png string used to render png QR code
  """
  image_url_png: String
  """
  The image_url_svg string used to render svg QR code
  """
  image_url_svg: String
}

  """
  
  """
type PaymentIntentNextActionPromptpayDisplayQrCode {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String!
  """
  The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.
  """
  hosted_instructions_url: String!
  """
  The PNG path used to render the QR code, can be used as the source in an HTML img tag
  """
  image_url_png: String!
  """
  The SVG path used to render the QR code, can be used as the source in an HTML img tag
  """
  image_url_svg: String!
}

  """
  
  """
type PaymentIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String
  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

  """
  
  """
type PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode {
  """
  The URL to the hosted Swish instructions page, which allows customers to view the QR code.
  """
  hosted_instructions_url: String
  """
  
  """
  qr_code: PaymentIntentNextActionSwishQrCode
}

  """
  
  """
type PaymentIntentNextActionSwishQrCode {
  """
  The raw data string used to generate QR code, it should be used together with QR code library.
  """
  data: String
  """
  The image_url_png string used to render QR code
  """
  image_url_png: String
  """
  The image_url_svg string used to render QR code
  """
  image_url_svg: String
}

  """
  
  """
type PaymentIntentNextActionVerifyWithMicrodeposits {
  """
  The timestamp when the microdeposits are expected to land.
  """
  arrival_date: Int!
  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String!
  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: String
}

  """
  
  """
type PaymentIntentNextActionWechatPayDisplayQrCode {
  """
  The data being used to generate QR code
  """
  data: String!
  """
  The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.
  """
  hosted_instructions_url: String!
  """
  The base64 image data for a pre-generated QR code
  """
  image_data_url: String!
  """
  The image_url_png string used to render QR code
  """
  image_url_png: String!
  """
  The image_url_svg string used to render QR code
  """
  image_url_svg: String!
}

  """
  
  """
type PaymentIntentNextActionWechatPayRedirectToAndroidApp {
  """
  app_id is the APP ID registered on WeChat open platform
  """
  app_id: String!
  """
  nonce_str is a random string
  """
  nonce_str: String!
  """
  package is static value
  """
  package: String!
  """
  an unique merchant ID assigned by WeChat Pay
  """
  partner_id: String!
  """
  an unique trading ID assigned by WeChat Pay
  """
  prepay_id: String!
  """
  A signature
  """
  sign: String!
  """
  Specifies the current time in epoch format
  """
  timestamp: String!
}

  """
  
  """
type PaymentIntentNextActionWechatPayRedirectToIosApp {
  """
  An universal link that redirect to WeChat Pay app
  """
  native_url: String!
}

  """
  
  """
type PaymentIntentPaymentMethodOptions {
  acss_debit: Type529
  affirm: Type530
  afterpay_clearpay: Type531
  alipay: Type532
  au_becs_debit: Type533
  bacs_debit: Type534
  bancontact: Type535
  blik: Type536
  boleto: Type537
  card: Type538
  card_present: Type539
  cashapp: Type540
  customer_balance: Type541
  eps: Type542
  fpx: Type543
  giropay: Type544
  grabpay: Type545
  ideal: Type546
  interac_present: Type547
  klarna: Type548
  konbini: Type549
  link: Type550
  mobilepay: Type551
  oxxo: Type552
  p24: Type553
  paynow: Type554
  paypal: Type555
  pix: Type556
  promptpay: Type557
  revolut_pay: Type558
  sepa_debit: Type559
  sofort: Type560
  swish: Type561
  us_bank_account: Type562
  wechat_pay: Type563
  zip: Type564
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsAcssDebit {
  """
  
  """
  mandate_options: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsAuBecsDebit {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsBlik {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsCard {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Installment details for this payment (Mexico only).

For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  """
  installments: Type565
  """
  Configuration options for setting up an eMandate for cards issued in India.
  """
  mandate_options: Type566
  """
  Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
  """
  network: String
  """
  Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
  """
  request_extended_authorization: String
  """
  Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
  """
  request_incremental_authorization: String
  """
  Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
  """
  request_multicapture: String
  """
  Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
  """
  request_overcapture: String
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: String
  """
  When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
  """
  require_cvc_recollection: Boolean
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
  """
  statement_descriptor_suffix_kana: String
  """
  Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
  """
  statement_descriptor_suffix_kanji: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsEps {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsLink {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """
  A URL for custom mandate text
  """
  custom_mandate_url: String
  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String
  """
  Payment schedule for the mandate.
  """
  payment_schedule: String
  """
  Transaction type of the mandate.
  """
  transaction_type: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsMobilepay {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsSepaDebit {
  """
  
  """
  mandate_options: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsSwish {
  """
  The order ID displayed in the Swish app after the payment is authorized.
  """
  reference: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentIntentPaymentMethodOptionsUsBankAccount {
  """
  
  """
  financial_connections: LinkedAccountOptionsUsBankAccount
  """
  
  """
  mandate_options: PaymentMethodOptionsUsBankAccountMandateOptions
  """
  Preferred transaction settlement speed
  """
  preferred_settlement_speed: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type PaymentIntentProcessing {
  """
  
  """
  card: PaymentIntentCardProcessing
  """
  Type of the payment method for which payment is in `processing` state, one of `card`.
  """
  type: String!
}

  """
  
  """
type PaymentIntentProcessingCustomerNotification {
  """
  Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
  """
  approval_requested: Boolean
  """
  If customer approval is required, they need to provide approval before this time.
  """
  completes_at: Int
}

  """
  
  """
type PaymentIntentTypeSpecificPaymentMethodOptionsClient {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  
  """
  installments: PaymentFlowsInstallmentOptions
  """
  When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
  """
  require_cvc_recollection: Boolean
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.

When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.

Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
  """
type PaymentLink {
  """
  Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
  """
  active: Boolean!
  """
  
  """
  after_completion: PaymentLinksResourceAfterCompletion!
  """
  Whether user redeemable promotion codes are enabled.
  """
  allow_promotion_codes: Boolean!
  """
  The ID of the Connect application that created the Payment Link.
  """
  application: Type567
  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
  """
  application_fee_amount: Int
  """
  This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Int
  """
  
  """
  automatic_tax: PaymentLinksResourceAutomaticTax!
  """
  Configuration for collecting the customer's billing address. Defaults to `auto`.
  """
  billing_address_collection: String!
  """
  When set, provides configuration to gather active consent from customers.
  """
  consent_collection: Type568
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  """
  custom_fields: [PaymentLinksResourceCustomFields]!
  """
  
  """
  custom_text: PaymentLinksResourceCustomText!
  """
  Configuration for Customer creation during checkout.
  """
  customer_creation: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The custom message to be displayed to a customer when a payment link is no longer active.
  """
  inactive_message: String
  """
  Configuration for creating invoice for payment mode payment links.
  """
  invoice_creation: Type569
  """
  The line items representing what is being sold.
  """
  line_items: Type570
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
  """
  on_behalf_of: Type571
  """
  Indicates the parameters to be passed to PaymentIntent creation during checkout.
  """
  payment_intent_data: Type572
  """
  Configuration for collecting a payment method during checkout. Defaults to `always`.
  """
  payment_method_collection: String!
  """
  The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
  """
  payment_method_types: [String]
  """
  
  """
  phone_number_collection: PaymentLinksResourcePhoneNumberCollection!
  """
  Settings that restrict the usage of a payment link.
  """
  restrictions: Type573
  """
  Configuration for collecting the customer's shipping address.
  """
  shipping_address_collection: Type574
  """
  The shipping rate options applied to the session.
  """
  shipping_options: [PaymentLinksResourceShippingOption]!
  """
  Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
  """
  submit_type: String!
  """
  When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
  """
  subscription_data: Type575
  """
  
  """
  tax_id_collection: PaymentLinksResourceTaxIdCollection!
  """
  The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
  """
  transfer_data: Type576
  """
  The public URL that can be shared with customers.
  """
  url: String!
}

  """
  
  """
type PaymentLinksResourceAfterCompletion {
  """
  
  """
  hosted_confirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage
  """
  
  """
  redirect: PaymentLinksResourceCompletionBehaviorRedirect
  """
  The specified behavior after the purchase is complete.
  """
  type: String!
}

  """
  
  """
type PaymentLinksResourceAutomaticTax {
  """
  If `true`, tax will be calculated automatically using the customer's location.
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type577
}

  """
  
  """
type PaymentLinksResourceCompletedSessions {
  """
  The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met.
  """
  count: Int!
  """
  The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met.
  """
  limit: Int!
}

  """
  
  """
type PaymentLinksResourceCompletionBehaviorConfirmationPage {
  """
  The custom message that is displayed to the customer after the purchase is complete.
  """
  custom_message: String
}

  """
  
  """
type PaymentLinksResourceCompletionBehaviorRedirect {
  """
  The URL the customer will be redirected to after the purchase is complete.
  """
  url: String!
}

  """
  
  """
type PaymentLinksResourceConsentCollection {
  """
  Settings related to the payment method reuse text shown in the Checkout UI.
  """
  payment_method_reuse_agreement: Type578
  """
  If set to `auto`, enables the collection of customer consent for promotional communications.
  """
  promotions: String
  """
  If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.
  """
  terms_of_service: String
}

  """
  
  """
type PaymentLinksResourceCustomFields {
  """
  
  """
  dropdown: PaymentLinksResourceCustomFieldsDropdown
  """
  String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
  """
  key: String!
  """
  
  """
  label: PaymentLinksResourceCustomFieldsLabel!
  """
  
  """
  numeric: PaymentLinksResourceCustomFieldsNumeric
  """
  Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
  """
  optional: Boolean!
  """
  
  """
  text: PaymentLinksResourceCustomFieldsText
  """
  The type of the field.
  """
  type: String!
}

  """
  
  """
type PaymentLinksResourceCustomFieldsDropdown {
  """
  The options available for the customer to select. Up to 200 options allowed.
  """
  options: [PaymentLinksResourceCustomFieldsDropdownOption]!
}

  """
  
  """
type PaymentLinksResourceCustomFieldsDropdownOption {
  """
  The label for the option, displayed to the customer. Up to 100 characters.
  """
  label: String!
  """
  The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
  """
  value: String!
}

  """
  
  """
type PaymentLinksResourceCustomFieldsLabel {
  """
  Custom text for the label, displayed to the customer. Up to 50 characters.
  """
  custom: String
  """
  The type of the label.
  """
  type: String!
}

  """
  
  """
type PaymentLinksResourceCustomFieldsNumeric {
  """
  The maximum character length constraint for the customer's input.
  """
  maximum_length: Int
  """
  The minimum character length requirement for the customer's input.
  """
  minimum_length: Int
}

  """
  
  """
type PaymentLinksResourceCustomFieldsText {
  """
  The maximum character length constraint for the customer's input.
  """
  maximum_length: Int
  """
  The minimum character length requirement for the customer's input.
  """
  minimum_length: Int
}

  """
  
  """
type PaymentLinksResourceCustomText {
  """
  Custom text that should be displayed after the payment confirmation button.
  """
  after_submit: Type579
  """
  Custom text that should be displayed alongside shipping address collection.
  """
  shipping_address: Type580
  """
  Custom text that should be displayed alongside the payment confirmation button.
  """
  submit: Type581
  """
  Custom text that should be displayed in place of the default terms of service agreement text.
  """
  terms_of_service_acceptance: Type582
}

  """
  
  """
type PaymentLinksResourceCustomTextPosition {
  """
  Text may be up to 1200 characters in length.
  """
  message: String!
}

  """
  
  """
type PaymentLinksResourceInvoiceCreation {
  """
  Enable creating an invoice on successful payment.
  """
  enabled: Boolean!
  """
  Configuration for the invoice. Default invoice values will be used if unspecified.
  """
  invoice_data: Type583
}

  """
  
  """
type PaymentLinksResourceInvoiceSettings {
  """
  The account tax IDs associated with the invoice.
  """
  account_tax_ids: [Type584]
  """
  A list of up to 4 custom fields to be displayed on the invoice.
  """
  custom_fields: [InvoiceSettingCustomField]
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Footer to be displayed on the invoice.
  """
  footer: String
  """
  The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  """
  issuer: Type585
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Options for invoice PDF rendering.
  """
  rendering_options: Type586
}

  """
  
  """
type PaymentLinksResourcePaymentIntentData {
  """
  Indicates when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link.
  """
  metadata: JSON!
  """
  Indicates that you intend to make future payments with the payment method collected during checkout.
  """
  setup_future_usage: String
  """
  Extra information about the payment. This will appear on your customer's statement when this payment succeeds in creating a charge.
  """
  statement_descriptor: String
  """
  Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String
  """
  A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
  """
  transfer_group: String
}

  """
  
  """
type PaymentLinksResourcePaymentMethodReuseAgreement {
  """
  Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.

When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
  """
  position: String!
}

  """
  
  """
type PaymentLinksResourcePhoneNumberCollection {
  """
  If `true`, a phone number will be collected during checkout.
  """
  enabled: Boolean!
}

  """
  
  """
type PaymentLinksResourceRestrictions {
  """
  
  """
  completed_sessions: PaymentLinksResourceCompletedSessions!
}

  """
  
  """
type PaymentLinksResourceShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowed_countries: [String]!
}

  """
  
  """
type PaymentLinksResourceShippingOption {
  """
  A non-negative integer in cents representing how much to charge.
  """
  shipping_amount: Int!
  """
  The ID of the Shipping Rate to use for this shipping option.
  """
  shipping_rate: Type587!
}

  """
  
  """
type PaymentLinksResourceSubscriptionData {
  """
  The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  """
  description: String
  """
  
  """
  invoice_settings: PaymentLinksResourceSubscriptionDataInvoiceSettings!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link.
  """
  metadata: JSON!
  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
  """
  Settings related to subscription trials.
  """
  trial_settings: Type588
}

  """
  
  """
type PaymentLinksResourceSubscriptionDataInvoiceSettings {
  """
  
  """
  issuer: ConnectAccountReference!
}

  """
  
  """
type PaymentLinksResourceTaxIdCollection {
  """
  Indicates whether tax ID collection is enabled for the session.
  """
  enabled: Boolean!
}

  """
  
  """
type PaymentLinksResourceTransferData {
  """
  The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  """
  The connected account receiving the transfer.
  """
  destination: Type589!
}

  """
  PaymentMethod objects represent your customer's payment instruments.
You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
Customer objects to store instrument details for future payments.

Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
type PaymentMethod {
  """
  
  """
  acss_debit: PaymentMethodAcssDebit
  """
  
  """
  affirm: PaymentMethodAffirm
  """
  
  """
  afterpay_clearpay: PaymentMethodAfterpayClearpay
  """
  
  """
  alipay: PaymentFlowsPrivatePaymentMethodsAlipay
  """
  
  """
  au_becs_debit: PaymentMethodAuBecsDebit
  """
  
  """
  bacs_debit: PaymentMethodBacsDebit
  """
  
  """
  bancontact: PaymentMethodBancontact
  """
  
  """
  billing_details: BillingDetails!
  """
  
  """
  blik: PaymentMethodBlik
  """
  
  """
  boleto: PaymentMethodBoleto
  """
  
  """
  card: PaymentMethodCard
  """
  
  """
  card_present: PaymentMethodCardPresent
  """
  
  """
  cashapp: PaymentMethodCashapp
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
  """
  customer: Type590
  """
  
  """
  customer_balance: PaymentMethodCustomerBalance
  """
  
  """
  eps: PaymentMethodEps
  """
  
  """
  fpx: PaymentMethodFpx
  """
  
  """
  giropay: PaymentMethodGiropay
  """
  
  """
  grabpay: PaymentMethodGrabpay
  """
  Unique identifier for the object.
  """
  id: String!
  """
  
  """
  ideal: PaymentMethodIdeal
  """
  
  """
  interac_present: PaymentMethodInteracPresent
  """
  
  """
  klarna: PaymentMethodKlarna
  """
  
  """
  konbini: PaymentMethodKonbini
  """
  
  """
  link: PaymentMethodLink
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  
  """
  mobilepay: PaymentMethodMobilepay
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  oxxo: PaymentMethodOxxo
  """
  
  """
  p24: PaymentMethodP24
  """
  
  """
  paynow: PaymentMethodPaynow
  """
  
  """
  paypal: PaymentMethodPaypal
  """
  
  """
  pix: PaymentMethodPix
  """
  
  """
  promptpay: PaymentMethodPromptpay
  """
  Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
  """
  radar_options: RadarRadarOptions
  """
  
  """
  revolut_pay: PaymentMethodRevolutPay
  """
  
  """
  sepa_debit: PaymentMethodSepaDebit
  """
  
  """
  sofort: PaymentMethodSofort
  """
  
  """
  swish: PaymentMethodSwish
  """
  The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  """
  type: String!
  """
  
  """
  us_bank_account: PaymentMethodUsBankAccount
  """
  
  """
  wechat_pay: PaymentMethodWechatPay
  """
  
  """
  zip: PaymentMethodZip
}

  """
  
  """
type PaymentMethodAcssDebit {
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Institution number of the bank account.
  """
  institution_number: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  Transit number of the bank account.
  """
  transit_number: String
}

  """
  
  """
type PaymentMethodAuBecsDebit {
  """
  Six-digit number identifying bank and branch associated with this bank account.
  """
  bsb_number: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
}

  """
  
  """
type PaymentMethodBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  Sort code of the bank account. (e.g., `10-20-30`)
  """
  sort_code: String
}

  """
  
  """
type PaymentMethodBoleto {
  """
  Uniquely identifies the customer tax id (CNPJ or CPF)
  """
  tax_id: String!
}

  """
  
  """
type PaymentMethodCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String!
  """
  Checks on Card address and CVC if provided.
  """
  checks: Type591
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future.
  """
  display_brand: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String!
  """
  Details of the original PaymentMethod that created this object.
  """
  generated_from: Type592
  """
  The last four digits of the card.
  """
  last4: String!
  """
  Contains information about card networks that can be used to process the payment.
  """
  networks: Type593
  """
  Contains details on how this Card may be used for 3D Secure authentication.
  """
  three_d_secure_usage: Type594
  """
  If this Card is part of a card wallet, this contains the details of the card wallet.
  """
  wallet: Type595
}

  """
  
  """
type PaymentMethodCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String
  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

  """
  
  """
type PaymentMethodCardGeneratedCard {
  """
  The charge that created this object.
  """
  charge: String
  """
  Transaction-specific details of the payment method used in the payment.
  """
  payment_method_details: Type596
  """
  The ID of the SetupAttempt that generated this PaymentMethod, if any.
  """
  setup_attempt: Type597
}

  """
  
  """
type PaymentMethodCardPresent {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  The last four digits of the card.
  """
  last4: String
  """
  Contains information about card networks that can be used to process the payment.
  """
  networks: Type598
  """
  How card details were read in this transaction.
  """
  read_method: String
}

  """
  
  """
type PaymentMethodCardPresentNetworks {
  """
  All available networks for the card.
  """
  available: [String]!
  """
  The preferred network for the card.
  """
  preferred: String
}

  """
  
  """
type PaymentMethodCardWallet {
  """
  
  """
  amex_express_checkout: PaymentMethodCardWalletAmexExpressCheckout
  """
  
  """
  apple_pay: PaymentMethodCardWalletApplePay
  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  """
  
  """
  google_pay: PaymentMethodCardWalletGooglePay
  """
  
  """
  link: PaymentMethodCardWalletLink
  """
  
  """
  masterpass: PaymentMethodCardWalletMasterpass
  """
  
  """
  samsung_pay: PaymentMethodCardWalletSamsungPay
  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: String!
  """
  
  """
  visa_checkout: PaymentMethodCardWalletVisaCheckout
}

  """
  
  """
type PaymentMethodCardWalletMasterpass {
  """
  Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  billing_address: Type599
  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String
  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  """
  Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  shipping_address: Type600
}

  """
  
  """
type PaymentMethodCardWalletVisaCheckout {
  """
  Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  billing_address: Type601
  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String
  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  """
  Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  shipping_address: Type602
}

  """
  
  """
type PaymentMethodCashapp {
  """
  A unique and immutable identifier assigned by Cash App to every buyer.
  """
  buyer_id: String
  """
  A public identifier for buyers using Cash App.
  """
  cashtag: String
}

  """
  
  """
type PaymentMethodConfigBizPaymentMethodConfigurationDetails {
  """
  ID of the payment method configuration used.
  """
  id: String!
  """
  ID of the parent payment method configuration used.
  """
  parent: String
}

  """
  
  """
type PaymentMethodConfigResourceDisplayPreference {
  """
  For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
  """
  overridable: Boolean
  """
  The account's display preference.
  """
  preference: String!
  """
  The effective display preference value.
  """
  value: String!
}

  """
  
  """
type PaymentMethodConfigResourcePaymentMethodProperties {
  """
  Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
  """
  available: Boolean!
  """
  
  """
  display_preference: PaymentMethodConfigResourceDisplayPreference!
}

  """
  PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.

There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):

**Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.

**Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.

Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.

Related guides:
- [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
- [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
- [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
  """
type PaymentMethodConfiguration {
  """
  
  """
  acss_debit: PaymentMethodConfigResourcePaymentMethodProperties
  """
  Whether the configuration can be used for new payments.
  """
  active: Boolean!
  """
  
  """
  affirm: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  afterpay_clearpay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  alipay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  apple_pay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  For child configs, the Connect application associated with the configuration.
  """
  application: String
  """
  
  """
  au_becs_debit: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  bacs_debit: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  bancontact: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  blik: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  boleto: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  card: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  cartes_bancaires: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  cashapp: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  customer_balance: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  eps: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  fpx: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  giropay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  google_pay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  grabpay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  Unique identifier for the object.
  """
  id: String!
  """
  
  """
  ideal: PaymentMethodConfigResourcePaymentMethodProperties
  """
  The default configuration is used whenever a payment method configuration is not specified.
  """
  is_default: Boolean!
  """
  
  """
  jcb: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  klarna: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  konbini: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  link: PaymentMethodConfigResourcePaymentMethodProperties
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The configuration's name.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  oxxo: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  p24: PaymentMethodConfigResourcePaymentMethodProperties
  """
  For child configs, the configuration's parent configuration.
  """
  parent: String
  """
  
  """
  paynow: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  paypal: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  promptpay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  revolut_pay: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  sepa_debit: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  sofort: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  us_bank_account: PaymentMethodConfigResourcePaymentMethodProperties
  """
  
  """
  wechat_pay: PaymentMethodConfigResourcePaymentMethodProperties
}

  """
  
  """
type PaymentMethodDetails {
  """
  
  """
  ach_credit_transfer: PaymentMethodDetailsAchCreditTransfer
  """
  
  """
  ach_debit: PaymentMethodDetailsAchDebit
  """
  
  """
  acss_debit: PaymentMethodDetailsAcssDebit
  """
  
  """
  affirm: PaymentMethodDetailsAffirm
  """
  
  """
  afterpay_clearpay: PaymentMethodDetailsAfterpayClearpay
  """
  
  """
  alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails
  """
  
  """
  au_becs_debit: PaymentMethodDetailsAuBecsDebit
  """
  
  """
  bacs_debit: PaymentMethodDetailsBacsDebit
  """
  
  """
  bancontact: PaymentMethodDetailsBancontact
  """
  
  """
  blik: PaymentMethodDetailsBlik
  """
  
  """
  boleto: PaymentMethodDetailsBoleto
  """
  
  """
  card: PaymentMethodDetailsCard
  """
  
  """
  card_present: PaymentMethodDetailsCardPresent
  """
  
  """
  cashapp: PaymentMethodDetailsCashapp
  """
  
  """
  customer_balance: PaymentMethodDetailsCustomerBalance
  """
  
  """
  eps: PaymentMethodDetailsEps
  """
  
  """
  fpx: PaymentMethodDetailsFpx
  """
  
  """
  giropay: PaymentMethodDetailsGiropay
  """
  
  """
  grabpay: PaymentMethodDetailsGrabpay
  """
  
  """
  ideal: PaymentMethodDetailsIdeal
  """
  
  """
  interac_present: PaymentMethodDetailsInteracPresent
  """
  
  """
  klarna: PaymentMethodDetailsKlarna
  """
  
  """
  konbini: PaymentMethodDetailsKonbini
  """
  
  """
  link: PaymentMethodDetailsLink
  """
  
  """
  mobilepay: PaymentMethodDetailsMobilepay
  """
  
  """
  multibanco: PaymentMethodDetailsMultibanco
  """
  
  """
  oxxo: PaymentMethodDetailsOxxo
  """
  
  """
  p24: PaymentMethodDetailsP24
  """
  
  """
  paynow: PaymentMethodDetailsPaynow
  """
  
  """
  paypal: PaymentMethodDetailsPaypal
  """
  
  """
  pix: PaymentMethodDetailsPix
  """
  
  """
  promptpay: PaymentMethodDetailsPromptpay
  """
  
  """
  revolut_pay: PaymentMethodDetailsRevolutPay
  """
  
  """
  sepa_debit: PaymentMethodDetailsSepaDebit
  """
  
  """
  sofort: PaymentMethodDetailsSofort
  """
  
  """
  stripe_account: PaymentMethodDetailsStripeAccount
  """
  
  """
  swish: PaymentMethodDetailsSwish
  """
  The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
An additional hash is included on `payment_method_details` with a name matching this value.
It contains information specific to the payment method.
  """
  type: String!
  """
  
  """
  us_bank_account: PaymentMethodDetailsUsBankAccount
  """
  
  """
  wechat: PaymentMethodDetailsWechat
  """
  
  """
  wechat_pay: PaymentMethodDetailsWechatPay
  """
  
  """
  zip: PaymentMethodDetailsZip
}

  """
  
  """
type PaymentMethodDetailsAchCreditTransfer {
  """
  Account number to transfer funds to.
  """
  account_number: String
  """
  Name of the bank associated with the routing number.
  """
  bank_name: String
  """
  Routing transit number for the bank account to transfer funds to.
  """
  routing_number: String
  """
  SWIFT code of the bank associated with the routing number.
  """
  swift_code: String
}

  """
  
  """
type PaymentMethodDetailsAchDebit {
  """
  Type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  Routing transit number of the bank account.
  """
  routing_number: String
}

  """
  
  """
type PaymentMethodDetailsAcssDebit {
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Institution number of the bank account
  """
  institution_number: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: String
  """
  Transit number of the bank account.
  """
  transit_number: String
}

  """
  
  """
type PaymentMethodDetailsAfterpayClearpay {
  """
  The Afterpay order ID associated with this payment intent.
  """
  order_id: String
  """
  Order identifier shown to the merchant in Afterpay’s online portal.
  """
  reference: String
}

  """
  
  """
type PaymentMethodDetailsAuBecsDebit {
  """
  Bank-State-Branch number of the bank account.
  """
  bsb_number: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: String
}

  """
  
  """
type PaymentMethodDetailsBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: String
  """
  Sort code of the bank account. (e.g., `10-20-30`)
  """
  sort_code: String
}

  """
  
  """
type PaymentMethodDetailsBancontact {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Bank Identifier Code of the bank associated with the bank account.
  """
  bic: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit: Type603
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit_mandate: Type604
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: String
  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsBoleto {
  """
  The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
  """
  tax_id: String!
}

  """
  
  """
type PaymentMethodDetailsCard {
  """
  The authorized amount.
  """
  amount_authorized: Int
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  """
  When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.
  """
  capture_before: Int
  """
  Check results by Card networks on Card address and CVC at time of payment.
  """
  checks: Type605
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  
  """
  extended_authorization: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  
  """
  incremental_authorization: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization
  """
  Installment details for this payment (Mexico only).

For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  """
  installments: Type606
  """
  The last four digits of the card.
  """
  last4: String
  """
  ID of the mandate used to make this payment or created by it.
  """
  mandate: String
  """
  
  """
  multicapture: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture
  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  """
  If this card has network token credentials, this contains the details of the network token credentials.
  """
  network_token: Type607
  """
  
  """
  overcapture: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture
  """
  Populated if this transaction used 3D Secure authentication.
  """
  three_d_secure: Type608
  """
  If this Card is part of a card wallet, this contains the details of the card wallet.
  """
  wallet: Type609
}

  """
  
  """
type PaymentMethodDetailsCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String
  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

  """
  
  """
type PaymentMethodDetailsCardInstallments {
  """
  Installment plan selected for the payment.
  """
  plan: Type610
}

  """
  
  """
type PaymentMethodDetailsCardInstallmentsPlan {
  """
  For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
  """
  count: Int
  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
One of `month`.
  """
  interval: String
  """
  Type of installment plan, one of `fixed_count`.
  """
  type: String!
}

  """
  
  """
type PaymentMethodDetailsCardNetworkToken {
  """
  Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction.
  """
  used: Boolean!
}

  """
  
  """
type PaymentMethodDetailsCardPresent {
  """
  The authorized amount
  """
  amount_authorized: Int
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  """
  When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
  """
  capture_before: Int
  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Authorization response cryptogram.
  """
  emv_auth_data: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String
  """
  Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
  """
  incremental_authorization_supported: Boolean!
  """
  The last four digits of the card.
  """
  last4: String
  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  """
  Details about payments collected offline.
  """
  offline: Type611
  """
  Defines whether the authorized amount can be over-captured or not
  """
  overcapture_supported: Boolean!
  """
  How card details were read in this transaction.
  """
  read_method: String
  """
  A collection of fields required to be displayed on receipts. Only required for EMV transactions.
  """
  receipt: Type612
}

  """
  
  """
type PaymentMethodDetailsCardPresentOffline {
  """
  Time at which the payment was collected while offline
  """
  stored_at: Int
}

  """
  
  """
type PaymentMethodDetailsCardPresentReceipt {
  """
  The type of account being debited or credited
  """
  account_type: String
  """
  EMV tag 9F26, cryptogram generated by the integrated circuit chip.
  """
  application_cryptogram: String
  """
  Mnenomic of the Application Identifier.
  """
  application_preferred_name: String
  """
  Identifier for this transaction.
  """
  authorization_code: String
  """
  EMV tag 8A. A code returned by the card issuer.
  """
  authorization_response_code: String
  """
  Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
  """
  cardholder_verification_method: String
  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String
  """
  The outcome of a series of EMV functions performed by the card reader.
  """
  terminal_verification_results: String
  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

  """
  
  """
type PaymentMethodDetailsCardWallet {
  """
  
  """
  amex_express_checkout: PaymentMethodDetailsCardWalletAmexExpressCheckout
  """
  
  """
  apple_pay: PaymentMethodDetailsCardWalletApplePay
  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  """
  
  """
  google_pay: PaymentMethodDetailsCardWalletGooglePay
  """
  
  """
  link: PaymentMethodDetailsCardWalletLink
  """
  
  """
  masterpass: PaymentMethodDetailsCardWalletMasterpass
  """
  
  """
  samsung_pay: PaymentMethodDetailsCardWalletSamsungPay
  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: String!
  """
  
  """
  visa_checkout: PaymentMethodDetailsCardWalletVisaCheckout
}

  """
  
  """
type PaymentMethodDetailsCardWalletMasterpass {
  """
  Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  billing_address: Type613
  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String
  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  """
  Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  shipping_address: Type614
}

  """
  
  """
type PaymentMethodDetailsCardWalletVisaCheckout {
  """
  Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  billing_address: Type615
  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String
  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  """
  Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  shipping_address: Type616
}

  """
  
  """
type PaymentMethodDetailsCashapp {
  """
  A unique and immutable identifier assigned by Cash App to every buyer.
  """
  buyer_id: String
  """
  A public identifier for buyers using Cash App.
  """
  cashtag: String
}

  """
  
  """
type PaymentMethodDetailsEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: String
  """
  Owner's verified full name. Values are verified or provided by EPS directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
EPS rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsFpx {
  """
  The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
  """
  bank: String!
  """
  Unique transaction id generated by FPX for every request from the merchant
  """
  transaction_id: String
}

  """
  
  """
type PaymentMethodDetailsGiropay {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Bank Identifier Code of the bank associated with the bank account.
  """
  bic: String
  """
  Owner's verified full name. Values are verified or provided by Giropay directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
Giropay rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsGrabpay {
  """
  Unique transaction id generated by GrabPay
  """
  transaction_id: String
}

  """
  
  """
type PaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  """
  bank: String
  """
  The Bank Identifier Code of the customer's bank.
  """
  bic: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit: Type617
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit_mandate: Type618
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsInteracPresent {
  """
  Card brand. Can be `interac`, `mastercard` or `visa`.
  """
  brand: String
  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Authorization response cryptogram.
  """
  emv_auth_data: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String
  """
  The last four digits of the card.
  """
  last4: String
  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  """
  EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
  """
  preferred_locales: [String]
  """
  How card details were read in this transaction.
  """
  read_method: String
  """
  A collection of fields required to be displayed on receipts. Only required for EMV transactions.
  """
  receipt: Type619
}

  """
  
  """
type PaymentMethodDetailsInteracPresentReceipt {
  """
  The type of account being debited or credited
  """
  account_type: String
  """
  EMV tag 9F26, cryptogram generated by the integrated circuit chip.
  """
  application_cryptogram: String
  """
  Mnenomic of the Application Identifier.
  """
  application_preferred_name: String
  """
  Identifier for this transaction.
  """
  authorization_code: String
  """
  EMV tag 8A. A code returned by the card issuer.
  """
  authorization_response_code: String
  """
  Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
  """
  cardholder_verification_method: String
  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String
  """
  The outcome of a series of EMV functions performed by the card reader.
  """
  terminal_verification_results: String
  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

  """
  
  """
type PaymentMethodDetailsKlarna {
  """
  The Klarna payment method used for this transaction.
Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
  """
  payment_method_category: String
  """
  Preferred language of the Klarna authorization page that the customer is redirected to.
Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
  """
  preferred_locale: String
}

  """
  
  """
type PaymentMethodDetailsKonbini {
  """
  If the payment succeeded, this contains the details of the convenience store where the payment was completed.
  """
  store: Type620
}

  """
  
  """
type PaymentMethodDetailsKonbiniStore {
  """
  The name of the convenience store chain where the payment was completed.
  """
  chain: String
}

  """
  
  """
type PaymentMethodDetailsLink {
  """
  Two-letter ISO code representing the funding source country beneath the Link payment.
You could use this attribute to get a sense of international fees.
  """
  country: String
}

  """
  
  """
type PaymentMethodDetailsMobilepay {
  card: Type621
}

  """
  
  """
type PaymentMethodDetailsMultibanco {
  """
  Entity number associated with this Multibanco payment.
  """
  entity: String
  """
  Reference number associated with this Multibanco payment.
  """
  reference: String
}

  """
  
  """
type PaymentMethodDetailsOxxo {
  """
  OXXO reference number
  """
  number: String
}

  """
  
  """
type PaymentMethodDetailsP24 {
  """
  The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
  """
  bank: String
  """
  Unique reference for this Przelewy24 payment.
  """
  reference: String
  """
  Owner's verified full name. Values are verified or provided by Przelewy24 directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
Przelewy24 rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsPaynow {
  """
  Reference number associated with this PayNow payment
  """
  reference: String
}

  """
  
  """
type PaymentMethodDetailsPaypal {
  """
  Owner's email. Values are provided by PayPal directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  payer_email: String
  """
  PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  """
  payer_id: String
  """
  Owner's full name. Values provided by PayPal directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  payer_name: String
  """
  The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction.
  """
  seller_protection: Type622
  """
  A unique ID generated by PayPal for this transaction.
  """
  transaction_id: String
}

  """
  
  """
type PaymentMethodDetailsPix {
  """
  Unique transaction id generated by BCB
  """
  bank_transaction_id: String
}

  """
  
  """
type PaymentMethodDetailsPromptpay {
  """
  Bill reference generated by PromptPay
  """
  reference: String
}

  """
  
  """
type PaymentMethodDetailsSepaDebit {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Branch code of bank associated with the bank account.
  """
  branch_code: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four characters of the IBAN.
  """
  last4: String
  """
  Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve).
  """
  mandate: String
}

  """
  
  """
type PaymentMethodDetailsSofort {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Bank Identifier Code of the bank associated with the bank account.
  """
  bic: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit: Type623
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  """
  generated_sepa_debit_mandate: Type624
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  """
  preferred_language: String
  """
  Owner's verified full name. Values are verified or provided by SOFORT directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  
  """
type PaymentMethodDetailsSwish {
  """
  Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer
  """
  fingerprint: String
  """
  Payer bank reference number for the payment
  """
  payment_reference: String
  """
  The last four digits of the Swish account phone number
  """
  verified_phone_last4: String
}

  """
  
  """
type PaymentMethodDetailsUsBankAccount {
  """
  Account holder type: individual or company.
  """
  account_holder_type: String
  """
  Account type: checkings or savings. Defaults to checking if omitted.
  """
  account_type: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  ID of the mandate used to make this payment.
  """
  mandate: Type625
  """
  Reference number to locate ACH payments with customer's bank.
  """
  payment_reference: String
  """
  Routing number of the bank account.
  """
  routing_number: String
}

  """
  
  """
type PaymentMethodDetailsWechatPay {
  """
  Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
  """
  fingerprint: String
  """
  Transaction ID of this particular WeChat Pay transaction.
  """
  transaction_id: String
}

  """
  A payment method domain represents a web domain that you have registered with Stripe.
Stripe Elements use registered payment method domains to control where certain payment methods are shown.

Related guides: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
  """
type PaymentMethodDomain {
  """
  Indicates the status of a specific payment method on a payment method domain.
  """
  apple_pay: PaymentMethodDomainResourcePaymentMethodStatus!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The domain name that this payment method domain object represents.
  """
  domain_name: String!
  """
  Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
  """
  enabled: Boolean!
  """
  Indicates the status of a specific payment method on a payment method domain.
  """
  google_pay: PaymentMethodDomainResourcePaymentMethodStatus!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Indicates the status of a specific payment method on a payment method domain.
  """
  link: PaymentMethodDomainResourcePaymentMethodStatus!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Indicates the status of a specific payment method on a payment method domain.
  """
  paypal: PaymentMethodDomainResourcePaymentMethodStatus!
}

  """
  Indicates the status of a specific payment method on a payment method domain.
  """
type PaymentMethodDomainResourcePaymentMethodStatus {
  """
  The status of the payment method on the domain.
  """
  status: String!
  """
  Contains additional details about the status of a payment method for a specific payment method domain.
  """
  status_details: PaymentMethodDomainResourcePaymentMethodStatusDetails
}

  """
  Contains additional details about the status of a payment method for a specific payment method domain.
  """
type PaymentMethodDomainResourcePaymentMethodStatusDetails {
  """
  The error message associated with the status of the payment method on the domain.
  """
  error_message: String!
}

  """
  
  """
type PaymentMethodEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: String
}

  """
  
  """
type PaymentMethodFpx {
  """
  The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
  """
  bank: String!
}

  """
  
  """
type PaymentMethodIdeal {
  """
  The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  """
  bank: String
  """
  The Bank Identifier Code of the customer's bank, if the bank was provided.
  """
  bic: String
}

  """
  
  """
type PaymentMethodInteracPresent {
  """
  Card brand. Can be `interac`, `mastercard` or `visa`.
  """
  brand: String
  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  """
  cardholder_name: String
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  The last four digits of the card.
  """
  last4: String
  """
  Contains information about card networks that can be used to process the payment.
  """
  networks: Type626
  """
  EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
  """
  preferred_locales: [String]
  """
  How card details were read in this transaction.
  """
  read_method: String
}

  """
  
  """
type PaymentMethodKlarna {
  """
  The customer's date of birth, if provided.
  """
  dob: Type627
}

  """
  
  """
type PaymentMethodLink {
  """
  Account owner's email address.
  """
  email: String
}

  """
  
  """
type PaymentMethodOptionsAffirm {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Preferred language of the Affirm authorization page that the customer is redirected to.
  """
  preferred_locale: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsAfterpayClearpay {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
This field differs from the statement descriptor and item name.
  """
  reference: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsAlipay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsBacsDebit {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: String!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsBoleto {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsCardInstallments {
  """
  Installment plans that may be selected for this PaymentIntent.
  """
  available_plans: [PaymentMethodDetailsCardInstallmentsPlan]
  """
  Whether Installments are enabled for this PaymentIntent.
  """
  enabled: Boolean!
  """
  Installment plan selected for this PaymentIntent.
  """
  plan: Type628
}

  """
  
  """
type PaymentMethodOptionsCardMandateOptions {
  """
  Amount to be charged for future payments.
  """
  amount: Int!
  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: String!
  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String
  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int
  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: String!
  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int
  """
  Unique identifier for the mandate or subscription.
  """
  reference: String!
  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int!
  """
  Specifies the type of mandates supported. Possible values are `india`.
  """
  supported_types: [String]
}

  """
  
  """
type PaymentMethodOptionsCardPresent {
  """
  Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
  """
  request_extended_authorization: Boolean
  """
  Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
  """
  request_incremental_authorization_support: Boolean
}

  """
  
  """
type PaymentMethodOptionsCashapp {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsCustomerBalance {
  """
  
  """
  bank_transfer: PaymentMethodOptionsCustomerBalanceBankTransfer
  """
  The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  """
  funding_type: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsCustomerBalanceBankTransfer {
  """
  
  """
  eu_bank_transfer: PaymentMethodOptionsCustomerBalanceEuBankAccount
  """
  List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.

Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
  """
  requested_address_types: [String]
  """
  The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  """
  type: String
}

  """
  
  """
type PaymentMethodOptionsCustomerBalanceEuBankAccount {
  """
  The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
  """
  country: String!
}

  """
  
  """
type PaymentMethodOptionsFpx {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsGiropay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsGrabpay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsIdeal {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsKlarna {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Preferred locale of the Klarna checkout page that the customer is redirected to.
  """
  preferred_locale: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsKonbini {
  """
  An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
  """
  confirmation_number: String
  """
  The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  """
  expires_after_days: Int
  """
  The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
  """
  expires_at: Int
  """
  A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
  """
  product_description: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsOxxo {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int!
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsP24 {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsPaynow {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsPaypal {
  """
  Controls when the funds will be captured from the customer's account.
  """
  capture_method: String
  """
  Preferred locale of the PayPal checkout page that the customer is redirected to.
  """
  preferred_locale: String
  """
  A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
  """
  reference: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsPix {
  """
  The number of seconds (between 10 and 1209600) after which Pix payment will expire.
  """
  expires_after_seconds: Int
  """
  The timestamp at which the Pix expires.
  """
  expires_at: Int
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsPromptpay {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsSofort {
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  """
  preferred_language: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsUsBankAccountMandateOptions {
  """
  Mandate collection method
  """
  collection_method: String
}

  """
  
  """
type PaymentMethodOptionsWechatPay {
  """
  The app ID registered with WeChat Pay. Only required when client is ios or android.
  """
  app_id: String
  """
  The client type that the end customer will pay from
  """
  client: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodOptionsZip {
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.

Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.

When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: String
}

  """
  
  """
type PaymentMethodP24 {
  """
  The customer's bank, if provided.
  """
  bank: String
}

  """
  
  """
type PaymentMethodPaypal {
  """
  Owner's email. Values are provided by PayPal directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  payer_email: String
  """
  PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  """
  payer_id: String
}

  """
  
  """
type PaymentMethodSepaDebit {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Branch code of bank associated with the bank account.
  """
  branch_code: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Information about the object that generated this PaymentMethod.
  """
  generated_from: Type629
  """
  Last four characters of the IBAN.
  """
  last4: String
}

  """
  
  """
type PaymentMethodSofort {
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
}

  """
  
  """
type PaymentMethodUsBankAccount {
  """
  Account holder type: individual or company.
  """
  account_holder_type: String
  """
  Account type: checkings or savings. Defaults to checking if omitted.
  """
  account_type: String
  """
  The name of the bank.
  """
  bank_name: String
  """
  The ID of the Financial Connections Account used to create the payment method.
  """
  financial_connections_account: String
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Last four digits of the bank account number.
  """
  last4: String
  """
  Contains information about US bank account networks that can be used.
  """
  networks: Type630
  """
  Routing number of the bank account.
  """
  routing_number: String
  """
  Contains information about the future reusability of this PaymentMethod.
  """
  status_details: Type631
}

  """
  
  """
type PaymentMethodUsBankAccountBlocked {
  """
  The ACH network code that resulted in this block.
  """
  network_code: String
  """
  The reason why this PaymentMethod's fingerprint has been blocked
  """
  reason: String
}

  """
  
  """
type PaymentMethodUsBankAccountStatusDetails {
  """
  
  """
  blocked: PaymentMethodUsBankAccountBlocked
}

  """
  
  """
type PaymentPagesCheckoutSessionAfterExpiration {
  """
  When set, configuration used to recover the Checkout Session on expiry.
  """
  recovery: Type632
}

  """
  
  """
type PaymentPagesCheckoutSessionAfterExpirationRecovery {
  """
  Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
  """
  allow_promotion_codes: Boolean!
  """
  If `true`, a recovery url will be generated to recover this Checkout Session if it
expires before a transaction is completed. It will be attached to the
Checkout Session object upon expiration.
  """
  enabled: Boolean!
  """
  The timestamp at which the recovery URL will expire.
  """
  expires_at: Int
  """
  URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
  """
  url: String
}

  """
  
  """
type PaymentPagesCheckoutSessionAutomaticTax {
  """
  Indicates whether automatic tax is enabled for the session
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type633
  """
  The status of the most recent automated tax calculation for this session.
  """
  status: String
}

  """
  
  """
type PaymentPagesCheckoutSessionConsent {
  """
  If `opt_in`, the customer consents to receiving promotional communications
from the merchant about this Checkout Session.
  """
  promotions: String
  """
  If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
  """
  terms_of_service: String
}

  """
  
  """
type PaymentPagesCheckoutSessionConsentCollection {
  """
  If set to `hidden`, it will hide legal text related to the reuse of a payment method.
  """
  payment_method_reuse_agreement: Type634
  """
  If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
Session will determine whether to display an option to opt into promotional communication
from the merchant depending on the customer's locale. Only available to US merchants.
  """
  promotions: String
  """
  If set to `required`, it requires customers to accept the terms of service before being able to pay.
  """
  terms_of_service: String
}

  """
  
  """
type PaymentPagesCheckoutSessionCurrencyConversion {
  """
  Total of all items in source currency before discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total of all items in source currency after discounts and taxes are applied.
  """
  amount_total: Int!
  """
  Exchange rate used to convert source currency amounts to customer currency amounts
  """
  fx_rate: String!
  """
  Creation currency of the CheckoutSession before localization
  """
  source_currency: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFields {
  """
  
  """
  dropdown: PaymentPagesCheckoutSessionCustomFieldsDropdown
  """
  String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
  """
  key: String!
  """
  
  """
  label: PaymentPagesCheckoutSessionCustomFieldsLabel!
  """
  
  """
  numeric: PaymentPagesCheckoutSessionCustomFieldsNumeric
  """
  Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
  """
  optional: Boolean!
  """
  
  """
  text: PaymentPagesCheckoutSessionCustomFieldsText
  """
  The type of the field.
  """
  type: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFieldsDropdown {
  """
  The options available for the customer to select. Up to 200 options allowed.
  """
  options: [PaymentPagesCheckoutSessionCustomFieldsOption]!
  """
  The option selected by the customer. This will be the `value` for the option.
  """
  value: String
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFieldsLabel {
  """
  Custom text for the label, displayed to the customer. Up to 50 characters.
  """
  custom: String
  """
  The type of the label.
  """
  type: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFieldsNumeric {
  """
  The maximum character length constraint for the customer's input.
  """
  maximum_length: Int
  """
  The minimum character length requirement for the customer's input.
  """
  minimum_length: Int
  """
  The value entered by the customer, containing only digits.
  """
  value: String
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFieldsOption {
  """
  The label for the option, displayed to the customer. Up to 100 characters.
  """
  label: String!
  """
  The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
  """
  value: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomFieldsText {
  """
  The maximum character length constraint for the customer's input.
  """
  maximum_length: Int
  """
  The minimum character length requirement for the customer's input.
  """
  minimum_length: Int
  """
  The value entered by the customer.
  """
  value: String
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomText {
  """
  Custom text that should be displayed after the payment confirmation button.
  """
  after_submit: Type635
  """
  Custom text that should be displayed alongside shipping address collection.
  """
  shipping_address: Type636
  """
  Custom text that should be displayed alongside the payment confirmation button.
  """
  submit: Type637
  """
  Custom text that should be displayed in place of the default terms of service agreement text.
  """
  terms_of_service_acceptance: Type638
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomTextPosition {
  """
  Text may be up to 1200 characters in length.
  """
  message: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionCustomerDetails {
  """
  The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
  """
  address: Type639
  """
  The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
  """
  email: String
  """
  The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
  """
  name: String
  """
  The customer's phone number after a completed Checkout Session.
  """
  phone: String
  """
  The customer’s tax exempt status after a completed Checkout Session.
  """
  tax_exempt: String
  """
  The customer’s tax IDs after a completed Checkout Session.
  """
  tax_ids: [PaymentPagesCheckoutSessionTaxId]
}

  """
  
  """
type PaymentPagesCheckoutSessionInvoiceCreation {
  """
  Indicates whether invoice creation is enabled for the Checkout Session.
  """
  enabled: Boolean!
  """
  
  """
  invoice_data: PaymentPagesCheckoutSessionInvoiceSettings!
}

  """
  
  """
type PaymentPagesCheckoutSessionInvoiceSettings {
  """
  The account tax IDs associated with the invoice.
  """
  account_tax_ids: [Type640]
  """
  Custom fields displayed on the invoice.
  """
  custom_fields: [InvoiceSettingCustomField]
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Footer displayed on the invoice.
  """
  footer: String
  """
  The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  """
  issuer: Type641
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Options for invoice PDF rendering.
  """
  rendering_options: Type642
}

  """
  
  """
type PaymentPagesCheckoutSessionPaymentMethodReuseAgreement {
  """
  Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.

When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
  """
  position: String!
}

  """
  
  """
type PaymentPagesCheckoutSessionPhoneNumberCollection {
  """
  Indicates whether phone number collection is enabled for the session
  """
  enabled: Boolean!
}

  """
  
  """
type PaymentPagesCheckoutSessionShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for
shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowed_countries: [String]!
}

  """
  
  """
type PaymentPagesCheckoutSessionShippingCost {
  """
  Total shipping cost before any discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
  """
  amount_tax: Int!
  """
  Total shipping cost after discounts and taxes are applied.
  """
  amount_total: Int!
  """
  The ID of the ShippingRate for this order.
  """
  shipping_rate: Type643
  """
  The taxes applied to the shipping rate.
  """
  taxes: [LineItemsTaxAmount]
}

  """
  
  """
type PaymentPagesCheckoutSessionShippingOption {
  """
  A non-negative integer in cents representing how much to charge.
  """
  shipping_amount: Int!
  """
  The shipping rate.
  """
  shipping_rate: Type644!
}

  """
  
  """
type PaymentPagesCheckoutSessionTaxId {
  """
  The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
  """
  type: String!
  """
  The value of the tax ID.
  """
  value: String
}

  """
  
  """
type PaymentPagesCheckoutSessionTaxIdCollection {
  """
  Indicates whether tax ID collection is enabled for the session
  """
  enabled: Boolean!
}

  """
  
  """
type PaymentPagesCheckoutSessionTotalDetails {
  """
  This is the sum of all the discounts.
  """
  amount_discount: Int!
  """
  This is the sum of all the shipping amounts.
  """
  amount_shipping: Int
  """
  This is the sum of all the tax amounts.
  """
  amount_tax: Int!
  """
  
  """
  breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
}

  """
  
  """
type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
  """
  The aggregated discounts.
  """
  discounts: [LineItemsDiscountAmount]!
  """
  The aggregated tax amounts by rate.
  """
  taxes: [LineItemsTaxAmount]!
}

  """
  A `Payout` object is created when you receive funds from Stripe, or when you
initiate a payout to either a bank account or debit card of a [connected
Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
and list all payouts. Payouts are made on [varying
schedules](/docs/connect/manage-payout-schedule), depending on your country and
industry.

Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
  """
type Payout {
  """
  The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
  """
  amount: Int!
  """
  Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
  """
  arrival_date: Int!
  """
  Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts).
  """
  automatic: Boolean!
  """
  ID of the balance transaction that describes the impact of this payout on your account balance.
  """
  balance_transaction: Type649
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  ID of the bank account or card the payout is sent to.
  """
  destination: Type650
  """
  If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.
  """
  failure_balance_transaction: Type651
  """
  Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures).
  """
  failure_code: String
  """
  Message that provides the reason for a payout failure, if available.
  """
  failure_message: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
  """
  method: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  If the payout reverses another, this is the ID of the original payout.
  """
  original_payout: Type652
  """
  If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
  """
  reconciliation_status: String!
  """
  If the payout reverses, this is the ID of the payout that reverses this payout.
  """
  reversed_by: Type653
  """
  The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`.
  """
  source_type: String!
  """
  Extra information about a payout that displays on the user's bank statement.
  """
  statement_descriptor: String
  """
  Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.
  """
  status: String!
  """
  Can be `bank_account` or `card`.
  """
  type: String!
}

  """
  
  """
type PaypalSellerProtection {
  """
  An array of conditions that are covered for the transaction, if applicable.
  """
  dispute_categories: [String]
  """
  Indicates whether the transaction is eligible for PayPal's seller protection.
  """
  status: String!
}

  """
  
  """
type Period {
  """
  The end date of this usage period. All usage up to and including this point in time is included.
  """
  end: Int
  """
  The start date of this usage period. All usage after this point in time is included.
  """
  start: Int
}

  """
  This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform prefilling and account onboarding steps.

Related guide: [Handling identity verification with the API](https://stripe.com/docs/connect/handling-api-verification#person-information)
  """
type Person {
  """
  The account the person is associated with.
  """
  account: String!
  """
  
  """
  additional_tos_acceptances: PersonAdditionalTosAcceptances
  """
  
  """
  address: Address
  address_kana: Type654
  address_kanji: Type655
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  
  """
  dob: LegalEntityDob
  """
  The person's email address.
  """
  email: String
  """
  The person's first name.
  """
  first_name: String
  """
  The Kana variation of the person's first name (Japan only).
  """
  first_name_kana: String
  """
  The Kanji variation of the person's first name (Japan only).
  """
  first_name_kanji: String
  """
  A list of alternate names or aliases that the person is known by.
  """
  full_name_aliases: [String]
  future_requirements: Type656
  """
  The person's gender (International regulations require either "male" or "female").
  """
  gender: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`).
  """
  id_number_provided: Boolean
  """
  Whether the person's `id_number_secondary` was provided.
  """
  id_number_secondary_provided: Boolean
  """
  The person's last name.
  """
  last_name: String
  """
  The Kana variation of the person's last name (Japan only).
  """
  last_name_kana: String
  """
  The Kanji variation of the person's last name (Japan only).
  """
  last_name_kanji: String
  """
  The person's maiden name.
  """
  maiden_name: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The country where the person is a national.
  """
  nationality: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The person's phone number.
  """
  phone: String
  """
  Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  """
  political_exposure: String
  """
  
  """
  registered_address: Address
  """
  
  """
  relationship: PersonRelationship
  requirements: Type657
  """
  Whether the last four digits of the person's Social Security number have been provided (U.S. only).
  """
  ssn_last_4_provided: Boolean
  """
  
  """
  verification: LegalEntityPersonVerification
}

  """
  
  """
type PersonAdditionalTosAcceptance {
  """
  The Unix timestamp marking when the legal guardian accepted the service agreement.
  """
  date: Int
  """
  The IP address from which the legal guardian accepted the service agreement.
  """
  ip: String
  """
  The user agent of the browser from which the legal guardian accepted the service agreement.
  """
  user_agent: String
}

  """
  
  """
type PersonAdditionalTosAcceptances {
  """
  
  """
  account: PersonAdditionalTosAcceptance!
}

  """
  
  """
type PersonFutureRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
  """
  currently_due: [String]!
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]!
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
  """
  eventually_due: [String]!
  """
  Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  """
  past_due: [String]!
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
  """
  pending_verification: [String]!
}

  """
  
  """
type PersonRelationship {
  """
  Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
  """
  director: Boolean
  """
  Whether the person has significant responsibility to control, manage, or direct the organization.
  """
  executive: Boolean
  """
  Whether the person is the legal guardian of the account's representative.
  """
  legal_guardian: Boolean
  """
  Whether the person is an owner of the account’s legal entity.
  """
  owner: Boolean
  """
  The percent owned by the person of the account's legal entity.
  """
  percent_ownership: Int
  """
  Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
  """
  representative: Boolean
  """
  The person's title (e.g., CEO, Support Engineer).
  """
  title: String
}

  """
  
  """
type PersonRequirements {
  """
  Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  """
  alternatives: [AccountRequirementsAlternative]
  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]!
  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [AccountRequirementsError]!
  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
  """
  eventually_due: [String]!
  """
  Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
  """
  past_due: [String]!
  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]!
}

  """
  You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.

Plans define the base price, currency, and billing cycle for recurring purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  """
type Plan {
  """
  Whether the plan can be used for new purchases.
  """
  active: Boolean!
  """
  Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
  """
  aggregate_usage: String
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  amount: Int
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  amount_decimal: String
  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: String!
  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  The meter tracking the usage of a metered price
  """
  meter: String
  """
  A brief description of the plan, hidden from customers.
  """
  nickname: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The product whose pricing this plan determines.
  """
  product: Type658
  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [PlanTier]
  """
  Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  """
  tiers_mode: String
  """
  Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
  """
  transform_usage: Type659
  """
  Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  """
  trial_period_days: Int
  """
  Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: String!
}

  """
  
  """
type PlanTier {
  """
  Price for the entire tier.
  """
  flat_amount: Int
  """
  Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String
  """
  Per unit price for units relevant to the tier.
  """
  unit_amount: Int
  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
  """
  Up to and including to this quantity will be contained in the tier.
  """
  up_to: Int
}

  """
  
  """
type PlatformTaxFee {
  """
  The Connected account that incurred this charge.
  """
  account: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The payment object that caused this tax to be inflicted.
  """
  source_transaction: String!
  """
  The type of tax (VAT).
  """
  type: String!
}

  """
  
  """
type PortalBusinessProfile {
  """
  The messaging shown to customers in the portal.
  """
  headline: String
  """
  A link to the business’s publicly available privacy policy.
  """
  privacy_policy_url: String
  """
  A link to the business’s publicly available terms of service.
  """
  terms_of_service_url: String
}

  """
  
  """
type PortalCustomerUpdate {
  """
  The types of customer updates that are supported. When empty, customers are not updateable.
  """
  allowed_updates: [String]!
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
}

  """
  
  """
type PortalFeatures {
  """
  
  """
  customer_update: PortalCustomerUpdate!
  """
  
  """
  invoice_history: PortalInvoiceList!
  """
  
  """
  payment_method_update: PortalPaymentMethodUpdate!
  """
  
  """
  subscription_cancel: PortalSubscriptionCancel!
  """
  
  """
  subscription_pause: PortalSubscriptionPause!
  """
  
  """
  subscription_update: PortalSubscriptionUpdate!
}

  """
  
  """
type PortalFlowsAfterCompletionHostedConfirmation {
  """
  A custom message to display to the customer after the flow is completed.
  """
  custom_message: String
}

  """
  
  """
type PortalFlowsAfterCompletionRedirect {
  """
  The URL the customer will be redirected to after the flow is completed.
  """
  return_url: String!
}

  """
  
  """
type PortalFlowsCouponOffer {
  """
  The ID of the coupon to be offered.
  """
  coupon: String!
}

  """
  
  """
type PortalFlowsFlow {
  """
  
  """
  after_completion: PortalFlowsFlowAfterCompletion!
  """
  Configuration when `flow.type=subscription_cancel`.
  """
  subscription_cancel: Type660
  """
  Configuration when `flow.type=subscription_update`.
  """
  subscription_update: Type661
  """
  Configuration when `flow.type=subscription_update_confirm`.
  """
  subscription_update_confirm: Type662
  """
  Type of flow that the customer will go through.
  """
  type: String!
}

  """
  
  """
type PortalFlowsFlowAfterCompletion {
  """
  Configuration when `after_completion.type=hosted_confirmation`.
  """
  hosted_confirmation: Type663
  """
  Configuration when `after_completion.type=redirect`.
  """
  redirect: Type664
  """
  The specified type of behavior after the flow is completed.
  """
  type: String!
}

  """
  
  """
type PortalFlowsFlowSubscriptionCancel {
  """
  Specify a retention strategy to be used in the cancellation flow.
  """
  retention: Type665
  """
  The ID of the subscription to be canceled.
  """
  subscription: String!
}

  """
  
  """
type PortalFlowsFlowSubscriptionUpdate {
  """
  The ID of the subscription to be updated.
  """
  subscription: String!
}

  """
  
  """
type PortalFlowsFlowSubscriptionUpdateConfirm {
  """
  The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified.
  """
  discounts: [PortalFlowsSubscriptionUpdateConfirmDiscount]
  """
  The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable.
  """
  items: [PortalFlowsSubscriptionUpdateConfirmItem]!
  """
  The ID of the subscription to be updated.
  """
  subscription: String!
}

  """
  
  """
type PortalFlowsRetention {
  """
  Configuration when `retention.type=coupon_offer`.
  """
  coupon_offer: Type666
  """
  Type of retention strategy that will be used.
  """
  type: String!
}

  """
  
  """
type PortalFlowsSubscriptionUpdateConfirmDiscount {
  """
  The ID of the coupon to apply to this subscription update.
  """
  coupon: String
  """
  The ID of a promotion code to apply to this subscription update.
  """
  promotion_code: String
}

  """
  
  """
type PortalFlowsSubscriptionUpdateConfirmItem {
  """
  The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated.
  """
  id: String
  """
  The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products).
  """
  price: String
  """
  [Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow.
  """
  quantity: Int
}

  """
  
  """
type PortalInvoiceList {
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
}

  """
  
  """
type PortalLoginPage {
  """
  If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.

If `false`, the previously generated `url`, if any, will be deactivated.
  """
  enabled: Boolean!
  """
  A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal.
  """
  url: String
}

  """
  
  """
type PortalPaymentMethodUpdate {
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
}

  """
  
  """
type PortalSubscriptionCancel {
  """
  
  """
  cancellation_reason: PortalSubscriptionCancellationReason!
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
  """
  Whether to cancel subscriptions immediately or at the end of the billing period.
  """
  mode: String!
  """
  Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
  """
  proration_behavior: String!
}

  """
  
  """
type PortalSubscriptionCancellationReason {
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
  """
  Which cancellation reasons will be given as options to the customer.
  """
  options: [String]!
}

  """
  
  """
type PortalSubscriptionPause {
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
}

  """
  
  """
type PortalSubscriptionUpdate {
  """
  The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
  """
  default_allowed_updates: [String]!
  """
  Whether the feature is enabled.
  """
  enabled: Boolean!
  """
  The list of up to 10 products that support subscription updates.
  """
  products: [PortalSubscriptionUpdateProduct]
  """
  Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation.
  """
  proration_behavior: String!
}

  """
  
  """
type PortalSubscriptionUpdateProduct {
  """
  The list of price IDs which, when subscribed to, a subscription can be updated.
  """
  prices: [String]!
  """
  The product ID.
  """
  product: String!
}

  """
  Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  """
type Price {
  """
  Whether the price can be used for new purchases.
  """
  active: Boolean!
  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  """
  currency_options: JSON
  """
  When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
  """
  custom_unit_amount: Type667
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  """
  lookup_key: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  A brief description of the price, hidden from customers.
  """
  nickname: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ID of the product this price is associated with.
  """
  product: Type668!
  """
  The recurring components of a price such as `interval` and `usage_type`.
  """
  recurring: Type669
  """
  Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  """
  tax_behavior: String
  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [PriceTier]
  """
  Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  """
  tiers_mode: String
  """
  Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
  """
  transform_quantity: Type670
  """
  One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  """
  type: String!
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  unit_amount: Int
  """
  The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  unit_amount_decimal: String
}

  """
  
  """
type PriceTier {
  """
  Price for the entire tier.
  """
  flat_amount: Int
  """
  Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String
  """
  Per unit price for units relevant to the tier.
  """
  unit_amount: Int
  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String
  """
  Up to and including to this quantity will be contained in the tier.
  """
  up_to: Int
}

  """
  Products describe the specific goods or services you offer to your customers.
For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
[share a Payment Link](https://stripe.com/docs/payment-links),
[accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
  """
type Product {
  """
  Whether the product is currently available for purchase.
  """
  active: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
  """
  default_price: Type671
  """
  The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  """
  description: String
  """
  A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
  """
  features: [ProductMarketingFeature]!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  """
  images: [String]!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The product's name, meant to be displayable to the customer.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The dimensions of this product for shipping purposes.
  """
  package_dimensions: Type672
  """
  Whether this product is shipped (i.e., physical goods).
  """
  shippable: Boolean
  """
  Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
  """
  statement_descriptor: String
  """
  A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
  """
  tax_code: Type673
  """
  A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
  """
  unit_label: String
  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int!
  """
  A URL of a publicly-accessible webpage for this product.
  """
  url: String
}

  """
  
  """
type ProductMarketingFeature {
  """
  The marketing feature name. Up to 80 characters long.
  """
  name: String
}

  """
  A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
create multiple codes for a single coupon.
  """
type PromotionCode {
  """
  Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
  """
  active: Boolean!
  """
  The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
  """
  code: String!
  """
  A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  """
  coupon: Coupon!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The customer that this promotion code can be used by.
  """
  customer: Type674
  """
  Date at which the promotion code can no longer be redeemed.
  """
  expires_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Maximum number of times this promotion code can be redeemed.
  """
  max_redemptions: Int
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  restrictions: PromotionCodesResourceRestrictions!
  """
  Number of times this promotion code has been used.
  """
  times_redeemed: Int!
}

  """
  
  """
type PromotionCodeCurrencyOption {
  """
  Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  """
  minimum_amount: Int!
}

  """
  
  """
type PromotionCodesResourceRestrictions {
  """
  Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  """
  currency_options: JSON
  """
  A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
  """
  first_time_transaction: Boolean!
  """
  Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  """
  minimum_amount: Int
  """
  Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
  """
  minimum_amount_currency: String
}

type Query {
  """
  <p>Invalidates a short-lived API key for a given resource.</p>
  """
  deleteEphemeralKeysKey(key: String!): EphemeralKey @http(method: "DELETE", path: "/v1/ephemeral_keys/{{args.key}}")
  """
  <p>Removes the currently applied discount on a subscription.</p>
  """
  deleteSubscriptionsSubscriptionExposedIdDiscount(subscription_exposed_id: String!): DeletedDiscount @http(method: "DELETE", path: "/v1/subscriptions/{{args.subscription_exposed_id}}/discount")
  """
  <p>Retrieves the details of an account.</p>
  """
  getAccount(expand: [String]): Account @http(path: "/v1/account", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
  """
  getAccounts(created: Type0, ending_before: String, expand: [String], limit: Int, starting_after: String): Type1 @http(path: "/v1/accounts", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an account.</p>
  """
  getAccountsAccount(account: String!, expand: [String]): Account @http(path: "/v1/accounts/{{args.account}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieve a specified external account for a given account.</p>
  """
  getAccountsAccountBankAccountsId(account: String!, expand: [String], id: String!): ExternalAccount @http(path: "/v1/accounts/{{args.account}}/bank_accounts/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
  """
  getAccountsAccountCapabilities(account: String!, expand: [String]): Type2 @http(path: "/v1/accounts/{{args.account}}/capabilities", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves information about the specified Account Capability.</p>
  """
  getAccountsAccountCapabilitiesCapability(account: String!, capability: String!, expand: [String]): Capability @http(path: "/v1/accounts/{{args.account}}/capabilities/{{args.capability}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List external accounts for an account.</p>
  """
  getAccountsAccountExternalAccounts(account: String!, ending_before: String, expand: [String], limit: Int, object: String, starting_after: String): Type3 @http(path: "/v1/accounts/{{args.account}}/external_accounts", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "object", value: "{{args.object}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieve a specified external account for a given account.</p>
  """
  getAccountsAccountExternalAccountsId(account: String!, expand: [String], id: String!): ExternalAccount @http(path: "/v1/accounts/{{args.account}}/external_accounts/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  """
  getAccountsAccountPeople(account: String!, ending_before: String, expand: [String], limit: Int, relationship: Type4, starting_after: String): Type5 @http(path: "/v1/accounts/{{args.account}}/people", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "relationship", value: "{{args.relationship}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves an existing person.</p>
  """
  getAccountsAccountPeoplePerson(account: String!, expand: [String], person: String!): Person @http(path: "/v1/accounts/{{args.account}}/people/{{args.person}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  """
  getAccountsAccountPersons(account: String!, ending_before: String, expand: [String], limit: Int, relationship: Type6, starting_after: String): Type7 @http(path: "/v1/accounts/{{args.account}}/persons", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "relationship", value: "{{args.relationship}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves an existing person.</p>
  """
  getAccountsAccountPersonsPerson(account: String!, expand: [String], person: String!): Person @http(path: "/v1/accounts/{{args.account}}/persons/{{args.person}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List apple pay domains.</p>
  """
  getApplePayDomains(domain_name: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Type8 @http(path: "/v1/apple_pay/domains", query: [{key: "domain_name", value: "{{args.domain_name}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieve an apple pay domain.</p>
  """
  getApplePayDomainsDomain(domain: String!, expand: [String]): ApplePayDomain @http(path: "/v1/apple_pay/domains/{{args.domain}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
  """
  getApplicationFees(charge: String, created: Type9, ending_before: String, expand: [String], limit: Int, starting_after: String): Type10 @http(path: "/v1/application_fees", query: [{key: "charge", value: "{{args.charge}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
  """
  getApplicationFeesFeeRefundsId(expand: [String], fee: String!, id: String!): FeeRefund @http(path: "/v1/application_fees/{{args.fee}}/refunds/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
  """
  getApplicationFeesId(expand: [String], id: String!): ApplicationFee @http(path: "/v1/application_fees/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  """
  getApplicationFeesIdRefunds(ending_before: String, expand: [String], id: String!, limit: Int, starting_after: String): Type11 @http(path: "/v1/application_fees/{{args.id}}/refunds", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>List all secrets stored on the given scope.</p>
  """
  getAppsSecrets(ending_before: String, expand: [String], limit: Int, scope: Type12!, starting_after: String): Type13 @http(path: "/v1/apps/secrets", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "scope", value: "{{args.scope}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Finds a secret in the secret store by name and scope.</p>
  """
  getAppsSecretsFind(expand: [String], name: String!, scope: Type14!): Apps.secret @http(path: "/v1/apps/secrets/find", query: [{key: "expand", value: "{{args.expand}}"}, {key: "name", value: "{{args.name}}"}, {key: "scope", value: "{{args.scope}}"}])
  """
  <p>Retrieves the current account balance, based on the authentication that was used to make the request.
 For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
  """
  getBalance(expand: [String]): Balance @http(path: "/v1/balance", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  """
  getBalanceHistory(created: Type15, currency: String, ending_before: String, expand: [String], limit: Int, payout: String, source: String, starting_after: String, type: String): Type16 @http(path: "/v1/balance/history", query: [{key: "created", value: "{{args.created}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payout", value: "{{args.payout}}"}, {key: "source", value: "{{args.source}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  """
  getBalanceHistoryId(expand: [String], id: String!): BalanceTransaction @http(path: "/v1/balance/history/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  """
  getBalanceTransactions(created: Type17, currency: String, ending_before: String, expand: [String], limit: Int, payout: String, source: String, starting_after: String, type: String): Type18 @http(path: "/v1/balance_transactions", query: [{key: "created", value: "{{args.created}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payout", value: "{{args.payout}}"}, {key: "source", value: "{{args.source}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  """
  getBalanceTransactionsId(expand: [String], id: String!): BalanceTransaction @http(path: "/v1/balance_transactions/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieve a list of billing meters.</p>
  """
  getBillingMeters(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type19 @http(path: "/v1/billing/meters", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves a billing meter given an ID</p>
  """
  getBillingMetersId(expand: [String], id: String!): Billing.meter @http(path: "/v1/billing/meters/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieve a list of billing meter event summaries.</p>
  """
  getBillingMetersIdEventSummaries(customer: String!, end_time: Int!, ending_before: String, expand: [String], id: String!, limit: Int, start_time: Int!, starting_after: String, value_grouping_window: String): Type20 @http(path: "/v1/billing/meters/{{args.id}}/event_summaries", query: [{key: "customer", value: "{{args.customer}}"}, {key: "end_time", value: "{{args.end_time}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "start_time", value: "{{args.start_time}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "value_grouping_window", value: "{{args.value_grouping_window}}"}])
  """
  <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
  """
  getBillingPortalConfigurations(active: Boolean, ending_before: String, expand: [String], is_default: Boolean, limit: Int, starting_after: String): Type21 @http(path: "/v1/billing_portal/configurations", query: [{key: "active", value: "{{args.active}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "is_default", value: "{{args.is_default}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
  """
  getBillingPortalConfigurationsConfiguration(configuration: String!, expand: [String]): BillingPortal.configuration @http(path: "/v1/billing_portal/configurations/{{args.configuration}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
  """
  getCharges(created: Type22, customer: String, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String, transfer_group: String): Type23 @http(path: "/v1/charges", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_intent", value: "{{args.payment_intent}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "transfer_group", value: "{{args.transfer_group}}"}])
  """
  <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
  """
  getChargesCharge(charge: String!, expand: [String]): Charge @http(path: "/v1/charges/{{args.charge}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieve a dispute for a specified charge.</p>
  """
  getChargesChargeDispute(charge: String!, expand: [String]): Dispute @http(path: "/v1/charges/{{args.charge}}/dispute", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  """
  getChargesChargeRefunds(charge: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type25 @http(path: "/v1/charges/{{args.charge}}/refunds", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing refund.</p>
  """
  getChargesChargeRefundsRefund(charge: String!, expand: [String], refund: String!): Refund @http(path: "/v1/charges/{{args.charge}}/refunds/{{args.refund}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getChargesSearch(expand: [String], limit: Int, page: String, query: String!): Type24 @http(path: "/v1/charges/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Returns a list of Checkout Sessions.</p>
  """
  getCheckoutSessions(created: Type26, customer: String, customer_details: Type27, ending_before: String, expand: [String], limit: Int, payment_intent: String, payment_link: String, starting_after: String, status: String, subscription: String): Type28 @http(path: "/v1/checkout/sessions", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "customer_details", value: "{{args.customer_details}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_intent", value: "{{args.payment_intent}}"}, {key: "payment_link", value: "{{args.payment_link}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "subscription", value: "{{args.subscription}}"}])
  """
  <p>Retrieves a Session object.</p>
  """
  getCheckoutSessionsSession(expand: [String], session: String!): Checkout.session @http(path: "/v1/checkout/sessions/{{args.session}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getCheckoutSessionsSessionLineItems(ending_before: String, expand: [String], limit: Int, session: String!, starting_after: String): Type29 @http(path: "/v1/checkout/sessions/{{args.session}}/line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
most recently created orders appearing first.</p>
  """
  getClimateOrders(ending_before: String, expand: [String], limit: Int, starting_after: String): Type30 @http(path: "/v1/climate/orders", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a Climate order object with the given ID.</p>
  """
  getClimateOrdersOrder(expand: [String], order: String!): Climate.order @http(path: "/v1/climate/orders/{{args.order}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all available Climate product objects.</p>
  """
  getClimateProducts(ending_before: String, expand: [String], limit: Int, starting_after: String): Type31 @http(path: "/v1/climate/products", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a Climate product with the given ID.</p>
  """
  getClimateProductsProduct(expand: [String], product: String!): Climate.product @http(path: "/v1/climate/products/{{args.product}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all available Climate supplier objects.</p>
  """
  getClimateSuppliers(ending_before: String, expand: [String], limit: Int, starting_after: String): Type32 @http(path: "/v1/climate/suppliers", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a Climate supplier object.</p>
  """
  getClimateSuppliersSupplier(expand: [String], supplier: String!): Climate.supplier @http(path: "/v1/climate/suppliers/{{args.supplier}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves an existing ConfirmationToken object</p>
  """
  getConfirmationTokensConfirmationToken(confirmation_token: String!, expand: [String]): ConfirmationToken @http(path: "/v1/confirmation_tokens/{{args.confirmation_token}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all Country Spec objects available in the API.</p>
  """
  getCountrySpecs(ending_before: String, expand: [String], limit: Int, starting_after: String): Type33 @http(path: "/v1/country_specs", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Returns a Country Spec for a given Country code.</p>
  """
  getCountrySpecsCountry(country: String!, expand: [String]): CountrySpec @http(path: "/v1/country_specs/{{args.country}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your coupons.</p>
  """
  getCoupons(created: Type34, ending_before: String, expand: [String], limit: Int, starting_after: String): Type35 @http(path: "/v1/coupons", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the coupon with the given ID.</p>
  """
  getCouponsCoupon(coupon: String!, expand: [String]): Coupon @http(path: "/v1/coupons/{{args.coupon}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of credit notes.</p>
  """
  getCreditNotes(created: Type36, customer: String, ending_before: String, expand: [String], invoice: String, limit: Int, starting_after: String): Type37 @http(path: "/v1/credit_notes", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice", value: "{{args.invoice}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getCreditNotesCreditNoteLines(credit_note: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type43 @http(path: "/v1/credit_notes/{{args.credit_note}}/lines", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the credit note object with the given identifier.</p>
  """
  getCreditNotesId(expand: [String], id: String!): CreditNote @http(path: "/v1/credit_notes/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Get a preview of a credit note without creating it.</p>
  """
  getCreditNotesPreview(amount: Int, credit_amount: Int, effective_at: Int, expand: [String], invoice: String!, lines: [Type38], memo: String, metadata: JSON, out_of_band_amount: Int, reason: String, refund: String, refund_amount: Int, shipping_cost: Type39): CreditNote @http(path: "/v1/credit_notes/preview", query: [{key: "amount", value: "{{args.amount}}"}, {key: "credit_amount", value: "{{args.credit_amount}}"}, {key: "effective_at", value: "{{args.effective_at}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice", value: "{{args.invoice}}"}, {key: "lines", value: "{{args.lines}}"}, {key: "memo", value: "{{args.memo}}"}, {key: "metadata", value: "{{args.metadata}}"}, {key: "out_of_band_amount", value: "{{args.out_of_band_amount}}"}, {key: "reason", value: "{{args.reason}}"}, {key: "refund", value: "{{args.refund}}"}, {key: "refund_amount", value: "{{args.refund_amount}}"}, {key: "shipping_cost", value: "{{args.shipping_cost}}"}])
  """
  <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
  """
  getCreditNotesPreviewLines(amount: Int, credit_amount: Int, effective_at: Int, ending_before: String, expand: [String], invoice: String!, limit: Int, lines: [Type40], memo: String, metadata: JSON, out_of_band_amount: Int, reason: String, refund: String, refund_amount: Int, shipping_cost: Type41, starting_after: String): Type42 @http(path: "/v1/credit_notes/preview/lines", query: [{key: "amount", value: "{{args.amount}}"}, {key: "credit_amount", value: "{{args.credit_amount}}"}, {key: "effective_at", value: "{{args.effective_at}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice", value: "{{args.invoice}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "lines", value: "{{args.lines}}"}, {key: "memo", value: "{{args.memo}}"}, {key: "metadata", value: "{{args.metadata}}"}, {key: "out_of_band_amount", value: "{{args.out_of_band_amount}}"}, {key: "reason", value: "{{args.reason}}"}, {key: "refund", value: "{{args.refund}}"}, {key: "refund_amount", value: "{{args.refund_amount}}"}, {key: "shipping_cost", value: "{{args.shipping_cost}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
  """
  getCustomers(created: Type44, email: String, ending_before: String, expand: [String], limit: Int, starting_after: String, test_clock: String): Type45 @http(path: "/v1/customers", query: [{key: "created", value: "{{args.created}}"}, {key: "email", value: "{{args.email}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "test_clock", value: "{{args.test_clock}}"}])
  """
  <p>Retrieves a Customer object.</p>
  """
  getCustomersCustomer(customer: String!, expand: [String]): Type47 @http(path: "/v1/customers/{{args.customer}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  """
  getCustomersCustomerBalanceTransactions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type48 @http(path: "/v1/customers/{{args.customer}}/balance_transactions", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  """
  getCustomersCustomerBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): CustomerBalanceTransaction @http(path: "/v1/customers/{{args.customer}}/balance_transactions/{{args.transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
  """
  getCustomersCustomerBankAccounts(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type49 @http(path: "/v1/customers/{{args.customer}}/bank_accounts", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
  """
  getCustomersCustomerBankAccountsId(customer: String!, expand: [String], id: String!): BankAccount @http(path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can see a list of the cards belonging to a customer.
Note that the 10 most recent sources are always available on the <code>Customer</code> object.
If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
  """
  getCustomersCustomerCards(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type50 @http(path: "/v1/customers/{{args.customer}}/cards", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
  """
  getCustomersCustomerCardsId(customer: String!, expand: [String], id: String!): Card @http(path: "/v1/customers/{{args.customer}}/cards/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves a customer’s cash balance.</p>
  """
  getCustomersCustomerCashBalance(customer: String!, expand: [String]): CashBalance @http(path: "/v1/customers/{{args.customer}}/cash_balance", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
  """
  getCustomersCustomerCashBalanceTransactions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type51 @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
  """
  getCustomersCustomerCashBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): CustomerCashBalanceTransaction @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions/{{args.transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  
  """
  getCustomersCustomerDiscount(customer: String!, expand: [String]): Discount @http(path: "/v1/customers/{{args.customer}}/discount", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of PaymentMethods for a given Customer</p>
  """
  getCustomersCustomerPaymentMethods(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Type52 @http(path: "/v1/customers/{{args.customer}}/payment_methods", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves a PaymentMethod object for a given Customer.</p>
  """
  getCustomersCustomerPaymentMethodsPaymentMethod(customer: String!, expand: [String], payment_method: String!): PaymentMethod @http(path: "/v1/customers/{{args.customer}}/payment_methods/{{args.payment_method}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List sources for a specified customer.</p>
  """
  getCustomersCustomerSources(customer: String!, ending_before: String, expand: [String], limit: Int, object: String, starting_after: String): Type53 @http(path: "/v1/customers/{{args.customer}}/sources", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "object", value: "{{args.object}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieve a specified source for a given customer.</p>
  """
  getCustomersCustomerSourcesId(customer: String!, expand: [String], id: String!): PaymentSource @http(path: "/v1/customers/{{args.customer}}/sources/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
  """
  getCustomersCustomerSubscriptions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type54 @http(path: "/v1/customers/{{args.customer}}/subscriptions", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the subscription with the given ID.</p>
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedId(customer: String!, expand: [String], subscription_exposed_id: String!): Subscription @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(customer: String!, expand: [String], subscription_exposed_id: String!): Discount @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}/discount", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of tax IDs for a customer.</p>
  """
  getCustomersCustomerTaxIds(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type55 @http(path: "/v1/customers/{{args.customer}}/tax_ids", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
  """
  getCustomersCustomerTaxIdsId(customer: String!, expand: [String], id: String!): TaxId @http(path: "/v1/customers/{{args.customer}}/tax_ids/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getCustomersSearch(expand: [String], limit: Int, page: String, query: String!): Type46 @http(path: "/v1/customers/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Returns a list of your disputes.</p>
  """
  getDisputes(charge: String, created: Type56, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Type57 @http(path: "/v1/disputes", query: [{key: "charge", value: "{{args.charge}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_intent", value: "{{args.payment_intent}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the dispute with the given ID.</p>
  """
  getDisputesDispute(dispute: String!, expand: [String]): Dispute @http(path: "/v1/disputes/{{args.dispute}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
  """
  getEvents(created: Type58, delivery_success: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String, types: [String]): Type59 @http(path: "/v1/events", query: [{key: "created", value: "{{args.created}}"}, {key: "delivery_success", value: "{{args.delivery_success}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}, {key: "types", value: "{{args.types}}"}])
  """
  <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
  """
  getEventsId(expand: [String], id: String!): Event @http(path: "/v1/events/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
  """
  getExchangeRates(ending_before: String, expand: [String], limit: Int, starting_after: String): Type60 @http(path: "/v1/exchange_rates", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
  """
  getExchangeRatesRateId(expand: [String], rate_id: String!): ExchangeRate @http(path: "/v1/exchange_rates/{{args.rate_id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of file links.</p>
  """
  getFileLinks(created: Type61, ending_before: String, expand: [String], expired: Boolean, file: String, limit: Int, starting_after: String): Type62 @http(path: "/v1/file_links", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "expired", value: "{{args.expired}}"}, {key: "file", value: "{{args.file}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the file link with the given ID.</p>
  """
  getFileLinksLink(expand: [String], link: String!): FileLink @http(path: "/v1/file_links/{{args.link}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
  """
  getFiles(created: Type63, ending_before: String, expand: [String], limit: Int, purpose: String, starting_after: String): Type64 @http(path: "/v1/files", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "purpose", value: "{{args.purpose}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
  """
  getFilesFile(expand: [String], file: String!): File @http(path: "/v1/files/{{args.file}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
  """
  getFinancialConnectionsAccounts(account_holder: Type65, ending_before: String, expand: [String], limit: Int, session: String, starting_after: String): Type66 @http(path: "/v1/financial_connections/accounts", query: [{key: "account_holder", value: "{{args.account_holder}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "session", value: "{{args.session}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
  """
  getFinancialConnectionsAccountsAccount(account: String!, expand: [String]): FinancialConnections.account @http(path: "/v1/financial_connections/accounts/{{args.account}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all owners for a given <code>Account</code></p>
  """
  getFinancialConnectionsAccountsAccountOwners(account: String!, ending_before: String, expand: [String], limit: Int, ownership: String!, starting_after: String): Type67 @http(path: "/v1/financial_connections/accounts/{{args.account}}/owners", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "ownership", value: "{{args.ownership}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a Financial Connections <code>Session</code></p>
  """
  getFinancialConnectionsSessionsSession(expand: [String], session: String!): FinancialConnections.session @http(path: "/v1/financial_connections/sessions/{{args.session}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
  """
  getFinancialConnectionsTransactions(account: String!, ending_before: String, expand: [String], limit: Int, starting_after: String, transacted_at: Type68, transaction_refresh: Type69): Type70 @http(path: "/v1/financial_connections/transactions", query: [{key: "account", value: "{{args.account}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "transacted_at", value: "{{args.transacted_at}}"}, {key: "transaction_refresh", value: "{{args.transaction_refresh}}"}])
  """
  <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
  """
  getFinancialConnectionsTransactionsTransaction(expand: [String], transaction: String!): FinancialConnections.transaction @http(path: "/v1/financial_connections/transactions/{{args.transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all ForwardingRequest objects.</p>
  """
  getForwardingRequests(created: Type71, ending_before: String, expand: [String], limit: Int, starting_after: String): Type72 @http(path: "/v1/forwarding/requests", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a ForwardingRequest object.</p>
  """
  getForwardingRequestsId(expand: [String], id: String!): Forwarding.request @http(path: "/v1/forwarding/requests/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List all verification reports.</p>
  """
  getIdentityVerificationReports(client_reference_id: String, created: Type73, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String, verification_session: String): Type74 @http(path: "/v1/identity/verification_reports", query: [{key: "client_reference_id", value: "{{args.client_reference_id}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}, {key: "verification_session", value: "{{args.verification_session}}"}])
  """
  <p>Retrieves an existing VerificationReport</p>
  """
  getIdentityVerificationReportsReport(expand: [String], report: String!): Identity.verificationReport @http(path: "/v1/identity/verification_reports/{{args.report}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of VerificationSessions</p>
  """
  getIdentityVerificationSessions(client_reference_id: String, created: Type75, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type76 @http(path: "/v1/identity/verification_sessions", query: [{key: "client_reference_id", value: "{{args.client_reference_id}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of a VerificationSession that was previously created.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
<code>client_secret</code> or <code>url</code> to allow re-submission.</p>
  """
  getIdentityVerificationSessionsSession(expand: [String], session: String!): Identity.verificationSession @http(path: "/v1/identity/verification_sessions/{{args.session}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
  """
  getInvoiceitems(created: Type77, customer: String, ending_before: String, expand: [String], invoice: String, limit: Int, pending: Boolean, starting_after: String): Type78 @http(path: "/v1/invoiceitems", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice", value: "{{args.invoice}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "pending", value: "{{args.pending}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the invoice item with the given ID.</p>
  """
  getInvoiceitemsInvoiceitem(expand: [String], invoiceitem: String!): Invoiceitem @http(path: "/v1/invoiceitems/{{args.invoiceitem}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
  """
  getInvoices(collection_method: String, created: Type79, customer: String, due_date: Type80, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, subscription: String): Type81 @http(path: "/v1/invoices", query: [{key: "collection_method", value: "{{args.collection_method}}"}, {key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "due_date", value: "{{args.due_date}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "subscription", value: "{{args.subscription}}"}])
  """
  <p>Retrieves the invoice with the given ID.</p>
  """
  getInvoicesInvoice(expand: [String], invoice: String!): Invoice @http(path: "/v1/invoices/{{args.invoice}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getInvoicesInvoiceLines(ending_before: String, expand: [String], invoice: String!, limit: Int, starting_after: String): Type106 @http(path: "/v1/invoices/{{args.invoice}}/lines", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getInvoicesSearch(expand: [String], limit: Int, page: String, query: String!): Type82 @http(path: "/v1/invoices/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
  """
  getInvoicesUpcoming(automatic_tax: Type83, coupon: String, currency: String, customer: String, customer_details: Type84, discounts: Type85, expand: [String], invoice_items: [Type86], issuer: Type87, on_behalf_of: Type88, schedule: String, subscription: String, subscription_billing_cycle_anchor: Type89, subscription_cancel_at: Type90, subscription_cancel_at_period_end: Boolean, subscription_cancel_now: Boolean, subscription_default_tax_rates: Type91, subscription_items: [Type92], subscription_proration_behavior: String, subscription_proration_date: Int, subscription_resume_at: String, subscription_start_date: Int, subscription_trial_end: Type93, subscription_trial_from_plan: Boolean): Invoice @http(path: "/v1/invoices/upcoming", query: [{key: "automatic_tax", value: "{{args.automatic_tax}}"}, {key: "coupon", value: "{{args.coupon}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "customer_details", value: "{{args.customer_details}}"}, {key: "discounts", value: "{{args.discounts}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice_items", value: "{{args.invoice_items}}"}, {key: "issuer", value: "{{args.issuer}}"}, {key: "on_behalf_of", value: "{{args.on_behalf_of}}"}, {key: "schedule", value: "{{args.schedule}}"}, {key: "subscription", value: "{{args.subscription}}"}, {key: "subscription_billing_cycle_anchor", value: "{{args.subscription_billing_cycle_anchor}}"}, {key: "subscription_cancel_at", value: "{{args.subscription_cancel_at}}"}, {key: "subscription_cancel_at_period_end", value: "{{args.subscription_cancel_at_period_end}}"}, {key: "subscription_cancel_now", value: "{{args.subscription_cancel_now}}"}, {key: "subscription_default_tax_rates", value: "{{args.subscription_default_tax_rates}}"}, {key: "subscription_items", value: "{{args.subscription_items}}"}, {key: "subscription_proration_behavior", value: "{{args.subscription_proration_behavior}}"}, {key: "subscription_proration_date", value: "{{args.subscription_proration_date}}"}, {key: "subscription_resume_at", value: "{{args.subscription_resume_at}}"}, {key: "subscription_start_date", value: "{{args.subscription_start_date}}"}, {key: "subscription_trial_end", value: "{{args.subscription_trial_end}}"}, {key: "subscription_trial_from_plan", value: "{{args.subscription_trial_from_plan}}"}])
  """
  <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getInvoicesUpcomingLines(automatic_tax: Type94, coupon: String, currency: String, customer: String, customer_details: Type95, discounts: Type96, ending_before: String, expand: [String], invoice_items: [Type97], issuer: Type98, limit: Int, on_behalf_of: Type99, schedule: String, starting_after: String, subscription: String, subscription_billing_cycle_anchor: Type100, subscription_cancel_at: Type101, subscription_cancel_at_period_end: Boolean, subscription_cancel_now: Boolean, subscription_default_tax_rates: Type102, subscription_items: [Type103], subscription_proration_behavior: String, subscription_proration_date: Int, subscription_resume_at: String, subscription_start_date: Int, subscription_trial_end: Type104, subscription_trial_from_plan: Boolean): Type105 @http(path: "/v1/invoices/upcoming/lines", query: [{key: "automatic_tax", value: "{{args.automatic_tax}}"}, {key: "coupon", value: "{{args.coupon}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "customer_details", value: "{{args.customer_details}}"}, {key: "discounts", value: "{{args.discounts}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "invoice_items", value: "{{args.invoice_items}}"}, {key: "issuer", value: "{{args.issuer}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "on_behalf_of", value: "{{args.on_behalf_of}}"}, {key: "schedule", value: "{{args.schedule}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "subscription", value: "{{args.subscription}}"}, {key: "subscription_billing_cycle_anchor", value: "{{args.subscription_billing_cycle_anchor}}"}, {key: "subscription_cancel_at", value: "{{args.subscription_cancel_at}}"}, {key: "subscription_cancel_at_period_end", value: "{{args.subscription_cancel_at_period_end}}"}, {key: "subscription_cancel_now", value: "{{args.subscription_cancel_now}}"}, {key: "subscription_default_tax_rates", value: "{{args.subscription_default_tax_rates}}"}, {key: "subscription_items", value: "{{args.subscription_items}}"}, {key: "subscription_proration_behavior", value: "{{args.subscription_proration_behavior}}"}, {key: "subscription_proration_date", value: "{{args.subscription_proration_date}}"}, {key: "subscription_resume_at", value: "{{args.subscription_resume_at}}"}, {key: "subscription_start_date", value: "{{args.subscription_start_date}}"}, {key: "subscription_trial_end", value: "{{args.subscription_trial_end}}"}, {key: "subscription_trial_from_plan", value: "{{args.subscription_trial_from_plan}}"}])
  """
  <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingAuthorizations(card: String, cardholder: String, created: Type107, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type108 @http(path: "/v1/issuing/authorizations", query: [{key: "card", value: "{{args.card}}"}, {key: "cardholder", value: "{{args.cardholder}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves an Issuing <code>Authorization</code> object.</p>
  """
  getIssuingAuthorizationsAuthorization(authorization: String!, expand: [String]): Issuing.authorization @http(path: "/v1/issuing/authorizations/{{args.authorization}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingCardholders(created: Type109, email: String, ending_before: String, expand: [String], limit: Int, phone_number: String, starting_after: String, status: String, type: String): Type110 @http(path: "/v1/issuing/cardholders", query: [{key: "created", value: "{{args.created}}"}, {key: "email", value: "{{args.email}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "phone_number", value: "{{args.phone_number}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
  """
  getIssuingCardholdersCardholder(cardholder: String!, expand: [String]): Issuing.cardholder @http(path: "/v1/issuing/cardholders/{{args.cardholder}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingCards(cardholder: String, created: Type111, ending_before: String, exp_month: Int, exp_year: Int, expand: [String], last4: String, limit: Int, personalization_design: String, starting_after: String, status: String, type: String): Type112 @http(path: "/v1/issuing/cards", query: [{key: "cardholder", value: "{{args.cardholder}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "exp_month", value: "{{args.exp_month}}"}, {key: "exp_year", value: "{{args.exp_year}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "last4", value: "{{args.last4}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "personalization_design", value: "{{args.personalization_design}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves an Issuing <code>Card</code> object.</p>
  """
  getIssuingCardsCard(card: String!, expand: [String]): Issuing.card @http(path: "/v1/issuing/cards/{{args.card}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingDisputes(created: Type113, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, transaction: String): Type114 @http(path: "/v1/issuing/disputes", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "transaction", value: "{{args.transaction}}"}])
  """
  <p>Retrieves an Issuing <code>Dispute</code> object.</p>
  """
  getIssuingDisputesDispute(dispute: String!, expand: [String]): Issuing.dispute @http(path: "/v1/issuing/disputes/{{args.dispute}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingPersonalizationDesigns(ending_before: String, expand: [String], limit: Int, lookup_keys: [String], preferences: Type115, starting_after: String, status: String): Type116 @http(path: "/v1/issuing/personalization_designs", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "lookup_keys", value: "{{args.lookup_keys}}"}, {key: "preferences", value: "{{args.preferences}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves a personalization design object.</p>
  """
  getIssuingPersonalizationDesignsPersonalizationDesign(expand: [String], personalization_design: String!): Issuing.personalizationDesign @http(path: "/v1/issuing/personalization_designs/{{args.personalization_design}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingPhysicalBundles(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, type: String): Type117 @http(path: "/v1/issuing/physical_bundles", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves a physical bundle object.</p>
  """
  getIssuingPhysicalBundlesPhysicalBundle(expand: [String], physical_bundle: String!): Issuing.physicalBundle @http(path: "/v1/issuing/physical_bundles/{{args.physical_bundle}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingSettlements(created: Type118, ending_before: String, expand: [String], limit: Int, starting_after: String): Type119 @http(path: "/v1/issuing/settlements", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves an Issuing <code>Settlement</code> object.</p>
  """
  getIssuingSettlementsSettlement(expand: [String], settlement: String!): Issuing.settlement @http(path: "/v1/issuing/settlements/{{args.settlement}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
  """
  getIssuingTokens(card: String!, created: Type120, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type121 @http(path: "/v1/issuing/tokens", query: [{key: "card", value: "{{args.card}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves an Issuing <code>Token</code> object.</p>
  """
  getIssuingTokensToken(expand: [String], token: String!): Issuing.token @http(path: "/v1/issuing/tokens/{{args.token}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingTransactions(card: String, cardholder: String, created: Type122, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Type123 @http(path: "/v1/issuing/transactions", query: [{key: "card", value: "{{args.card}}"}, {key: "cardholder", value: "{{args.cardholder}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves an Issuing <code>Transaction</code> object.</p>
  """
  getIssuingTransactionsTransaction(expand: [String], transaction: String!): Issuing.transaction @http(path: "/v1/issuing/transactions/{{args.transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the details of a Financial Connections <code>Session</code></p>
  """
  getLinkAccountSessionsSession(expand: [String], session: String!): FinancialConnections.session @http(path: "/v1/link_account_sessions/{{args.session}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
  """
  getLinkedAccounts(account_holder: Type124, ending_before: String, expand: [String], limit: Int, session: String, starting_after: String): Type125 @http(path: "/v1/linked_accounts", query: [{key: "account_holder", value: "{{args.account_holder}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "session", value: "{{args.session}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
  """
  getLinkedAccountsAccount(account: String!, expand: [String]): FinancialConnections.account @http(path: "/v1/linked_accounts/{{args.account}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists all owners for a given <code>Account</code></p>
  """
  getLinkedAccountsAccountOwners(account: String!, ending_before: String, expand: [String], limit: Int, ownership: String!, starting_after: String): Type126 @http(path: "/v1/linked_accounts/{{args.account}}/owners", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "ownership", value: "{{args.ownership}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a Mandate object.</p>
  """
  getMandatesMandate(expand: [String], mandate: String!): Mandate @http(path: "/v1/mandates/{{args.mandate}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of PaymentIntents.</p>
  """
  getPaymentIntents(created: Type127, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Type128 @http(path: "/v1/payment_intents", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a PaymentIntent that has previously been created. </p>

<p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>

<p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
  """
  getPaymentIntentsIntent(client_secret: String, expand: [String], intent: String!): PaymentIntent @http(path: "/v1/payment_intents/{{args.intent}}", query: [{key: "client_secret", value: "{{args.client_secret}}"}, {key: "expand", value: "{{args.expand}}"}])
  """
  <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getPaymentIntentsSearch(expand: [String], limit: Int, page: String, query: String!): Type129 @http(path: "/v1/payment_intents/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Returns a list of your payment links.</p>
  """
  getPaymentLinks(active: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String): Type130 @http(path: "/v1/payment_links", query: [{key: "active", value: "{{args.active}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieve a payment link.</p>
  """
  getPaymentLinksPaymentLink(expand: [String], payment_link: String!): PaymentLink @http(path: "/v1/payment_links/{{args.payment_link}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getPaymentLinksPaymentLinkLineItems(ending_before: String, expand: [String], limit: Int, payment_link: String!, starting_after: String): Type131 @http(path: "/v1/payment_links/{{args.payment_link}}/line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>List payment method configurations</p>
  """
  getPaymentMethodConfigurations(application: Type132, expand: [String]): Type133 @http(path: "/v1/payment_method_configurations", query: [{key: "application", value: "{{args.application}}"}, {key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieve payment method configuration</p>
  """
  getPaymentMethodConfigurationsConfiguration(configuration: String!, expand: [String]): PaymentMethodConfiguration @http(path: "/v1/payment_method_configurations/{{args.configuration}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Lists the details of existing payment method domains.</p>
  """
  getPaymentMethodDomains(domain_name: String, enabled: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String): Type134 @http(path: "/v1/payment_method_domains", query: [{key: "domain_name", value: "{{args.domain_name}}"}, {key: "enabled", value: "{{args.enabled}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing payment method domain.</p>
  """
  getPaymentMethodDomainsPaymentMethodDomain(expand: [String], payment_method_domain: String!): PaymentMethodDomain @http(path: "/v1/payment_method_domains/{{args.payment_method_domain}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
  """
  getPaymentMethods(customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Type135 @http(path: "/v1/payment_methods", query: [{key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
  """
  getPaymentMethodsPaymentMethod(expand: [String], payment_method: String!): PaymentMethod @http(path: "/v1/payment_methods/{{args.payment_method}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
  """
  getPayouts(arrival_date: Type136, created: Type137, destination: String, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type138 @http(path: "/v1/payouts", query: [{key: "arrival_date", value: "{{args.arrival_date}}"}, {key: "created", value: "{{args.created}}"}, {key: "destination", value: "{{args.destination}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
  """
  getPayoutsPayout(expand: [String], payout: String!): Payout @http(path: "/v1/payouts/{{args.payout}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your plans.</p>
  """
  getPlans(active: Boolean, created: Type139, ending_before: String, expand: [String], limit: Int, product: String, starting_after: String): Type140 @http(path: "/v1/plans", query: [{key: "active", value: "{{args.active}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "product", value: "{{args.product}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the plan with the given ID.</p>
  """
  getPlansPlan(expand: [String], plan: String!): Plan @http(path: "/v1/plans/{{args.plan}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
  """
  getPrices(active: Boolean, created: Type141, currency: String, ending_before: String, expand: [String], limit: Int, lookup_keys: [String], product: String, recurring: Type142, starting_after: String, type: String): Type143 @http(path: "/v1/prices", query: [{key: "active", value: "{{args.active}}"}, {key: "created", value: "{{args.created}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "lookup_keys", value: "{{args.lookup_keys}}"}, {key: "product", value: "{{args.product}}"}, {key: "recurring", value: "{{args.recurring}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "type", value: "{{args.type}}"}])
  """
  <p>Retrieves the price with the given ID.</p>
  """
  getPricesPrice(expand: [String], price: String!): Price @http(path: "/v1/prices/{{args.price}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getPricesSearch(expand: [String], limit: Int, page: String, query: String!): Type144 @http(path: "/v1/prices/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  getProducts(active: Boolean, created: Type145, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Type146 @http(path: "/v1/products", query: [{key: "active", value: "{{args.active}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "ids", value: "{{args.ids}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "shippable", value: "{{args.shippable}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "url", value: "{{args.url}}"}])
  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  getProductsId(expand: [String], id: String!): Product @http(path: "/v1/products/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getProductsSearch(expand: [String], limit: Int, page: String, query: String!): Type147 @http(path: "/v1/products/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Returns a list of your promotion codes.</p>
  """
  getPromotionCodes(active: Boolean, code: String, coupon: String, created: Type148, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Type149 @http(path: "/v1/promotion_codes", query: [{key: "active", value: "{{args.active}}"}, {key: "code", value: "{{args.code}}"}, {key: "coupon", value: "{{args.coupon}}"}, {key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
  """
  getPromotionCodesPromotionCode(expand: [String], promotion_code: String!): PromotionCode @http(path: "/v1/promotion_codes/{{args.promotion_code}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your quotes.</p>
  """
  getQuotes(customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, test_clock: String): Type150 @http(path: "/v1/quotes", query: [{key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "test_clock", value: "{{args.test_clock}}"}])
  """
  <p>Retrieves the quote with the given ID.</p>
  """
  getQuotesQuote(expand: [String], quote: String!): Quote @http(path: "/v1/quotes/{{args.quote}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
  """
  getQuotesQuoteComputedUpfrontLineItems(ending_before: String, expand: [String], limit: Int, quote: String!, starting_after: String): Type151 @http(path: "/v1/quotes/{{args.quote}}/computed_upfront_line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getQuotesQuoteLineItems(ending_before: String, expand: [String], limit: Int, quote: String!, starting_after: String): Type152 @http(path: "/v1/quotes/{{args.quote}}/line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
  """
  getQuotesQuotePdf(expand: [String], quote: String!): String @http(path: "/v1/quotes/{{args.quote}}/pdf", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of early fraud warnings.</p>
  """
  getRadarEarlyFraudWarnings(charge: String, created: Type153, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Type154 @http(path: "/v1/radar/early_fraud_warnings", query: [{key: "charge", value: "{{args.charge}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_intent", value: "{{args.payment_intent}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an early fraud warning that has previously been created. </p>

<p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
  """
  getRadarEarlyFraudWarningsEarlyFraudWarning(early_fraud_warning: String!, expand: [String]): Radar.earlyFraudWarning @http(path: "/v1/radar/early_fraud_warnings/{{args.early_fraud_warning}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getRadarValueListItems(created: Type155, ending_before: String, expand: [String], limit: Int, starting_after: String, value: String, value_list: String!): Type156 @http(path: "/v1/radar/value_list_items", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "value", value: "{{args.value}}"}, {key: "value_list", value: "{{args.value_list}}"}])
  """
  <p>Retrieves a <code>ValueListItem</code> object.</p>
  """
  getRadarValueListItemsItem(expand: [String], item: String!): Radar.valueListItem @http(path: "/v1/radar/value_list_items/{{args.item}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getRadarValueLists(alias: String, contains: String, created: Type157, ending_before: String, expand: [String], limit: Int, starting_after: String): Type158 @http(path: "/v1/radar/value_lists", query: [{key: "alias", value: "{{args.alias}}"}, {key: "contains", value: "{{args.contains}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a <code>ValueList</code> object.</p>
  """
  getRadarValueListsValueList(expand: [String], value_list: String!): Radar.valueList @http(path: "/v1/radar/value_lists/{{args.value_list}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
  """
  getRefunds(charge: String, created: Type159, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Type160 @http(path: "/v1/refunds", query: [{key: "charge", value: "{{args.charge}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_intent", value: "{{args.payment_intent}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing refund.</p>
  """
  getRefundsRefund(expand: [String], refund: String!): Refund @http(path: "/v1/refunds/{{args.refund}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Report Runs, with the most recent appearing first.</p>
  """
  getReportingReportRuns(created: Type161, ending_before: String, expand: [String], limit: Int, starting_after: String): Type162 @http(path: "/v1/reporting/report_runs", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing Report Run.</p>
  """
  getReportingReportRunsReportRun(expand: [String], report_run: String!): Reporting.reportRun @http(path: "/v1/reporting/report_runs/{{args.report_run}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a full list of Report Types.</p>
  """
  getReportingReportTypes(expand: [String]): Type163 @http(path: "/v1/reporting/report_types", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
  """
  getReportingReportTypesReportType(expand: [String], report_type: String!): Reporting.reportType @http(path: "/v1/reporting/report_types/{{args.report_type}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getReviews(created: Type164, ending_before: String, expand: [String], limit: Int, starting_after: String): Type165 @http(path: "/v1/reviews", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a <code>Review</code> object.</p>
  """
  getReviewsReview(expand: [String], review: String!): Review @http(path: "/v1/reviews/{{args.review}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
  """
  getSetupAttempts(created: Type166, ending_before: String, expand: [String], limit: Int, setup_intent: String!, starting_after: String): Type167 @http(path: "/v1/setup_attempts", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "setup_intent", value: "{{args.setup_intent}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Returns a list of SetupIntents.</p>
  """
  getSetupIntents(attach_to_self: Boolean, created: Type168, customer: String, ending_before: String, expand: [String], limit: Int, payment_method: String, starting_after: String): Type169 @http(path: "/v1/setup_intents", query: [{key: "attach_to_self", value: "{{args.attach_to_self}}"}, {key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "payment_method", value: "{{args.payment_method}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a SetupIntent that has previously been created. </p>

<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>

<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
  """
  getSetupIntentsIntent(client_secret: String, expand: [String], intent: String!): SetupIntent @http(path: "/v1/setup_intents/{{args.intent}}", query: [{key: "client_secret", value: "{{args.client_secret}}"}, {key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your shipping rates.</p>
  """
  getShippingRates(active: Boolean, created: Type170, currency: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Type171 @http(path: "/v1/shipping_rates", query: [{key: "active", value: "{{args.active}}"}, {key: "created", value: "{{args.created}}"}, {key: "currency", value: "{{args.currency}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Returns the shipping rate object with the given ID.</p>
  """
  getShippingRatesShippingRateToken(expand: [String], shipping_rate_token: String!): ShippingRate @http(path: "/v1/shipping_rates/{{args.shipping_rate_token}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of scheduled query runs.</p>
  """
  getSigmaScheduledQueryRuns(ending_before: String, expand: [String], limit: Int, starting_after: String): Type172 @http(path: "/v1/sigma/scheduled_query_runs", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an scheduled query run.</p>
  """
  getSigmaScheduledQueryRunsScheduledQueryRun(expand: [String], scheduled_query_run: String!): ScheduledQueryRun @http(path: "/v1/sigma/scheduled_query_runs/{{args.scheduled_query_run}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
  """
  getSourcesSource(client_secret: String, expand: [String], source: String!): Source @http(path: "/v1/sources/{{args.source}}", query: [{key: "client_secret", value: "{{args.client_secret}}"}, {key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves a new Source MandateNotification.</p>
  """
  getSourcesSourceMandateNotificationsMandateNotification(expand: [String], mandate_notification: String!, source: String!): SourceMandateNotification @http(path: "/v1/sources/{{args.source}}/mandate_notifications/{{args.mandate_notification}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>List source transactions for a given source.</p>
  """
  getSourcesSourceSourceTransactions(ending_before: String, expand: [String], limit: Int, source: String!, starting_after: String): Type173 @http(path: "/v1/sources/{{args.source}}/source_transactions", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
  """
  getSourcesSourceSourceTransactionsSourceTransaction(expand: [String], source: String!, source_transaction: String!): SourceTransaction @http(path: "/v1/sources/{{args.source}}/source_transactions/{{args.source_transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your subscription items for a given subscription.</p>
  """
  getSubscriptionItems(ending_before: String, expand: [String], limit: Int, starting_after: String, subscription: String!): Type174 @http(path: "/v1/subscription_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "subscription", value: "{{args.subscription}}"}])
  """
  <p>Retrieves the subscription item with the given ID.</p>
  """
  getSubscriptionItemsItem(expand: [String], item: String!): SubscriptionItem @http(path: "/v1/subscription_items/{{args.item}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>

<p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
  """
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries(ending_before: String, expand: [String], limit: Int, starting_after: String, subscription_item: String!): Type175 @http(path: "/v1/subscription_items/{{args.subscription_item}}/usage_record_summaries", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the list of your subscription schedules.</p>
  """
  getSubscriptionSchedules(canceled_at: Type176, completed_at: Type177, created: Type178, customer: String, ending_before: String, expand: [String], limit: Int, released_at: Type179, scheduled: Boolean, starting_after: String): Type180 @http(path: "/v1/subscription_schedules", query: [{key: "canceled_at", value: "{{args.canceled_at}}"}, {key: "completed_at", value: "{{args.completed_at}}"}, {key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "released_at", value: "{{args.released_at}}"}, {key: "scheduled", value: "{{args.scheduled}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
  """
  getSubscriptionSchedulesSchedule(expand: [String], schedule: String!): SubscriptionSchedule @http(path: "/v1/subscription_schedules/{{args.schedule}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
  """
  getSubscriptions(automatic_tax: Type181, collection_method: String, created: Type182, current_period_end: Type183, current_period_start: Type184, customer: String, ending_before: String, expand: [String], limit: Int, price: String, starting_after: String, status: String, test_clock: String): Type185 @http(path: "/v1/subscriptions", query: [{key: "automatic_tax", value: "{{args.automatic_tax}}"}, {key: "collection_method", value: "{{args.collection_method}}"}, {key: "created", value: "{{args.created}}"}, {key: "current_period_end", value: "{{args.current_period_end}}"}, {key: "current_period_start", value: "{{args.current_period_start}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "price", value: "{{args.price}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "test_clock", value: "{{args.test_clock}}"}])
  """
  <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getSubscriptionsSearch(expand: [String], limit: Int, page: String, query: String!): Type186 @http(path: "/v1/subscriptions/search", query: [{key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "page", value: "{{args.page}}"}, {key: "query", value: "{{args.query}}"}])
  """
  <p>Retrieves the subscription with the given ID.</p>
  """
  getSubscriptionsSubscriptionExposedId(expand: [String], subscription_exposed_id: String!): Subscription @http(path: "/v1/subscriptions/{{args.subscription_exposed_id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
  """
  getTaxCalculationsCalculationLineItems(calculation: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Type187 @http(path: "/v1/tax/calculations/{{args.calculation}}/line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
  """
  getTaxCodes(ending_before: String, expand: [String], limit: Int, starting_after: String): Type190 @http(path: "/v1/tax_codes", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
  """
  getTaxCodesId(expand: [String], id: String!): TaxCode @http(path: "/v1/tax_codes/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of tax IDs.</p>
  """
  getTaxIds(ending_before: String, expand: [String], limit: Int, owner: Type191, starting_after: String): Type192 @http(path: "/v1/tax_ids", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "owner", value: "{{args.owner}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves an account or customer <code>tax_id</code> object.</p>
  """
  getTaxIdsId(expand: [String], id: String!): TaxId @http(path: "/v1/tax_ids/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
  """
  getTaxRates(active: Boolean, created: Type193, ending_before: String, expand: [String], inclusive: Boolean, limit: Int, starting_after: String): Type194 @http(path: "/v1/tax_rates", query: [{key: "active", value: "{{args.active}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "inclusive", value: "{{args.inclusive}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a tax rate with the given ID</p>
  """
  getTaxRatesTaxRate(expand: [String], tax_rate: String!): TaxRate @http(path: "/v1/tax_rates/{{args.tax_rate}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of Tax <code>Registration</code> objects.</p>
  """
  getTaxRegistrations(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type188 @http(path: "/v1/tax/registrations", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Returns a Tax <code>Registration</code> object.</p>
  """
  getTaxRegistrationsId(expand: [String], id: String!): Tax.registration @http(path: "/v1/tax/registrations/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
  """
  getTaxSettings(expand: [String]): Tax.settings @http(path: "/v1/tax/settings", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves a Tax <code>Transaction</code> object.</p>
  """
  getTaxTransactionsTransaction(expand: [String], transaction: String!): Tax.transaction @http(path: "/v1/tax/transactions/{{args.transaction}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
  """
  getTaxTransactionsTransactionLineItems(ending_before: String, expand: [String], limit: Int, starting_after: String, transaction: String!): Type189 @http(path: "/v1/tax/transactions/{{args.transaction}}/line_items", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Returns a list of <code>Configuration</code> objects.</p>
  """
  getTerminalConfigurations(ending_before: String, expand: [String], is_account_default: Boolean, limit: Int, starting_after: String): Type195 @http(path: "/v1/terminal/configurations", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "is_account_default", value: "{{args.is_account_default}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a <code>Configuration</code> object.</p>
  """
  getTerminalConfigurationsConfiguration(configuration: String!, expand: [String]): Type196 @http(path: "/v1/terminal/configurations/{{args.configuration}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of <code>Location</code> objects.</p>
  """
  getTerminalLocations(ending_before: String, expand: [String], limit: Int, starting_after: String): Type197 @http(path: "/v1/terminal/locations", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a <code>Location</code> object.</p>
  """
  getTerminalLocationsLocation(expand: [String], location: String!): Type198 @http(path: "/v1/terminal/locations/{{args.location}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of <code>Reader</code> objects.</p>
  """
  getTerminalReaders(device_type: String, ending_before: String, expand: [String], limit: Int, location: String, serial_number: String, starting_after: String, status: String): Type199 @http(path: "/v1/terminal/readers", query: [{key: "device_type", value: "{{args.device_type}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "location", value: "{{args.location}}"}, {key: "serial_number", value: "{{args.serial_number}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves a <code>Reader</code> object.</p>
  """
  getTerminalReadersReader(expand: [String], reader: String!): Type200 @http(path: "/v1/terminal/readers/{{args.reader}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your test clocks.</p>
  """
  getTestHelpersTestClocks(ending_before: String, expand: [String], limit: Int, starting_after: String): Type201 @http(path: "/v1/test_helpers/test_clocks", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves a test clock.</p>
  """
  getTestHelpersTestClocksTestClock(expand: [String], test_clock: String!): TestHelpers.testClock @http(path: "/v1/test_helpers/test_clocks/{{args.test_clock}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves the token with the given ID.</p>
  """
  getTokensToken(expand: [String], token: String!): Token @http(path: "/v1/tokens/{{args.token}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of top-ups.</p>
  """
  getTopups(amount: Type202, created: Type203, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Type204 @http(path: "/v1/topups", query: [{key: "amount", value: "{{args.amount}}"}, {key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
  """
  getTopupsTopup(expand: [String], topup: String!): Topup @http(path: "/v1/topups/{{args.topup}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
  """
  getTransfers(created: Type205, destination: String, ending_before: String, expand: [String], limit: Int, starting_after: String, transfer_group: String): Type206 @http(path: "/v1/transfers", query: [{key: "created", value: "{{args.created}}"}, {key: "destination", value: "{{args.destination}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "transfer_group", value: "{{args.transfer_group}}"}])
  """
  <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
  """
  getTransfersIdReversals(ending_before: String, expand: [String], id: String!, limit: Int, starting_after: String): Type207 @http(path: "/v1/transfers/{{args.id}}/reversals", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
  """
  getTransfersTransfer(expand: [String], transfer: String!): Transfer @http(path: "/v1/transfers/{{args.transfer}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
  """
  getTransfersTransferReversalsId(expand: [String], id: String!, transfer: String!): TransferReversal @http(path: "/v1/transfers/{{args.transfer}}/reversals/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of CreditReversals.</p>
  """
  getTreasuryCreditReversals(ending_before: String, expand: [String], financial_account: String!, limit: Int, received_credit: String, starting_after: String, status: String): Type208 @http(path: "/v1/treasury/credit_reversals", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "received_credit", value: "{{args.received_credit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
  """
  getTreasuryCreditReversalsCreditReversal(credit_reversal: String!, expand: [String]): Treasury.creditReversal @http(path: "/v1/treasury/credit_reversals/{{args.credit_reversal}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of DebitReversals.</p>
  """
  getTreasuryDebitReversals(ending_before: String, expand: [String], financial_account: String!, limit: Int, received_debit: String, resolution: String, starting_after: String, status: String): Type209 @http(path: "/v1/treasury/debit_reversals", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "received_debit", value: "{{args.received_debit}}"}, {key: "resolution", value: "{{args.resolution}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves a DebitReversal object.</p>
  """
  getTreasuryDebitReversalsDebitReversal(debit_reversal: String!, expand: [String]): Treasury.debitReversal @http(path: "/v1/treasury/debit_reversals/{{args.debit_reversal}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of FinancialAccounts.</p>
  """
  getTreasuryFinancialAccounts(created: Type210, ending_before: String, expand: [String], limit: Int, starting_after: String): Type211 @http(path: "/v1/treasury/financial_accounts", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the details of a FinancialAccount.</p>
  """
  getTreasuryFinancialAccountsFinancialAccount(expand: [String], financial_account: String!): Treasury.financialAccount @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves Features information associated with the FinancialAccount.</p>
  """
  getTreasuryFinancialAccountsFinancialAccountFeatures(expand: [String], financial_account: String!): Treasury.financialAccountFeatures @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}/features", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
  """
  getTreasuryInboundTransfers(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Type212 @http(path: "/v1/treasury/inbound_transfers", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing InboundTransfer.</p>
  """
  getTreasuryInboundTransfersId(expand: [String], id: String!): Treasury.inboundTransfer @http(path: "/v1/treasury/inbound_transfers/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
  """
  getTreasuryOutboundPayments(created: Type213, customer: String, ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Type214 @http(path: "/v1/treasury/outbound_payments", query: [{key: "created", value: "{{args.created}}"}, {key: "customer", value: "{{args.customer}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
  """
  getTreasuryOutboundPaymentsId(expand: [String], id: String!): Treasury.outboundPayment @http(path: "/v1/treasury/outbound_payments/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
  """
  getTreasuryOutboundTransfers(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Type215 @http(path: "/v1/treasury/outbound_transfers", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
  """
  getTreasuryOutboundTransfersOutboundTransfer(expand: [String], outbound_transfer: String!): Treasury.outboundTransfer @http(path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of ReceivedCredits.</p>
  """
  getTreasuryReceivedCredits(ending_before: String, expand: [String], financial_account: String!, limit: Int, linked_flows: Type216, starting_after: String, status: String): Type217 @http(path: "/v1/treasury/received_credits", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "linked_flows", value: "{{args.linked_flows}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
  """
  getTreasuryReceivedCreditsId(expand: [String], id: String!): Treasury.receivedCredit @http(path: "/v1/treasury/received_credits/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of ReceivedDebits.</p>
  """
  getTreasuryReceivedDebits(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Type218 @http(path: "/v1/treasury/received_debits", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}])
  """
  <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
  """
  getTreasuryReceivedDebitsId(expand: [String], id: String!): Treasury.receivedDebit @http(path: "/v1/treasury/received_debits/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves a list of TransactionEntry objects.</p>
  """
  getTreasuryTransactionEntries(created: Type219, effective_at: Type220, ending_before: String, expand: [String], financial_account: String!, limit: Int, order_by: String, starting_after: String, transaction: String): Type221 @http(path: "/v1/treasury/transaction_entries", query: [{key: "created", value: "{{args.created}}"}, {key: "effective_at", value: "{{args.effective_at}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "order_by", value: "{{args.order_by}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "transaction", value: "{{args.transaction}}"}])
  """
  <p>Retrieves a TransactionEntry object.</p>
  """
  getTreasuryTransactionEntriesId(expand: [String], id: String!): Treasury.transactionEntry @http(path: "/v1/treasury/transaction_entries/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Retrieves a list of Transaction objects.</p>
  """
  getTreasuryTransactions(created: Type222, ending_before: String, expand: [String], financial_account: String!, limit: Int, order_by: String, starting_after: String, status: String, status_transitions: Type223): Type224 @http(path: "/v1/treasury/transactions", query: [{key: "created", value: "{{args.created}}"}, {key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "financial_account", value: "{{args.financial_account}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "order_by", value: "{{args.order_by}}"}, {key: "starting_after", value: "{{args.starting_after}}"}, {key: "status", value: "{{args.status}}"}, {key: "status_transitions", value: "{{args.status_transitions}}"}])
  """
  <p>Retrieves the details of an existing Transaction.</p>
  """
  getTreasuryTransactionsId(expand: [String], id: String!): Treasury.transaction @http(path: "/v1/treasury/transactions/{{args.id}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Returns a list of your webhook endpoints.</p>
  """
  getWebhookEndpoints(ending_before: String, expand: [String], limit: Int, starting_after: String): Type225 @http(path: "/v1/webhook_endpoints", query: [{key: "ending_before", value: "{{args.ending_before}}"}, {key: "expand", value: "{{args.expand}}"}, {key: "limit", value: "{{args.limit}}"}, {key: "starting_after", value: "{{args.starting_after}}"}])
  """
  <p>Retrieves the webhook endpoint with the given ID.</p>
  """
  getWebhookEndpointsWebhookEndpoint(expand: [String], webhook_endpoint: String!): WebhookEndpoint @http(path: "/v1/webhook_endpoints/{{args.webhook_endpoint}}", query: [{key: "expand", value: "{{args.expand}}"}])
  """
  <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
  """
  postAccountLinks: AccountLink @http(method: "POST", path: "/v1/account_links")
  """
  <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
  """
  postAccountSessions: AccountSession @http(method: "POST", path: "/v1/account_sessions")
  """
  <p>Create an external account for a given account.</p>
  """
  postAccountsAccountBankAccounts(account: String!): ExternalAccount @http(method: "POST", path: "/v1/accounts/{{args.account}}/bank_accounts")
  """
  <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>

<p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
  """
  postAccountsAccountLoginLinks(account: String!): LoginLink @http(method: "POST", path: "/v1/accounts/{{args.account}}/login_links")
  """
  <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>

<p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
  """
  postAccountsAccountReject(account: String!): Account @http(method: "POST", path: "/v1/accounts/{{args.account}}/reject")
  """
  
  """
  postApplicationFeesIdRefund(id: String!): ApplicationFee @http(method: "POST", path: "/v1/application_fees/{{args.id}}/refund")
  """
  <p>Deletes a secret from the secret store by name and scope.</p>
  """
  postAppsSecretsDelete: Apps.secret @http(method: "POST", path: "/v1/apps/secrets/delete")
  """
  <p>Creates a billing meter event adjustment</p>
  """
  postBillingMeterEventAdjustments: Billing.meterEventAdjustment @http(method: "POST", path: "/v1/billing/meter_event_adjustments")
  """
  <p>Creates a billing meter event</p>
  """
  postBillingMeterEvents: Billing.meterEvent @http(method: "POST", path: "/v1/billing/meter_events")
  """
  <p>Deactivates a billing meter</p>
  """
  postBillingMetersIdDeactivate(id: String!): Billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/deactivate")
  """
  <p>Reactivates a billing meter</p>
  """
  postBillingMetersIdReactivate(id: String!): Billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/reactivate")
  """
  <p>Creates a session of the customer portal.</p>
  """
  postBillingPortalSessions: BillingPortal.session @http(method: "POST", path: "/v1/billing_portal/sessions")
  """
  <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>

<p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>

<p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
  """
  postChargesChargeCapture(charge: String!): Charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/capture")
  """
  
  """
  postChargesChargeDisputeClose(charge: String!): Dispute @http(method: "POST", path: "/v1/charges/{{args.charge}}/dispute/close")
  """
  <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>

<p>This action refunds a previously created charge that’s not refunded yet.
Funds are refunded to the credit or debit card that’s originally charged.</p>

<p>You can optionally refund only part of a charge.
You can repeat this until the entire charge is refunded.</p>

<p>After you entirely refund a charge, you can’t refund it again.
This method raises an error when it’s called on an already-refunded charge,
or when you attempt to refund more money than is left on a charge.</p>
  """
  postChargesChargeRefund(charge: String!): Charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/refund")
  """
  <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>

<p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
  """
  postCheckoutSessionsSessionExpire(session: String!): Checkout.session @http(method: "POST", path: "/v1/checkout/sessions/{{args.session}}/expire")
  """
  <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
  """
  postClimateOrdersOrderCancel(order: String!): Climate.order @http(method: "POST", path: "/v1/climate/orders/{{args.order}}/cancel")
  """
  <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
  """
  postCreditNotesIdVoid(id: String!): CreditNote @http(method: "POST", path: "/v1/credit_notes/{{args.id}}/void")
  """
  <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
  """
  postCustomerSessions: CustomerSession @http(method: "POST", path: "/v1/customer_sessions")
  """
  <p>Verify a specified bank account for a given customer.</p>
  """
  postCustomersCustomerBankAccountsIdVerify(customer: String!, id: String!): BankAccount @http(method: "POST", path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}/verify")
  """
  <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
funding instructions will be created. If funding instructions have already been created for a given customer, the same
funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
  """
  postCustomersCustomerFundingInstructions(customer: String!): FundingInstructions @http(method: "POST", path: "/v1/customers/{{args.customer}}/funding_instructions")
  """
  <p>Verify a specified bank account for a given customer.</p>
  """
  postCustomersCustomerSourcesIdVerify(customer: String!, id: String!): BankAccount @http(method: "POST", path: "/v1/customers/{{args.customer}}/sources/{{args.id}}/verify")
  """
  <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>

<p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
  """
  postDisputesDisputeClose(dispute: String!): Dispute @http(method: "POST", path: "/v1/disputes/{{args.dispute}}/close")
  """
  <p>Creates a short-lived API key for a given resource.</p>
  """
  postEphemeralKeys: EphemeralKey @http(method: "POST", path: "/v1/ephemeral_keys")
  """
  <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
  """
  postFinancialConnectionsAccountsAccountDisconnect(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/disconnect")
  """
  <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountRefresh(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/refresh")
  """
  <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountSubscribe(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/subscribe")
  """
  <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountUnsubscribe(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/unsubscribe")
  """
  <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
  """
  postFinancialConnectionsSessions: FinancialConnections.session @http(method: "POST", path: "/v1/financial_connections/sessions")
  """
  <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>

<p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
  """
  postIdentityVerificationSessionsSessionCancel(session: String!): Identity.verificationSession @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/cancel")
  """
  <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
the VerificationSession and all objects related to it, including VerificationReports, Events,
request logs, etc.</p>

<p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
<a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
state will automatically cancel it.</p>

<p>The redaction process may take up to four days. When the redaction process is in progress, the
VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
will be emitted.</p>

<p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
used for any purpose.</p>

<p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
  """
  postIdentityVerificationSessionsSessionRedact(session: String!): Identity.verificationSession @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/redact")
  """
  <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
  """
  postInvoicesInvoiceFinalize(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/finalize")
  """
  <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
Updating an invoice’s line item is only possible before the invoice is finalized.</p>
  """
  postInvoicesInvoiceLinesLineItemId(invoice: String!, line_item_id: String!): LineItem @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/lines/{{args.line_item_id}}")
  """
  <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
  """
  postInvoicesInvoiceMarkUncollectible(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/mark_uncollectible")
  """
  <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
  """
  postInvoicesInvoicePay(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/pay")
  """
  <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>

<p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
  """
  postInvoicesInvoiceSend(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/send")
  """
  <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>

<p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
  """
  postInvoicesInvoiceVoid(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/void")
  """
  <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
  """
  postIssuingAuthorizationsAuthorizationApprove(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/approve")
  """
  <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
  """
  postIssuingAuthorizationsAuthorizationDecline(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/decline")
  """
  <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
  """
  postIssuingDisputesDisputeSubmit(dispute: String!): Issuing.dispute @http(method: "POST", path: "/v1/issuing/disputes/{{args.dispute}}/submit")
  """
  <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
  """
  postLinkAccountSessions: FinancialConnections.session @http(method: "POST", path: "/v1/link_account_sessions")
  """
  <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
  """
  postLinkedAccountsAccountDisconnect(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/disconnect")
  """
  <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
  """
  postLinkedAccountsAccountRefresh(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/refresh")
  """
  <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
  """
  postPaymentIntentsIntentApplyCustomerBalance(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/apply_customer_balance")
  """
  <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>

<p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>

<p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
  """
  postPaymentIntentsIntentCancel(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/cancel")
  """
  <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>

<p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>

<p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
  """
  postPaymentIntentsIntentCapture(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/capture")
  """
  <p>Confirm that your customer intends to pay with current or provided
payment method. Upon confirmation, the PaymentIntent will attempt to initiate
a payment.
If the selected payment method requires additional authentication steps, the
PaymentIntent will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If payment fails,
the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
<code>canceled</code> status if the confirmation limit is reached. If
payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
After <code>next_action</code>s are handled by the client, no additional
confirmation is required to complete the payment.
If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
initiated using a secret key.
If any actions are required for the payment, the PaymentIntent will
return to the <code>requires_confirmation</code> state
after those actions are completed. Your server needs to then
explicitly re-confirm the PaymentIntent to initiate the next payment
attempt.</p>
  """
  postPaymentIntentsIntentConfirm(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/confirm")
  """
  <p>Perform an incremental authorization on an eligible
<a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
PaymentIntent’s status must be <code>requires_capture</code> and
<a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
must be <code>true</code>.</p>

<p>Incremental authorizations attempt to increase the authorized amount on
your customer’s card to the new, higher <code>amount</code> provided. Similar to the
initial authorization, incremental authorizations can be declined. A
single PaymentIntent can call this endpoint multiple times to further
increase the authorized amount.</p>

<p>If the incremental authorization succeeds, the PaymentIntent object
returns with the updated
<a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
If the incremental authorization fails, a
<a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
fields on the PaymentIntent or Charge update. The PaymentIntent
object remains capturable for the previously authorized amount.</p>

<p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
After it’s captured, a PaymentIntent can no longer be incremented.</p>

<p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
  """
  postPaymentIntentsIntentIncrementAuthorization(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/increment_authorization")
  """
  <p>Verifies microdeposits on a PaymentIntent object.</p>
  """
  postPaymentIntentsIntentVerifyMicrodeposits(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/verify_microdeposits")
  """
  <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
The payment method doesn’t appear in Elements for this domain until it is active.</p>

<p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>

<p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
  """
  postPaymentMethodDomainsPaymentMethodDomainValidate(payment_method_domain: String!): PaymentMethodDomain @http(method: "POST", path: "/v1/payment_method_domains/{{args.payment_method_domain}}/validate")
  """
  <p>Attaches a PaymentMethod object to a Customer.</p>

<p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
future use, which makes later declines and payment friction more likely.
See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
future payments.</p>

<p>To use this PaymentMethod as the default for invoice or subscription payments,
set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
on the Customer to the PaymentMethod’s ID.</p>
  """
  postPaymentMethodsPaymentMethodAttach(payment_method: String!): PaymentMethod @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/attach")
  """
  <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
  """
  postPaymentMethodsPaymentMethodDetach(payment_method: String!): PaymentMethod @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/detach")
  """
  <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
  """
  postPayoutsPayoutCancel(payout: String!): Payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/cancel")
  """
  <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>

<p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
  """
  postPayoutsPayoutReverse(payout: String!): Payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/reverse")
  """
  <p>Accepts the specified quote.</p>
  """
  postQuotesQuoteAccept(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/accept")
  """
  <p>Cancels the quote.</p>
  """
  postQuotesQuoteCancel(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/cancel")
  """
  <p>Finalizes the quote.</p>
  """
  postQuotesQuoteFinalize(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/finalize")
  """
  <p>Cancels a refund with a status of <code>requires_action</code>.</p>

<p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
  """
  postRefundsRefundCancel(refund: String!): Refund @http(method: "POST", path: "/v1/refunds/{{args.refund}}/cancel")
  """
  <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
  """
  postReviewsReviewApprove(review: String!): Review @http(method: "POST", path: "/v1/reviews/{{args.review}}/approve")
  """
  <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>

<p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
  """
  postSetupIntentsIntentCancel(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/cancel")
  """
  <p>Confirm that your customer intends to set up the current or
provided payment method. For example, you would confirm a SetupIntent
when a customer hits the “Save” button on a payment method management
page on your website.</p>

<p>If the selected payment method does not require any additional
steps from the customer, the SetupIntent will transition to the
<code>succeeded</code> status.</p>

<p>Otherwise, it will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If setup fails,
the SetupIntent will transition to the
<code>requires_payment_method</code> status or the <code>canceled</code> status if the
confirmation limit is reached.</p>
  """
  postSetupIntentsIntentConfirm(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/confirm")
  """
  <p>Verifies microdeposits on a SetupIntent object.</p>
  """
  postSetupIntentsIntentVerifyMicrodeposits(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/verify_microdeposits")
  """
  <p>Creates a new source object.</p>
  """
  postSources: Source @http(method: "POST", path: "/v1/sources")
  """
  <p>Verify a given source.</p>
  """
  postSourcesSourceVerify(source: String!): Source @http(method: "POST", path: "/v1/sources/{{args.source}}/verify")
  """
  <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>

<p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>

<p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>

<p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
  """
  postSubscriptionItemsSubscriptionItemUsageRecords(subscription_item: String!): UsageRecord @http(method: "POST", path: "/v1/subscription_items/{{args.subscription_item}}/usage_records")
  """
  <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
  """
  postSubscriptionSchedulesScheduleCancel(schedule: String!): SubscriptionSchedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/cancel")
  """
  <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
  """
  postSubscriptionSchedulesScheduleRelease(schedule: String!): SubscriptionSchedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/release")
  """
  <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
  """
  postSubscriptionsSubscriptionResume(subscription: String!): Subscription @http(method: "POST", path: "/v1/subscriptions/{{args.subscription}}/resume")
  """
  <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
  """
  postTaxCalculations: Tax.calculation @http(method: "POST", path: "/v1/tax/calculations")
  """
  <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
  """
  postTaxTransactionsCreateFromCalculation: Tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_from_calculation")
  """
  <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
  """
  postTaxTransactionsCreateReversal: Tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_reversal")
  """
  <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
  """
  postTerminalConnectionTokens: Terminal.connectionToken @http(method: "POST", path: "/v1/terminal/connection_tokens")
  """
  <p>Cancels the current reader action.</p>
  """
  postTerminalReadersReaderCancelAction(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/cancel_action")
  """
  <p>Initiates a payment flow on a Reader.</p>
  """
  postTerminalReadersReaderProcessPaymentIntent(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_payment_intent")
  """
  <p>Initiates a setup intent flow on a Reader.</p>
  """
  postTerminalReadersReaderProcessSetupIntent(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_setup_intent")
  """
  <p>Initiates a refund on a Reader</p>
  """
  postTerminalReadersReaderRefundPayment(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/refund_payment")
  """
  <p>Sets reader display to show cart details.</p>
  """
  postTerminalReadersReaderSetReaderDisplay(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/set_reader_display")
  """
  <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
  """
  postTestHelpersConfirmationTokens: ConfirmationToken @http(method: "POST", path: "/v1/test_helpers/confirmation_tokens")
  """
  <p>Create an incoming testmode bank transfer</p>
  """
  postTestHelpersCustomersCustomerFundCashBalance(customer: String!): CustomerCashBalanceTransaction @http(method: "POST", path: "/v1/test_helpers/customers/{{args.customer}}/fund_cash_balance")
  """
  <p>Create a test-mode authorization.</p>
  """
  postTestHelpersIssuingAuthorizations: Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations")
  """
  <p>Capture a test-mode authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationCapture(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/capture")
  """
  <p>Expire a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationExpire(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/expire")
  """
  <p>Increment a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationIncrement(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/increment")
  """
  <p>Reverse a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationReverse(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/reverse")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingDeliver(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/deliver")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingFail(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/fail")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingReturn(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/return")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingShip(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/ship")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(personalization_design: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/activate")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(personalization_design: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/deactivate")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(personalization_design: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/reject")
  """
  <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
  """
  postTestHelpersIssuingTransactionsCreateForceCapture: Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_force_capture")
  """
  <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
  """
  postTestHelpersIssuingTransactionsCreateUnlinkedRefund: Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_unlinked_refund")
  """
  <p>Refund a test-mode Transaction.</p>
  """
  postTestHelpersIssuingTransactionsTransactionRefund(transaction: String!): Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/{{args.transaction}}/refund")
  """
  <p>Expire a refund with a status of <code>requires_action</code>.</p>
  """
  postTestHelpersRefundsRefundExpire(refund: String!): Refund @http(method: "POST", path: "/v1/test_helpers/refunds/{{args.refund}}/expire")
  """
  <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
  """
  postTestHelpersTerminalReadersReaderPresentPaymentMethod(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/test_helpers/terminal/readers/{{args.reader}}/present_payment_method")
  """
  <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
  """
  postTestHelpersTestClocksTestClockAdvance(test_clock: String!): TestHelpers.testClock @http(method: "POST", path: "/v1/test_helpers/test_clocks/{{args.test_clock}}/advance")
  """
  <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdFail(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/fail")
  """
  <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdReturn(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/return")
  """
  <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdSucceed(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/succeed")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdFail(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/fail")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdPost(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/post")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdReturn(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/return")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(outbound_transfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/fail")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(outbound_transfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/post")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(outbound_transfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/return")
  """
  <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
  """
  postTestHelpersTreasuryReceivedCredits: Treasury.receivedCredit @http(method: "POST", path: "/v1/test_helpers/treasury/received_credits")
  """
  <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
  """
  postTestHelpersTreasuryReceivedDebits: Treasury.receivedDebit @http(method: "POST", path: "/v1/test_helpers/treasury/received_debits")
  """
  <p>Creates a single-use token that represents a bank account’s details.
You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">Custom account</a>.</p>
  """
  postTokens: Token @http(method: "POST", path: "/v1/tokens")
  """
  <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
  """
  postTopupsTopupCancel(topup: String!): Topup @http(method: "POST", path: "/v1/topups/{{args.topup}}/cancel")
  """
  <p>Cancels an InboundTransfer.</p>
  """
  postTreasuryInboundTransfersInboundTransferCancel(inbound_transfer: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/treasury/inbound_transfers/{{args.inbound_transfer}}/cancel")
  """
  <p>Cancel an OutboundPayment.</p>
  """
  postTreasuryOutboundPaymentsIdCancel(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/treasury/outbound_payments/{{args.id}}/cancel")
  """
  <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
  """
  postTreasuryOutboundTransfersOutboundTransferCancel(outbound_transfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}/cancel")
}

  """
  A Quote is a way to model prices that you'd like to provide to a customer.
Once accepted, it will automatically create an invoice, subscription or subscription schedule.
  """
type Quote {
  """
  Total before any discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total after discounts and taxes are applied.
  """
  amount_total: Int!
  """
  ID of the Connect Application that created the quote.
  """
  application: Type675
  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  """
  application_fee_amount: Int
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
  """
  application_fee_percent: Int
  """
  
  """
  automatic_tax: QuotesResourceAutomaticTax!
  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  """
  collection_method: String!
  """
  
  """
  computed: QuotesResourceComputed!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  """
  The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  """
  customer: Type676
  """
  The tax rates applied to this quote.
  """
  default_tax_rates: [Type677]
  """
  A description that will be displayed on the quote PDF.
  """
  description: String
  """
  The discounts applied to this quote.
  """
  discounts: [Type678]!
  """
  The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  """
  expires_at: Int!
  """
  A footer that will be displayed on the quote PDF.
  """
  footer: String
  """
  Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
  """
  from_quote: Type679
  """
  A header that will be displayed on the quote PDF.
  """
  header: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The invoice that was created from this quote.
  """
  invoice: Type680
  """
  
  """
  invoice_settings: InvoiceSettingQuoteSetting!
  """
  A list of items the customer is being quoted for.
  """
  line_items: Type681
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
  """
  number: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
  """
  on_behalf_of: Type682
  """
  The status of the quote.
  """
  status: String!
  """
  
  """
  status_transitions: QuotesResourceStatusTransitions!
  """
  The subscription that was created or updated from this quote.
  """
  subscription: Type683
  """
  
  """
  subscription_data: QuotesResourceSubscriptionDataSubscriptionData!
  """
  The subscription schedule that was created or updated from this quote.
  """
  subscription_schedule: Type684
  """
  ID of the test clock this quote belongs to.
  """
  test_clock: Type685
  """
  
  """
  total_details: QuotesResourceTotalDetails!
  """
  The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
  """
  transfer_data: Type686
}

  """
  
  """
type QuotesResourceAutomaticTax {
  """
  Automatically calculate taxes
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type687
  """
  The status of the most recent automated tax calculation for this quote.
  """
  status: String
}

  """
  
  """
type QuotesResourceComputed {
  """
  The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
  """
  recurring: Type688
  """
  
  """
  upfront: QuotesResourceUpfront!
}

  """
  
  """
type QuotesResourceFromQuote {
  """
  Whether this quote is a revision of a different quote.
  """
  is_revision: Boolean!
  """
  The quote that was cloned.
  """
  quote: Type689!
}

  """
  
  """
type QuotesResourceRecurring {
  """
  Total before any discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total after discounts and taxes are applied.
  """
  amount_total: Int!
  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: String!
  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int!
  """
  
  """
  total_details: QuotesResourceTotalDetails!
}

  """
  
  """
type QuotesResourceStatusTransitions {
  """
  The time that the quote was accepted. Measured in seconds since Unix epoch.
  """
  accepted_at: Int
  """
  The time that the quote was canceled. Measured in seconds since Unix epoch.
  """
  canceled_at: Int
  """
  The time that the quote was finalized. Measured in seconds since Unix epoch.
  """
  finalized_at: Int
}

  """
  
  """
type QuotesResourceSubscriptionDataSubscriptionData {
  """
  The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  """
  description: String
  """
  When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
  """
  effective_date: Int
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
  """
  metadata: JSON
  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
}

  """
  
  """
type QuotesResourceTotalDetails {
  """
  This is the sum of all the discounts.
  """
  amount_discount: Int!
  """
  This is the sum of all the shipping amounts.
  """
  amount_shipping: Int
  """
  This is the sum of all the tax amounts.
  """
  amount_tax: Int!
  """
  
  """
  breakdown: QuotesResourceTotalDetailsResourceBreakdown
}

  """
  
  """
type QuotesResourceTotalDetailsResourceBreakdown {
  """
  The aggregated discounts.
  """
  discounts: [LineItemsDiscountAmount]!
  """
  The aggregated tax amounts by rate.
  """
  taxes: [LineItemsTaxAmount]!
}

  """
  
  """
type QuotesResourceTransferData {
  """
  The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  """
  amount_percent: Int
  """
  The account where funds from the payment will be transferred to upon payment success.
  """
  destination: Type690!
}

  """
  
  """
type QuotesResourceUpfront {
  """
  Total before any discounts or taxes are applied.
  """
  amount_subtotal: Int!
  """
  Total after discounts and taxes are applied.
  """
  amount_total: Int!
  """
  The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  """
  line_items: Type691
  """
  
  """
  total_details: QuotesResourceTotalDetails!
}

  """
  An early fraud warning indicates that the card issuer has notified us that a
charge may be fraudulent.

Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
  """
type Radar.earlyFraudWarning {
  """
  An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
  """
  actionable: Boolean!
  """
  ID of the charge this early fraud warning is for, optionally expanded.
  """
  charge: Type692!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
  """
  fraud_type: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the Payment Intent this early fraud warning is for, optionally expanded.
  """
  payment_intent: Type693
}

  """
  Value lists allow you to group values together which can then be referenced in rules.

Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
  """
type Radar.valueList {
  """
  The name of the value list for use in rules.
  """
  alias: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The name or email address of the user who created this value list.
  """
  created_by: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
  """
  item_type: String!
  """
  List of items contained within this value list.
  """
  list_items: Type694!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The name of the value list.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.

Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
  """
type Radar.valueListItem {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The name or email address of the user who added this item to the value list.
  """
  created_by: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The value of the item.
  """
  value: String!
  """
  The identifier of the value list this item belongs to.
  """
  value_list: String!
}

  """
  Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
  """
type RadarRadarOptions {
  """
  A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.
  """
  session: String
}

  """
  
  """
type RadarReviewResourceLocation {
  """
  The city where the payment originated.
  """
  city: String
  """
  Two-letter ISO code representing the country where the payment originated.
  """
  country: String
  """
  The geographic latitude where the payment originated.
  """
  latitude: Int
  """
  The geographic longitude where the payment originated.
  """
  longitude: Int
  """
  The state/county/province/region where the payment originated.
  """
  region: String
}

  """
  
  """
type RadarReviewResourceSession {
  """
  The browser used in this browser session (e.g., `Chrome`).
  """
  browser: String
  """
  Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
  """
  device: String
  """
  The platform for the browser session (e.g., `Macintosh`).
  """
  platform: String
  """
  The version for the browser session (e.g., `61.0.3163.100`).
  """
  version: String
}

  """
  
  """
type ReceivedPaymentMethodDetailsFinancialAccount {
  """
  The FinancialAccount ID.
  """
  id: String!
  """
  The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.
  """
  network: String!
}

  """
  
  """
type Recurring {
  """
  Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`.
  """
  aggregate_usage: String
  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: String!
  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int!
  """
  The meter tracking the usage of a metered price
  """
  meter: String
  """
  Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: String!
}

  """
  Refund objects allow you to refund a previously created charge that isn't
refunded yet. Funds are refunded to the credit or debit card that's
initially charged.

Related guide: [Refunds](https://stripe.com/docs/refunds)
  """
type Refund {
  """
  Amount, in cents (or local equivalent).
  """
  amount: Int!
  """
  Balance transaction that describes the impact on your account balance.
  """
  balance_transaction: Type695
  """
  ID of the charge that's refunded.
  """
  charge: Type696
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
  """
  description: String
  """
  
  """
  destination_details: RefundDestinationDetails
  """
  After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
  """
  failure_balance_transaction: Type697
  """
  Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
  """
  failure_reason: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
  """
  instructions_email: String
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  
  """
  next_action: RefundNextAction
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the PaymentIntent that's refunded.
  """
  payment_intent: Type698
  """
  Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  """
  reason: String
  """
  This is the transaction number that appears on email receipts sent for this refund.
  """
  receipt_number: String
  """
  The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account.
  """
  source_transfer_reversal: Type699
  """
  Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
  """
  status: String
  """
  This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.
  """
  transfer_reversal: Type700
}

  """
  
  """
type RefundDestinationDetails {
  """
  
  """
  affirm: DestinationDetailsUnimplemented
  """
  
  """
  afterpay_clearpay: DestinationDetailsUnimplemented
  """
  
  """
  alipay: DestinationDetailsUnimplemented
  """
  
  """
  au_bank_transfer: DestinationDetailsUnimplemented
  """
  
  """
  blik: RefundDestinationDetailsGeneric
  """
  
  """
  br_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  card: RefundDestinationDetailsCard
  """
  
  """
  cashapp: DestinationDetailsUnimplemented
  """
  
  """
  customer_cash_balance: DestinationDetailsUnimplemented
  """
  
  """
  eps: DestinationDetailsUnimplemented
  """
  
  """
  eu_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  gb_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  giropay: DestinationDetailsUnimplemented
  """
  
  """
  grabpay: DestinationDetailsUnimplemented
  """
  
  """
  jp_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  klarna: DestinationDetailsUnimplemented
  """
  
  """
  mx_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  p24: RefundDestinationDetailsGeneric
  """
  
  """
  paynow: DestinationDetailsUnimplemented
  """
  
  """
  paypal: DestinationDetailsUnimplemented
  """
  
  """
  pix: DestinationDetailsUnimplemented
  """
  
  """
  revolut: DestinationDetailsUnimplemented
  """
  
  """
  sofort: DestinationDetailsUnimplemented
  """
  
  """
  swish: RefundDestinationDetailsGeneric
  """
  
  """
  th_bank_transfer: RefundDestinationDetailsGeneric
  """
  The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction.
  """
  type: String!
  """
  
  """
  us_bank_transfer: RefundDestinationDetailsGeneric
  """
  
  """
  wechat_pay: DestinationDetailsUnimplemented
  """
  
  """
  zip: DestinationDetailsUnimplemented
}

  """
  
  """
type RefundDestinationDetailsCard {
  """
  Value of the reference number assigned to the refund.
  """
  reference: String
  """
  Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`.
  """
  reference_status: String
  """
  Type of the reference number assigned to the refund.
  """
  reference_type: String
  """
  The type of refund. This can be `refund`, `reversal`, or `pending`.
  """
  type: String!
}

  """
  
  """
type RefundDestinationDetailsGeneric {
  """
  The reference assigned to the refund.
  """
  reference: String
  """
  Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  """
  reference_status: String
}

  """
  
  """
type RefundNextAction {
  """
  Contains the refund details.
  """
  display_details: Type701
  """
  Type of the next action to perform.
  """
  type: String!
}

  """
  
  """
type RefundNextActionDisplayDetails {
  """
  
  """
  email_sent: EmailSent!
  """
  The expiry timestamp.
  """
  expires_at: Int!
}

  """
  The Report Run object represents an instance of a report type generated with
specific run parameters. Once the object is created, Stripe begins processing the report.
When the report has finished running, it will give you a reference to a file
where you can retrieve your results. For an overview, see
[API Access to Reports](https://stripe.com/docs/reporting/statements/api).

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
  """
type Reporting.reportRun {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  If something should go wrong during the run, a message about the failure (populated when
 `status=failed`).
  """
  error: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  `true` if the report is run on live mode data and `false` if it is run on test mode data.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  parameters: FinancialReportingFinanceReportRunRunParameters!
  """
  The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
  """
  report_type: String!
  """
  The file object representing the result of the report run (populated when
 `status=succeeded`).
  """
  result: Type702
  """
  Status of this report run. This will be `pending` when the run is initially created.
 When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
 Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
  """
  status: String!
  """
  Timestamp at which this run successfully finished (populated when
 `status=succeeded`). Measured in seconds since the Unix epoch.
  """
  succeeded_at: Int
}

  """
  The Report Type resource corresponds to a particular type of report, such as
the "Activity summary" or "Itemized payouts" reports. These objects are
identified by an ID belonging to a set of enumerated values. See
[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
for those Report Type IDs, along with required and optional parameters.

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
  """
type Reporting.reportType {
  """
  Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
  """
  data_available_end: Int!
  """
  Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
  """
  data_available_start: Int!
  """
  List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
  """
  default_columns: [String]
  """
  The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Human-readable name of the Report Type
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  When this Report Type was latest updated. Measured in seconds since the Unix epoch.
  """
  updated: Int!
  """
  Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
  """
  version: Int!
}

  """
  
  """
type ReserveTransaction {
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  Reviews can be used to supplement automated fraud detection with human expertise.

Learn more about [Radar](/radar) and reviewing payments
[here](https://stripe.com/docs/radar/reviews).
  """
type Review {
  """
  The ZIP or postal code of the card used, if applicable.
  """
  billing_zip: String
  """
  The charge associated with this review.
  """
  charge: Type703
  """
  The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  closed_reason: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The IP address where the payment originated.
  """
  ip_address: String
  """
  Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
  """
  ip_address_location: Type704
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  If `true`, the review needs action.
  """
  open: Boolean!
  """
  The reason the review was opened. One of `rule` or `manual`.
  """
  opened_reason: String!
  """
  The PaymentIntent ID associated with this review, if one exists.
  """
  payment_intent: Type705
  """
  The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
  """
  reason: String!
  """
  Information related to the browsing session of the user who initiated the payment.
  """
  session: Type706
}

  """
  
  """
type Rule {
  """
  The action taken on the payment.
  """
  action: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The predicate to evaluate the payment against.
  """
  predicate: String!
}

  """
  If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
receive a `sigma.scheduled_query_run.created` webhook each time the query
runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
retrieve the query results.
  """
type ScheduledQueryRun {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  When the query was run, Sigma contained a snapshot of your Stripe data at this time.
  """
  data_load_time: Int!
  """
  
  """
  error: SigmaScheduledQueryRunError
  """
  The file object representing the results of the query.
  """
  file: Type707
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Time at which the result expires and is no longer available for download.
  """
  result_available_until: Int!
  """
  SQL for the query.
  """
  sql: String!
  """
  The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
  """
  status: String!
  """
  Title of the query.
  """
  title: String!
}

  """
  
  """
type SchedulesPhaseAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type708
}

  """
  
  """
type SecretServiceResourceScope {
  """
  The secret scope type.
  """
  type: String!
  """
  The user ID, if type is set to "user"
  """
  user: String
}

  """
  
  """
type SepaDebitGeneratedFrom {
  """
  The ID of the Charge that generated this PaymentMethod, if any.
  """
  charge: Type709
  """
  The ID of the SetupAttempt that generated this PaymentMethod, if any.
  """
  setup_attempt: Type710
}

  """
  A SetupAttempt describes one attempted confirmation of a SetupIntent,
whether that confirmation is successful or unsuccessful. You can use
SetupAttempts to inspect details of a specific attempt at setting up a
payment method using a SetupIntent.
  """
type SetupAttempt {
  """
  The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
  """
  application: Type711
  """
  If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.

It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  """
  attach_to_self: Boolean
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
  """
  customer: Type712
  """
  Indicates the directions of money movement for which this payment method is intended to be used.

Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  """
  flow_directions: [String]
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
  """
  on_behalf_of: Type713
  """
  ID of the payment method used with this SetupAttempt.
  """
  payment_method: Type714!
  """
  
  """
  payment_method_details: SetupAttemptPaymentMethodDetails!
  """
  The error encountered during this attempt to confirm the SetupIntent, if any.
  """
  setup_error: Type715
  """
  ID of the SetupIntent that this attempt belongs to.
  """
  setup_intent: Type716!
  """
  Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
  """
  status: String!
  """
  The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
  """
  usage: String!
}

  """
  
  """
type SetupAttemptPaymentMethodDetails {
  """
  
  """
  acss_debit: SetupAttemptPaymentMethodDetailsAcssDebit
  """
  
  """
  au_becs_debit: SetupAttemptPaymentMethodDetailsAuBecsDebit
  """
  
  """
  bacs_debit: SetupAttemptPaymentMethodDetailsBacsDebit
  """
  
  """
  bancontact: SetupAttemptPaymentMethodDetailsBancontact
  """
  
  """
  boleto: SetupAttemptPaymentMethodDetailsBoleto
  """
  
  """
  card: SetupAttemptPaymentMethodDetailsCard
  """
  
  """
  card_present: SetupAttemptPaymentMethodDetailsCardPresent
  """
  
  """
  cashapp: SetupAttemptPaymentMethodDetailsCashapp
  """
  
  """
  ideal: SetupAttemptPaymentMethodDetailsIdeal
  """
  
  """
  klarna: SetupAttemptPaymentMethodDetailsKlarna
  """
  
  """
  link: SetupAttemptPaymentMethodDetailsLink
  """
  
  """
  paypal: SetupAttemptPaymentMethodDetailsPaypal
  """
  
  """
  sepa_debit: SetupAttemptPaymentMethodDetailsSepaDebit
  """
  
  """
  sofort: SetupAttemptPaymentMethodDetailsSofort
  """
  The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
  """
  type: String!
  """
  
  """
  us_bank_account: SetupAttemptPaymentMethodDetailsUsBankAccount
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsBancontact {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Bank Identifier Code of the bank associated with the bank account.
  """
  bic: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit: Type717
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit_mandate: Type718
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: String
  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  """
  Check results by Card networks on Card address and CVC at the time of authorization
  """
  checks: Type719
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String
  """
  The last four digits of the card.
  """
  last4: String
  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  """
  Populated if this authorization used 3D Secure authentication.
  """
  three_d_secure: Type720
  """
  If this Card is part of a card wallet, this contains the details of the card wallet.
  """
  wallet: Type721
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String
  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsCardPresent {
  """
  The ID of the Card PaymentMethod which was generated by this SetupAttempt.
  """
  generated_card: Type722
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsCardWallet {
  """
  
  """
  apple_pay: PaymentMethodDetailsCardWalletApplePay
  """
  
  """
  google_pay: PaymentMethodDetailsCardWalletGooglePay
  """
  The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: String!
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  """
  bank: String
  """
  The Bank Identifier Code of the customer's bank.
  """
  bic: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit: Type723
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit_mandate: Type724
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  
  """
type SetupAttemptPaymentMethodDetailsSofort {
  """
  Bank code of bank associated with the bank account.
  """
  bank_code: String
  """
  Name of the bank associated with the bank account.
  """
  bank_name: String
  """
  Bank Identifier Code of the bank associated with the bank account.
  """
  bic: String
  """
  The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit: Type725
  """
  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  """
  generated_sepa_debit_mandate: Type726
  """
  Last four characters of the IBAN.
  """
  iban_last4: String
  """
  Preferred language of the Sofort authorization page that the customer is redirected to.
Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: String
  """
  Owner's verified full name. Values are verified or provided by Sofort directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.

Create a SetupIntent when you're ready to collect your customer's payment credentials.
Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
The SetupIntent transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
you through the setup process.

Successful SetupIntents result in payment credentials that are optimized for future payments.
For example, cardholders in [certain regions](/guides/strong-customer-authentication) might need to be run through
[Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) during payment method collection
to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
it automatically attaches the resulting payment method to that Customer after successful setup.
We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.

By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.

Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents)
  """
type SetupIntent {
  """
  ID of the Connect application that created the SetupIntent.
  """
  application: Type727
  """
  If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.

It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  """
  attach_to_self: Boolean
  """
  Settings for dynamic payment methods compatible with this Setup Intent
  """
  automatic_payment_methods: Type728
  """
  Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
  """
  cancellation_reason: String
  """
  The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.

The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  client_secret: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  ID of the Customer this SetupIntent belongs to, if one exists.

If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  """
  customer: Type729
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Indicates the directions of money movement for which this payment method is intended to be used.

Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  """
  flow_directions: [String]
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The error encountered in the previous SetupIntent confirmation.
  """
  last_setup_error: Type730
  """
  The most recent SetupAttempt for this SetupIntent.
  """
  latest_attempt: Type731
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  ID of the multi use Mandate generated by the SetupIntent.
  """
  mandate: Type732
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
  """
  next_action: Type733
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) for which the setup is intended.
  """
  on_behalf_of: Type734
  """
  ID of the payment method used with this SetupIntent.
  """
  payment_method: Type735
  """
  Information about the payment method configuration used for this Setup Intent.
  """
  payment_method_configuration_details: Type736
  """
  Payment method-specific configuration for this SetupIntent.
  """
  payment_method_options: Type737
  """
  The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
  """
  payment_method_types: [String]!
  """
  ID of the single_use Mandate generated by the SetupIntent.
  """
  single_use_mandate: Type738
  """
  [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
  """
  status: String!
  """
  Indicates how the payment method is intended to be used in the future.

Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  """
  usage: String!
}

  """
  
  """
type SetupIntentNextAction {
  """
  
  """
  cashapp_handle_redirect_or_display_qr_code: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
  """
  
  """
  redirect_to_url: SetupIntentNextActionRedirectToUrl
  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  """
  type: String!
  """
  When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSON
  """
  
  """
  verify_with_microdeposits: SetupIntentNextActionVerifyWithMicrodeposits
}

  """
  
  """
type SetupIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String
  """
  The URL you must redirect your customer to in order to authenticate.
  """
  url: String
}

  """
  
  """
type SetupIntentNextActionVerifyWithMicrodeposits {
  """
  The timestamp when the microdeposits are expected to land.
  """
  arrival_date: Int!
  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String!
  """
  The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  """
  microdeposit_type: String
}

  """
  
  """
type SetupIntentPaymentMethodOptions {
  acss_debit: Type739
  """
  
  """
  card: SetupIntentPaymentMethodOptionsCard
  link: Type740
  paypal: Type741
  sepa_debit: Type742
  us_bank_account: Type743
}

  """
  
  """
type SetupIntentPaymentMethodOptionsAcssDebit {
  """
  Currency supported by the bank account
  """
  currency: String
  """
  
  """
  mandate_options: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type SetupIntentPaymentMethodOptionsCard {
  """
  Configuration options for setting up an eMandate for cards issued in India.
  """
  mandate_options: Type744
  """
  Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.
  """
  network: String
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: String
}

  """
  
  """
type SetupIntentPaymentMethodOptionsCardMandateOptions {
  """
  Amount to be charged for future payments.
  """
  amount: Int!
  """
  One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  """
  amount_type: String!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  A description of the mandate or subscription that is meant to be displayed to the customer.
  """
  description: String
  """
  End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  """
  end_date: Int
  """
  Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  """
  interval: String!
  """
  The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  """
  interval_count: Int
  """
  Unique identifier for the mandate or subscription.
  """
  reference: String!
  """
  Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  """
  start_date: Int!
  """
  Specifies the type of mandates supported. Possible values are `india`.
  """
  supported_types: [String]
}

  """
  
  """
type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """
  A URL for custom mandate text
  """
  custom_mandate_url: String
  """
  List of Stripe products where this mandate can be selected automatically.
  """
  default_for: [String]
  """
  Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  """
  interval_description: String
  """
  Payment schedule for the mandate.
  """
  payment_schedule: String
  """
  Transaction type of the mandate.
  """
  transaction_type: String
}

  """
  
  """
type SetupIntentPaymentMethodOptionsPaypal {
  """
  The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
  """
  billing_agreement_id: String
}

  """
  
  """
type SetupIntentPaymentMethodOptionsSepaDebit {
  """
  
  """
  mandate_options: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit
}

  """
  
  """
type SetupIntentPaymentMethodOptionsUsBankAccount {
  """
  
  """
  financial_connections: LinkedAccountOptionsUsBankAccount
  """
  
  """
  mandate_options: PaymentMethodOptionsUsBankAccountMandateOptions
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type SetupIntentTypeSpecificPaymentMethodOptionsClient {
  """
  Bank account verification method.
  """
  verification_method: String
}

  """
  
  """
type Shipping {
  """
  
  """
  address: Address
  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  """
  carrier: String
  """
  Recipient name.
  """
  name: String
  """
  Recipient phone (including extension).
  """
  phone: String
  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  tracking_number: String
}

  """
  Shipping rates describe the price of shipping presented to your customers and
applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
  """
type ShippingRate {
  """
  Whether the shipping rate can be used for new purchases. Defaults to `true`.
  """
  active: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
  """
  delivery_estimate: Type745
  """
  The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
  """
  display_name: String
  """
  
  """
  fixed_amount: ShippingRateFixedAmount
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  """
  tax_behavior: String
  """
  A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
  """
  tax_code: Type746
  """
  The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
  """
  type: String!
}

  """
  
  """
type ShippingRateCurrencyOption {
  """
  A non-negative integer in cents representing how much to charge.
  """
  amount: Int!
  """
  Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  """
  tax_behavior: String!
}

  """
  
  """
type ShippingRateDeliveryEstimate {
  """
  The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
  """
  maximum: Type747
  """
  The lower bound of the estimated range. If empty, represents no lower bound.
  """
  minimum: Type748
}

  """
  
  """
type ShippingRateDeliveryEstimateBound {
  """
  A unit of time.
  """
  unit: String!
  """
  Must be greater than 0.
  """
  value: Int!
}

  """
  
  """
type ShippingRateFixedAmount {
  """
  A non-negative integer in cents representing how much to charge.
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  """
  currency_options: JSON
}

  """
  
  """
type SigmaScheduledQueryRunError {
  """
  Information about the run failure.
  """
  message: String!
}

  """
  `Source` objects allow you to accept a variety of payment methods. They
represent a customer's payment instrument, and can be used with the Stripe API
just like a `Card` object: once chargeable, they can be charged, or can be
attached to customers.

Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
This newer API provides access to our latest features and payment method types.

Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  """
type Source {
  ach_credit_transfer: SourceTypeAchCreditTransfer
  ach_debit: SourceTypeAchDebit
  acss_debit: SourceTypeAcssDebit
  alipay: SourceTypeAlipay
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  amount: Int
  au_becs_debit: SourceTypeAuBecsDebit
  bancontact: SourceTypeBancontact
  card: SourceTypeCard
  card_present: SourceTypeCardPresent
  """
  The client secret of the source. Used for client-side retrieval using a publishable key.
  """
  client_secret: String!
  """
  
  """
  code_verification: SourceCodeVerificationFlow
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  currency: String
  """
  The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  """
  customer: String
  eps: SourceTypeEps
  """
  The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  """
  flow: String!
  giropay: SourceTypeGiropay
  """
  Unique identifier for the object.
  """
  id: String!
  ideal: SourceTypeIdeal
  klarna: SourceTypeKlarna
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  multibanco: SourceTypeMultibanco
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Information about the owner of the payment instrument that may be used or required by particular source types.
  """
  owner: Type749
  p24: SourceTypeP24
  """
  
  """
  receiver: SourceReceiverFlow
  """
  
  """
  redirect: SourceRedirectFlow
  sepa_debit: SourceTypeSepaDebit
  sofort: SourceTypeSofort
  """
  
  """
  source_order: SourceOrder
  """
  Extra information about a source. This will appear on your customer's statement every time you charge the source.
  """
  statement_descriptor: String
  """
  The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  """
  status: String!
  three_d_secure: SourceTypeThreeDSecure
  """
  The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  """
  type: String!
  """
  Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  """
  usage: String
  wechat: SourceTypeWechat
}

  """
  
  """
type SourceCodeVerificationFlow {
  """
  The number of attempts remaining to authenticate the source object with a verification code.
  """
  attempts_remaining: Int!
  """
  The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
  """
  status: String!
}

  """
  Source mandate notifications should be created when a notification related to
a source mandate must be sent to the payer. They will trigger a webhook or
deliver an email to the customer.
  """
type SourceMandateNotification {
  """
  
  """
  acss_debit: SourceMandateNotificationAcssDebitData
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
  """
  amount: Int
  """
  
  """
  bacs_debit: SourceMandateNotificationBacsDebitData
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
  """
  reason: String!
  """
  
  """
  sepa_debit: SourceMandateNotificationSepaDebitData
  """
  `Source` objects allow you to accept a variety of payment methods. They
represent a customer's payment instrument, and can be used with the Stripe API
just like a `Card` object: once chargeable, they can be charged, or can be
attached to customers.

Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
This newer API provides access to our latest features and payment method types.

Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  """
  source: Source!
  """
  The status of the mandate notification. Valid statuses are `pending` or `submitted`.
  """
  status: String!
  """
  The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
  """
  type: String!
}

  """
  
  """
type SourceMandateNotificationAcssDebitData {
  """
  The statement descriptor associate with the debit.
  """
  statement_descriptor: String
}

  """
  
  """
type SourceMandateNotificationBacsDebitData {
  """
  Last 4 digits of the account number associated with the debit.
  """
  last4: String
}

  """
  
  """
type SourceMandateNotificationSepaDebitData {
  """
  SEPA creditor ID.
  """
  creditor_identifier: String
  """
  Last 4 digits of the account number associated with the debit.
  """
  last4: String
  """
  Mandate reference associated with the debit.
  """
  mandate_reference: String
}

  """
  
  """
type SourceOrder {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The email address of the customer placing the order.
  """
  email: String
  """
  List of items constituting the order.
  """
  items: [SourceOrderItem]
  """
  
  """
  shipping: Shipping
}

  """
  
  """
type SourceOrderItem {
  """
  The amount (price) for this order item.
  """
  amount: Int
  """
  This currency of this order item. Required when `amount` is present.
  """
  currency: String
  """
  Human-readable description for this order item.
  """
  description: String
  """
  The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
  """
  parent: String
  """
  The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
  """
  quantity: Int
  """
  The type of this order item. Must be `sku`, `tax`, or `shipping`.
  """
  type: String
}

  """
  
  """
type SourceOwner {
  """
  Owner's address.
  """
  address: Type750
  """
  Owner's email address.
  """
  email: String
  """
  Owner's full name.
  """
  name: String
  """
  Owner's phone number (including extension).
  """
  phone: String
  """
  Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_address: Type751
  """
  Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_email: String
  """
  Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
  """
  Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_phone: String
}

  """
  
  """
type SourceReceiverFlow {
  """
  The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
  """
  address: String
  """
  The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
  """
  amount_charged: Int!
  """
  The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
  """
  amount_received: Int!
  """
  The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
  """
  amount_returned: Int!
  """
  Type of refund attribute method, one of `email`, `manual`, or `none`.
  """
  refund_attributes_method: String!
  """
  Type of refund attribute status, one of `missing`, `requested`, or `available`.
  """
  refund_attributes_status: String!
}

  """
  
  """
type SourceRedirectFlow {
  """
  The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
  """
  failure_reason: String
  """
  The URL you provide to redirect the customer to after they authenticated their payment.
  """
  return_url: String!
  """
  The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
  """
  status: String!
  """
  The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
  """
  url: String!
}

  """
  Some payment methods have no required amount that a customer must send.
Customers can be instructed to send any amount, and it can be made up of
multiple transactions. As such, sources can have multiple associated
transactions.
  """
type SourceTransaction {
  """
  
  """
  ach_credit_transfer: SourceTransactionAchCreditTransferData
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
  """
  amount: Int!
  """
  
  """
  chf_credit_transfer: SourceTransactionChfCreditTransferData
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  
  """
  gbp_credit_transfer: SourceTransactionGbpCreditTransferData
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  paper_check: SourceTransactionPaperCheckData
  """
  
  """
  sepa_credit_transfer: SourceTransactionSepaCreditTransferData
  """
  The ID of the source this transaction is attached to.
  """
  source: String!
  """
  The status of the transaction, one of `succeeded`, `pending`, or `failed`.
  """
  status: String!
  """
  The type of source this transaction is attached to.
  """
  type: String!
}

  """
  
  """
type SourceTransactionAchCreditTransferData {
  """
  Customer data associated with the transfer.
  """
  customer_data: String
  """
  Bank account fingerprint associated with the transfer.
  """
  fingerprint: String
  """
  Last 4 digits of the account number associated with the transfer.
  """
  last4: String
  """
  Routing number associated with the transfer.
  """
  routing_number: String
}

  """
  
  """
type SourceTransactionChfCreditTransferData {
  """
  Reference associated with the transfer.
  """
  reference: String
  """
  Sender's country address.
  """
  sender_address_country: String
  """
  Sender's line 1 address.
  """
  sender_address_line1: String
  """
  Sender's bank account IBAN.
  """
  sender_iban: String
  """
  Sender's name.
  """
  sender_name: String
}

  """
  
  """
type SourceTransactionGbpCreditTransferData {
  """
  Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
  """
  fingerprint: String
  """
  The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
  """
  funding_method: String
  """
  Last 4 digits of sender account number associated with the transfer.
  """
  last4: String
  """
  Sender entered arbitrary information about the transfer.
  """
  reference: String
  """
  Sender account number associated with the transfer.
  """
  sender_account_number: String
  """
  Sender name associated with the transfer.
  """
  sender_name: String
  """
  Sender sort code associated with the transfer.
  """
  sender_sort_code: String
}

  """
  
  """
type SourceTransactionPaperCheckData {
  """
  Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
  """
  available_at: String
  """
  Comma-separated list of invoice IDs associated with the paper check.
  """
  invoices: String
}

  """
  
  """
type SourceTransactionSepaCreditTransferData {
  """
  Reference associated with the transfer.
  """
  reference: String
  """
  Sender's bank account IBAN.
  """
  sender_iban: String
  """
  Sender's name.
  """
  sender_name: String
}

type SourceTypeAchCreditTransfer {
  account_number: String
  bank_name: String
  fingerprint: String
  refund_account_holder_name: String
  refund_account_holder_type: String
  refund_routing_number: String
  routing_number: String
  swift_code: String
}

type SourceTypeAchDebit {
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
  type: String
}

type SourceTypeAcssDebit {
  bank_address_city: String
  bank_address_line_1: String
  bank_address_line_2: String
  bank_address_postal_code: String
  bank_name: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

type SourceTypeAlipay {
  data_string: String
  native_url: String
  statement_descriptor: String
}

type SourceTypeAuBecsDebit {
  bsb_number: String
  fingerprint: String
  last4: String
}

type SourceTypeBancontact {
  bank_code: String
  bank_name: String
  bic: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type SourceTypeCard {
  address_line1_check: String
  address_zip_check: String
  brand: String
  country: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type SourceTypeCardPresent {
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  brand: String
  country: String
  cvm_type: String
  data_type: String
  dedicated_file_name: String
  emv_auth_data: String
  evidence_customer_signature: String
  evidence_transaction_certificate: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  pos_device_id: String
  pos_entry_mode: String
  read_method: String
  reader: String
  terminal_verification_results: String
  transaction_status_information: String
}

type SourceTypeEps {
  reference: String
  statement_descriptor: String
}

type SourceTypeGiropay {
  bank_code: String
  bank_name: String
  bic: String
  statement_descriptor: String
}

type SourceTypeIdeal {
  bank: String
  bic: String
  iban_last4: String
  statement_descriptor: String
}

type SourceTypeKlarna {
  background_image_url: String
  client_token: String
  first_name: String
  last_name: String
  locale: String
  logo_url: String
  page_title: String
  pay_later_asset_urls_descriptive: String
  pay_later_asset_urls_standard: String
  pay_later_name: String
  pay_later_redirect_url: String
  pay_now_asset_urls_descriptive: String
  pay_now_asset_urls_standard: String
  pay_now_name: String
  pay_now_redirect_url: String
  pay_over_time_asset_urls_descriptive: String
  pay_over_time_asset_urls_standard: String
  pay_over_time_name: String
  pay_over_time_redirect_url: String
  payment_method_categories: String
  purchase_country: String
  purchase_type: String
  redirect_url: String
  shipping_delay: Int
  shipping_first_name: String
  shipping_last_name: String
}

type SourceTypeMultibanco {
  entity: String
  reference: String
  refund_account_holder_address_city: String
  refund_account_holder_address_country: String
  refund_account_holder_address_line1: String
  refund_account_holder_address_line2: String
  refund_account_holder_address_postal_code: String
  refund_account_holder_address_state: String
  refund_account_holder_name: String
  refund_iban: String
}

type SourceTypeP24 {
  reference: String
}

type SourceTypeSepaDebit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate_reference: String
  mandate_url: String
}

type SourceTypeSofort {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type SourceTypeThreeDSecure {
  address_line1_check: String
  address_zip_check: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type SourceTypeWechat {
  prepay_id: String
  qr_code_url: String
  statement_descriptor: String
}

  """
  Subscriptions allow you to charge a customer on a recurring basis.

Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
  """
type Subscription {
  """
  ID of the Connect Application that created the subscription.
  """
  application: Type752
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Int
  """
  
  """
  automatic_tax: SubscriptionAutomaticTax!
  """
  The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
  """
  billing_cycle_anchor: Int!
  """
  The fixed values used to calculate the `billing_cycle_anchor`.
  """
  billing_cycle_anchor_config: Type753
  """
  Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  """
  billing_thresholds: Type754
  """
  A date in the future at which the subscription will automatically get canceled
  """
  cancel_at: Int
  """
  If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
  """
  cancel_at_period_end: Boolean!
  """
  If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  """
  canceled_at: Int
  """
  Details about why this subscription was cancelled
  """
  cancellation_details: Type755
  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  """
  collection_method: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
  """
  current_period_end: Int!
  """
  Start of the current period that the subscription has been invoiced for.
  """
  current_period_start: Int!
  """
  ID of the customer who owns the subscription.
  """
  customer: Type756!
  """
  Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
  """
  days_until_due: Int
  """
  ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  """
  default_payment_method: Type757
  """
  ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  """
  default_source: Type758
  """
  The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
  """
  default_tax_rates: [TaxRate]
  """
  The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  """
  description: String
  """
  Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
  """
  discount: Type759
  """
  If the subscription has ended, the date the subscription ended.
  """
  ended_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  List of subscription items, each with an attached price.
  """
  items: Type760!
  """
  The most recent invoice this subscription has generated.
  """
  latest_invoice: Type761
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
  """
  next_pending_invoice_item_invoice: Int
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details.
  """
  on_behalf_of: Type762
  """
  If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](/billing/subscriptions/pause-payment).
  """
  pause_collection: Type763
  """
  Payment settings passed on to invoices created by the subscription.
  """
  payment_settings: Type764
  """
  Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
  """
  pending_invoice_item_interval: Type765
  """
  You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
  """
  pending_setup_intent: Type766
  """
  If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
  """
  pending_update: Type767
  """
  The schedule attached to the subscription
  """
  schedule: Type768
  """
  Date when the subscription was first created. The date might differ from the `created` date due to backdating.
  """
  start_date: Int!
  """
  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`. 

For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated. 

A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 

A subscription can only enter a `paused` status [when a trial ends without a payment method](/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged. 

If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings). 

If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  """
  status: String!
  """
  ID of the test clock this subscription belongs to.
  """
  test_clock: Type769
  """
  The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  """
  transfer_data: Type770
  """
  If the subscription has a trial, the end of that trial.
  """
  trial_end: Int
  """
  Settings related to subscription trials.
  """
  trial_settings: Type771
  """
  If the subscription has a trial, the beginning of that trial.
  """
  trial_start: Int
}

  """
  
  """
type SubscriptionAutomaticTax {
  """
  Whether Stripe automatically computes tax on this subscription.
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type772
}

  """
  
  """
type SubscriptionBillingThresholds {
  """
  Monetary threshold that triggers the subscription to create an invoice
  """
  amount_gte: Int
  """
  Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
  """
  reset_billing_cycle_anchor: Boolean
}

  """
  
  """
type SubscriptionDetailsData {
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
 *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
  """
  metadata: JSON
}

  """
  Subscription items allow you to create customer subscriptions with more than
one plan, making it easy to represent complex billing relationships.
  """
type SubscriptionItem {
  """
  Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
  """
  billing_thresholds: Type773
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  """
  price: Price!
  """
  The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
  """
  quantity: Int
  """
  The `subscription` this `subscription_item` belongs to.
  """
  subscription: String!
  """
  The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
  """
  tax_rates: [TaxRate]
}

  """
  
  """
type SubscriptionItemBillingThresholds {
  """
  Usage threshold that triggers the subscription to create an invoice
  """
  usage_gte: Int
}

  """
  
  """
type SubscriptionPaymentMethodOptionsCard {
  """
  
  """
  mandate_options: InvoiceMandateOptionsCard
  """
  Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
  """
  network: String
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: String
}

  """
  
  """
type SubscriptionPendingInvoiceItemInterval {
  """
  Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
  """
  interval: String!
  """
  The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
  """
  interval_count: Int!
}

  """
  A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.

Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
  """
type SubscriptionSchedule {
  """
  ID of the Connect Application that created the schedule.
  """
  application: Type774
  """
  Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int
  """
  Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
  """
  completed_at: Int
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
  """
  current_phase: Type775
  """
  ID of the customer who owns the subscription schedule.
  """
  customer: Type776!
  """
  
  """
  default_settings: SubscriptionSchedulesResourceDefaultSettings!
  """
  Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
  """
  end_behavior: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Configuration for the subscription schedule's phases.
  """
  phases: [SubscriptionSchedulePhaseConfiguration]!
  """
  Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
  """
  released_at: Int
  """
  ID of the subscription once managed by the subscription schedule (if it is released).
  """
  released_subscription: String
  """
  The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  """
  status: String!
  """
  ID of the subscription managed by the subscription schedule.
  """
  subscription: Type777
  """
  ID of the test clock this subscription schedule belongs to.
  """
  test_clock: Type778
}

  """
  An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
  """
type SubscriptionScheduleAddInvoiceItem {
  """
  ID of the price used to generate the invoice item.
  """
  price: Type779!
  """
  The quantity of the invoice item.
  """
  quantity: Int
  """
  The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
  """
  tax_rates: [TaxRate]
}

  """
  A phase item describes the price and quantity of a phase.
  """
type SubscriptionScheduleConfigurationItem {
  """
  Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
  """
  billing_thresholds: Type780
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
  """
  metadata: JSON
  """
  ID of the price to which the customer should be subscribed.
  """
  price: Type781!
  """
  Quantity of the plan to which the customer should be subscribed.
  """
  quantity: Int
  """
  The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
  """
  tax_rates: [TaxRate]
}

  """
  
  """
type SubscriptionScheduleCurrentPhase {
  """
  The end of this phase of the subscription schedule.
  """
  end_date: Int!
  """
  The start of this phase of the subscription schedule.
  """
  start_date: Int!
}

  """
  A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
  """
type SubscriptionSchedulePhaseConfiguration {
  """
  A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
  """
  add_invoice_items: [SubscriptionScheduleAddInvoiceItem]!
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Int
  """
  
  """
  automatic_tax: SchedulesPhaseAutomaticTax
  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: String
  """
  Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  """
  billing_thresholds: Type782
  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  """
  collection_method: String
  """
  ID of the coupon to use during this phase of the subscription schedule.
  """
  coupon: Type783
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
  """
  default_payment_method: Type784
  """
  The default tax rates to apply to the subscription during this phase of the subscription schedule.
  """
  default_tax_rates: [TaxRate]
  """
  Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  """
  description: String
  """
  The end of this phase of the subscription schedule.
  """
  end_date: Int!
  """
  The invoice settings applicable during this phase.
  """
  invoice_settings: Type785
  """
  Subscription items to configure the subscription to during this phase of the subscription schedule.
  """
  items: [SubscriptionScheduleConfigurationItem]!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
  """
  metadata: JSON
  """
  The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
  """
  on_behalf_of: Type786
  """
  If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
  """
  proration_behavior: String!
  """
  The start of this phase of the subscription schedule.
  """
  start_date: Int!
  """
  The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  """
  transfer_data: Type787
  """
  When the trial ends within the phase.
  """
  trial_end: Int
}

  """
  
  """
type SubscriptionSchedulesResourceDefaultSettings {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Int
  """
  
  """
  automatic_tax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: String!
  """
  Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  """
  billing_thresholds: Type788
  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  """
  collection_method: String
  """
  ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
  """
  default_payment_method: Type789
  """
  Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  """
  description: String
  """
  
  """
  invoice_settings: InvoiceSettingSubscriptionScheduleSetting!
  """
  The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
  """
  on_behalf_of: Type790
  """
  The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  """
  transfer_data: Type791
}

  """
  
  """
type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean!
  """
  The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  """
  liability: Type792
}

  """
  
  """
type SubscriptionTransferData {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount_percent: Int
  """
  The account where funds from the payment will be transferred to upon payment success.
  """
  destination: Type793!
}

  """
  
  """
type SubscriptionsResourceBillingCycleAnchorConfig {
  """
  The day of the month of the billing_cycle_anchor.
  """
  day_of_month: Int!
  """
  The hour of the day of the billing_cycle_anchor.
  """
  hour: Int
  """
  The minute of the hour of the billing_cycle_anchor.
  """
  minute: Int
  """
  The month to start full cycle billing periods.
  """
  month: Int
  """
  The second of the minute of the billing_cycle_anchor.
  """
  second: Int
}

  """
  The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
should be paused.
  """
type SubscriptionsResourcePauseCollection {
  """
  The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
  """
  behavior: String!
  """
  The time after which the subscription will resume collecting payments.
  """
  resumes_at: Int
}

  """
  
  """
type SubscriptionsResourcePaymentMethodOptions {
  """
  This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
  """
  acss_debit: Type794
  """
  This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
  """
  bancontact: Type795
  """
  This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
  """
  card: Type796
  """
  This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
  """
  customer_balance: Type797
  """
  This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.
  """
  konbini: Type798
  """
  This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription.
  """
  sepa_debit: Type799
  """
  This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
  """
  us_bank_account: Type800
}

  """
  
  """
type SubscriptionsResourcePaymentSettings {
  """
  Payment-method-specific configuration to provide to invoices created by the subscription.
  """
  payment_method_options: Type801
  """
  The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [String]
  """
  Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.
  """
  save_default_payment_method: String
}

  """
  Pending Updates store the changes pending from a previous update that will be applied
to the Subscription upon successful payment.
  """
type SubscriptionsResourcePendingUpdate {
  """
  If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
  """
  billing_cycle_anchor: Int
  """
  The point after which the changes reflected by this update will be discarded and no longer applied.
  """
  expires_at: Int!
  """
  List of subscription items, each with an attached plan, that will be set if the update is applied.
  """
  subscription_items: [SubscriptionItem]
  """
  Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
  """
  trial_end: Int
  """
  Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  """
  trial_from_plan: Boolean
}

  """
  Defines how a subscription behaves when a free trial ends.
  """
type SubscriptionsTrialsResourceEndBehavior {
  """
  Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
  """
  missing_payment_method: String!
}

  """
  Configures how this subscription behaves during the trial period.
  """
type SubscriptionsTrialsResourceTrialSettings {
  """
  Defines how a subscription behaves when a free trial ends.
  """
  end_behavior: SubscriptionsTrialsResourceEndBehavior!
}

  """
  A Tax Calculation allows you to calculate the tax to collect from your customer.

Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
  """
type Tax.calculation {
  """
  Total after taxes.
  """
  amount_total: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
  """
  customer: String
  """
  
  """
  customer_details: TaxProductResourceCustomerDetails!
  """
  Timestamp of date at which the tax calculation will expire.
  """
  expires_at: Int
  """
  Unique identifier for the calculation.
  """
  id: String
  """
  The list of items the customer is purchasing.
  """
  line_items: Type802
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The shipping cost details for the calculation.
  """
  shipping_cost: Type803
  """
  The amount of tax to be collected on top of the line item prices.
  """
  tax_amount_exclusive: Int!
  """
  The amount of tax already included in the line item prices.
  """
  tax_amount_inclusive: Int!
  """
  Breakdown of individual tax amounts that add up to the total.
  """
  tax_breakdown: [TaxProductResourceTaxBreakdown]!
  """
  Timestamp of date at which the tax rules and rates in effect applies for the calculation.
  """
  tax_date: Int!
}

  """
  
  """
type Tax.calculationLineItem {
  """
  The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  """
  amount: Int!
  """
  The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_tax: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ID of an existing [Product](https://stripe.com/docs/api/products/object).
  """
  product: String
  """
  The number of units of the item being purchased. For reversals, this is the quantity reversed.
  """
  quantity: Int!
  """
  A custom identifier for this line item.
  """
  reference: String
  """
  Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  """
  tax_behavior: String!
  """
  Detailed account of taxes relevant to this line item.
  """
  tax_breakdown: [TaxProductResourceLineItemTaxBreakdown]
  """
  The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
  """
  tax_code: String!
}

  """
  A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).

Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).

Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
  """
type Tax.registration {
  """
  Time at which the registration becomes active. Measured in seconds since the Unix epoch.
  """
  active_from: Int!
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String!
  """
  
  """
  country_options: TaxProductRegistrationsResourceCountryOptions!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.
  """
  expires_at: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.
  """
  status: String!
}

  """
  You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.

Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
  """
type Tax.settings {
  """
  
  """
  defaults: TaxProductResourceTaxSettingsDefaults!
  """
  The place where your business is located.
  """
  head_office: Type804
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.
  """
  status: String!
  """
  
  """
  status_details: TaxProductResourceTaxSettingsStatusDetails!
}

  """
  A Tax Transaction records the tax collected from or refunded to your customer.

Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
  """
type Tax.transaction {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
  """
  customer: String
  """
  
  """
  customer_details: TaxProductResourceCustomerDetails!
  """
  Unique identifier for the transaction.
  """
  id: String!
  """
  The tax collected or refunded, by line item.
  """
  line_items: Type805
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  A custom unique identifier, such as 'myOrder_123'.
  """
  reference: String!
  """
  If `type=reversal`, contains information about what was reversed.
  """
  reversal: Type806
  """
  The shipping cost details for the transaction.
  """
  shipping_cost: Type807
  """
  Timestamp of date at which the tax rules and rates in effect applies for the calculation.
  """
  tax_date: Int!
  """
  If `reversal`, this transaction reverses an earlier transaction.
  """
  type: String!
}

  """
  
  """
type Tax.transactionLineItem {
  """
  The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  """
  amount: Int!
  """
  The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_tax: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ID of an existing [Product](https://stripe.com/docs/api/products/object).
  """
  product: String
  """
  The number of units of the item being purchased. For reversals, this is the quantity reversed.
  """
  quantity: Int!
  """
  A custom identifier for this line item in the transaction.
  """
  reference: String!
  """
  If `type=reversal`, contains information about what was reversed.
  """
  reversal: Type808
  """
  Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  """
  tax_behavior: String!
  """
  The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
  """
  tax_code: String!
  """
  If `reversal`, this line item reverses an earlier transaction.
  """
  type: String!
}

  """
  [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
  """
type TaxCode {
  """
  A detailed description of which types of products the tax code represents.
  """
  description: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  A short name for the tax code.
  """
  name: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type TaxDeductedAtSource {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_end: Int!
  """
  The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_start: Int!
  """
  The TAN that was supplied to Stripe when TDS was assessed
  """
  tax_deduction_account_number: String!
}

  """
  
  """
type TaxIDsOwner {
  """
  The account being referenced when `type` is `account`.
  """
  account: Type809
  """
  The Connect Application being referenced when `type` is `application`.
  """
  application: Type810
  """
  The customer being referenced when `type` is `customer`.
  """
  customer: Type811
  """
  Type of owner referenced.
  """
  type: String!
}

  """
  You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
Customer and account tax IDs get displayed on related invoices and credit notes.

Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
  """
type TaxId {
  """
  Two-letter ISO code representing the country of the tax ID.
  """
  country: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  ID of the customer.
  """
  customer: Type812
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The account or customer the tax ID belongs to.
  """
  owner: Type813
  """
  Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `no_voec`, `nz_gst`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
  """
  type: String!
  """
  Value of the tax ID.
  """
  value: String!
  """
  Tax ID verification information.
  """
  verification: Type814
}

  """
  
  """
type TaxIdVerification {
  """
  Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
  """
  status: String!
  """
  Verified address.
  """
  verified_address: String
  """
  Verified name.
  """
  verified_name: String
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptions {
  """
  
  """
  ae: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  at: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  au: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  be: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  bg: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  ca: TaxProductRegistrationsResourceCountryOptionsCanada
  """
  
  """
  ch: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  cl: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  co: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  cy: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  cz: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  de: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  dk: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  ee: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  es: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  fi: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  fr: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  gb: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  gr: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  hr: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  hu: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  id: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  ie: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  is: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  it: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  jp: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  kr: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  lt: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  lu: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  lv: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  mt: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  mx: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  my: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  nl: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  no: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  nz: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  pl: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  pt: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  ro: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  sa: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  se: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  sg: TaxProductRegistrationsResourceCountryOptionsDefault
  """
  
  """
  si: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  sk: TaxProductRegistrationsResourceCountryOptionsEurope
  """
  
  """
  th: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  tr: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  us: TaxProductRegistrationsResourceCountryOptionsUnitedStates
  """
  
  """
  vn: TaxProductRegistrationsResourceCountryOptionsSimplified
  """
  
  """
  za: TaxProductRegistrationsResourceCountryOptionsDefault
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard {
  """
  Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
  """
  province: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsCanada {
  """
  
  """
  province_standard: TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard
  """
  Type of registration in Canada.
  """
  type: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsDefault {
  """
  Type of registration in `country`.
  """
  type: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsEuStandard {
  """
  Place of supply scheme used in an EU standard registration.
  """
  place_of_supply_scheme: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsEurope {
  """
  
  """
  standard: TaxProductRegistrationsResourceCountryOptionsEuStandard
  """
  Type of registration in an EU country.
  """
  type: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsSimplified {
  """
  Type of registration in `country`.
  """
  type: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsUnitedStates {
  """
  
  """
  local_amusement_tax: TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax
  """
  
  """
  local_lease_tax: TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax
  """
  Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
  """
  state: String!
  """
  Type of registration in the US.
  """
  type: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax {
  """
  A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
  """
  jurisdiction: String!
}

  """
  
  """
type TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax {
  """
  A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
  """
  jurisdiction: String!
}

  """
  
  """
type TaxProductResourceCustomerDetails {
  """
  The customer's postal address (for example, home or business location).
  """
  address: Type815
  """
  The type of customer address provided.
  """
  address_source: String
  """
  The customer's IP address (IPv4 or IPv6).
  """
  ip_address: String
  """
  The customer's tax IDs (for example, EU VAT numbers).
  """
  tax_ids: [TaxProductResourceCustomerDetailsResourceTaxId]!
  """
  The taxability override used for taxation.
  """
  taxability_override: String!
}

  """
  
  """
type TaxProductResourceCustomerDetailsResourceTaxId {
  """
  The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
  """
  type: String!
  """
  The value of the tax ID.
  """
  value: String!
}

  """
  
  """
type TaxProductResourceJurisdiction {
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String!
  """
  A human-readable name for the jurisdiction imposing the tax.
  """
  display_name: String!
  """
  Indicates the level of the jurisdiction imposing the tax.
  """
  level: String!
  """
  [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
  """
  state: String
}

  """
  
  """
type TaxProductResourceLineItemTaxBreakdown {
  """
  The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  
  """
  jurisdiction: TaxProductResourceJurisdiction!
  """
  Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
  """
  sourcing: String!
  """
  Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax.
  """
  tax_rate_details: Type816
  """
  The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  """
  taxability_reason: String!
  """
  The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  taxable_amount: Int!
}

  """
  
  """
type TaxProductResourceLineItemTaxRateDetails {
  """
  A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)".
  """
  display_name: String!
  """
  The tax rate percentage as a string. For example, 8.5% is represented as "8.5".
  """
  percentage_decimal: String!
  """
  The tax type, such as `vat` or `sales_tax`.
  """
  tax_type: String!
}

  """
  
  """
type TaxProductResourcePostalAddress {
  """
  City, district, suburb, town, or village.
  """
  city: String
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String!
  """
  Address line 1 (e.g., street, PO Box, or company name).
  """
  line1: String
  """
  Address line 2 (e.g., apartment, suite, unit, or building).
  """
  line2: String
  """
  ZIP or postal code.
  """
  postal_code: String
  """
  State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX".
  """
  state: String
}

  """
  
  """
type TaxProductResourceTaxBreakdown {
  """
  The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Specifies whether the tax amount is included in the line item amount.
  """
  inclusive: Boolean!
  """
  
  """
  tax_rate_details: TaxProductResourceTaxRateDetails!
  """
  The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
  """
  taxability_reason: String!
  """
  The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  taxable_amount: Int!
}

  """
  
  """
type TaxProductResourceTaxCalculationShippingCost {
  """
  The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  """
  amount: Int!
  """
  The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_tax: Int!
  """
  The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
  """
  shipping_rate: String
  """
  Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  """
  tax_behavior: String!
  """
  Detailed account of taxes relevant to shipping cost.
  """
  tax_breakdown: [TaxProductResourceLineItemTaxBreakdown]
  """
  The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
  """
  tax_code: String!
}

  """
  
  """
type TaxProductResourceTaxRateDetails {
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String
  """
  The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`.
  """
  percentage_decimal: String!
  """
  State, county, province, or region.
  """
  state: String
  """
  The tax type, such as `vat` or `sales_tax`.
  """
  tax_type: String
}

  """
  
  """
type TaxProductResourceTaxSettingsDefaults {
  """
  Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior.
  """
  tax_behavior: String
  """
  Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices.
  """
  tax_code: String
}

  """
  
  """
type TaxProductResourceTaxSettingsHeadOffice {
  """
  
  """
  address: Address!
}

  """
  
  """
type TaxProductResourceTaxSettingsStatusDetails {
  """
  
  """
  active: TaxProductResourceTaxSettingsStatusDetailsResourceActive
  """
  
  """
  pending: TaxProductResourceTaxSettingsStatusDetailsResourcePending
}

  """
  
  """
type TaxProductResourceTaxSettingsStatusDetailsResourcePending {
  """
  The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call.
  """
  missing_fields: [String]
}

  """
  
  """
type TaxProductResourceTaxTransactionLineItemResourceReversal {
  """
  The `id` of the line item to reverse in the original transaction.
  """
  original_line_item: String!
}

  """
  
  """
type TaxProductResourceTaxTransactionResourceReversal {
  """
  The `id` of the reversed `Transaction` object.
  """
  original_transaction: String
}

  """
  
  """
type TaxProductResourceTaxTransactionShippingCost {
  """
  The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  """
  amount: Int!
  """
  The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount_tax: Int!
  """
  The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
  """
  shipping_rate: String
  """
  Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  """
  tax_behavior: String!
  """
  The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
  """
  tax_code: String!
}

  """
  Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.

Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
  """
type TaxRate {
  """
  Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  """
  active: Boolean!
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  """
  description: String
  """
  The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
  """
  display_name: String!
  """
  Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
this percentage reflects the rate actually used to calculate tax based on the product's taxability
and whether the user is registered to collect taxes in the corresponding jurisdiction.
  """
  effective_percentage: Int
  """
  Unique identifier for the object.
  """
  id: String!
  """
  This specifies if the tax rate is inclusive or exclusive.
  """
  inclusive: Boolean!
  """
  The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  """
  jurisdiction: String
  """
  The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.
  """
  jurisdiction_level: String
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.
  """
  percentage: Int!
  """
  [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
  """
  state: String
  """
  The high-level tax type, such as `vat` or `sales_tax`.
  """
  tax_type: String
}

  """
  A Configurations object represents how features should be configured for terminal readers.
  """
type Terminal.configuration {
  """
  
  """
  bbpos_wisepos_e: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Whether this Configuration is the default for your account
  """
  is_account_default: Boolean
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String indicating the name of the Configuration object, set by the user
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  offline: TerminalConfigurationConfigurationResourceOfflineConfig
  """
  
  """
  tipping: TerminalConfigurationConfigurationResourceTipping
  """
  
  """
  verifone_p400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
}

  """
  A Connection Token is used by the Stripe Terminal SDK to connect to a reader.

Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
  """
type Terminal.connectionToken {
  """
  The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
  """
  location: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Your application should pass this token to the Stripe Terminal SDK.
  """
  secret: String!
}

  """
  A Location represents a grouping of readers.

Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
  """
type Terminal.location {
  """
  
  """
  address: Address!
  """
  The ID of a configuration that will be used to customize all readers in this location.
  """
  configuration_overrides: String
  """
  The display name of the location.
  """
  display_name: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  A Reader represents a physical device for accepting payment details.

Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
  """
type Terminal.reader {
  """
  The most recent action performed by the reader.
  """
  action: Type817
  """
  The current software version of the reader.
  """
  device_sw_version: String
  """
  Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, or `simulated_wisepos_e`.
  """
  device_type: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The local IP address of the reader.
  """
  ip_address: String
  """
  Custom label given to the reader for easier identification.
  """
  label: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The location identifier of the reader.
  """
  location: Type818
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Serial number of the reader.
  """
  serial_number: String!
  """
  The networking status of the reader.
  """
  status: String
}

  """
  
  """
type TerminalConfigurationConfigurationResourceCurrencySpecificConfig {
  """
  Fixed amounts displayed when collecting a tip
  """
  fixed_amounts: [Int]
  """
  Percentages displayed when collecting a tip
  """
  percentages: [Int]
  """
  Below this amount, fixed amounts will be displayed; above it, percentages will be displayed
  """
  smart_tip_threshold: Int
}

  """
  
  """
type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
  """
  A File ID representing an image you would like displayed on the reader.
  """
  splashscreen: Type819
}

  """
  
  """
type TerminalConfigurationConfigurationResourceOfflineConfig {
  """
  Determines whether to allow transactions to be collected while reader is offline. Defaults to false.
  """
  enabled: Boolean
}

  """
  
  """
type TerminalConfigurationConfigurationResourceTipping {
  """
  
  """
  aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  """
  
  """
  usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig
}

  """
  Represents a cart to be displayed on the reader
  """
type TerminalReaderReaderResourceCart {
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  List of line items in the cart.
  """
  line_items: [TerminalReaderReaderResourceLineItem]!
  """
  Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  tax: Int
  """
  Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  total: Int!
}

  """
  Represents a line item to be displayed on the reader
  """
type TerminalReaderReaderResourceLineItem {
  """
  The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int!
  """
  Description of the line item.
  """
  description: String!
  """
  The quantity of the line item.
  """
  quantity: Int!
}

  """
  Represents a per-transaction override of a reader configuration
  """
type TerminalReaderReaderResourceProcessConfig {
  """
  Enable customer initiated cancellation when processing this payment.
  """
  enable_customer_cancellation: Boolean
  """
  Override showing a tipping selection screen on this transaction.
  """
  skip_tipping: Boolean
  """
  Represents a per-transaction tipping configuration
  """
  tipping: TerminalReaderReaderResourceTippingConfig
}

  """
  Represents a reader action to process a payment intent
  """
type TerminalReaderReaderResourceProcessPaymentIntentAction {
  """
  Most recent PaymentIntent processed by the reader.
  """
  payment_intent: Type820!
  """
  Represents a per-transaction override of a reader configuration
  """
  process_config: TerminalReaderReaderResourceProcessConfig
}

  """
  Represents a per-setup override of a reader configuration
  """
type TerminalReaderReaderResourceProcessSetupConfig {
  """
  Enable customer initiated cancellation when processing this SetupIntent.
  """
  enable_customer_cancellation: Boolean
}

  """
  Represents a reader action to process a setup intent
  """
type TerminalReaderReaderResourceProcessSetupIntentAction {
  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String
  """
  Represents a per-setup override of a reader configuration
  """
  process_config: TerminalReaderReaderResourceProcessSetupConfig
  """
  Most recent SetupIntent processed by the reader.
  """
  setup_intent: Type821!
}

  """
  Represents an action performed by the reader
  """
type TerminalReaderReaderResourceReaderAction {
  """
  Failure code, only set if status is `failed`.
  """
  failure_code: String
  """
  Detailed failure message, only set if status is `failed`.
  """
  failure_message: String
  """
  Represents a reader action to process a payment intent
  """
  process_payment_intent: TerminalReaderReaderResourceProcessPaymentIntentAction
  """
  Represents a reader action to process a setup intent
  """
  process_setup_intent: TerminalReaderReaderResourceProcessSetupIntentAction
  """
  Represents a reader action to refund a payment
  """
  refund_payment: TerminalReaderReaderResourceRefundPaymentAction
  """
  Represents a reader action to set the reader display
  """
  set_reader_display: TerminalReaderReaderResourceSetReaderDisplayAction
  """
  Status of the action performed by the reader.
  """
  status: String!
  """
  Type of action performed by the reader.
  """
  type: String!
}

  """
  Represents a reader action to refund a payment
  """
type TerminalReaderReaderResourceRefundPaymentAction {
  """
  The amount being refunded.
  """
  amount: Int
  """
  Charge that is being refunded.
  """
  charge: Type822
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Payment intent that is being refunded.
  """
  payment_intent: Type823
  """
  The reason for the refund.
  """
  reason: String
  """
  Unique identifier for the refund object.
  """
  refund: Type824
  """
  Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  """
  refund_application_fee: Boolean
  """
  Represents a per-transaction override of a reader configuration
  """
  refund_payment_config: TerminalReaderReaderResourceRefundPaymentConfig
  """
  Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
  """
  reverse_transfer: Boolean
}

  """
  Represents a per-transaction override of a reader configuration
  """
type TerminalReaderReaderResourceRefundPaymentConfig {
  """
  Enable customer initiated cancellation when refunding this payment.
  """
  enable_customer_cancellation: Boolean
}

  """
  Represents a reader action to set the reader display
  """
type TerminalReaderReaderResourceSetReaderDisplayAction {
  """
  Cart object to be displayed by the reader.
  """
  cart: Type825
  """
  Type of information to be displayed by the reader.
  """
  type: String!
}

  """
  Represents a per-transaction tipping configuration
  """
type TerminalReaderReaderResourceTippingConfig {
  """
  Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency).
  """
  amount_eligible: Int
}

  """
  A test clock enables deterministic control over objects in testmode. With a test clock, you can create
objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
  """
type TestHelpers.testClock {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Time at which this clock is scheduled to auto delete.
  """
  deletes_after: Int!
  """
  Time at which all objects belonging to this clock are frozen.
  """
  frozen_time: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The custom name supplied at creation.
  """
  name: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The status of the Test Clock.
  """
  status: String!
}

  """
  
  """
type ThreeDSecureDetails {
  """
  For authenticated transactions: how the customer was authenticated by
the issuing bank.
  """
  authentication_flow: String
  """
  The Electronic Commerce Indicator (ECI). A protocol-level field
indicating what degree of authentication was performed.
  """
  electronic_commerce_indicator: String
  """
  Indicates the outcome of 3D Secure authentication.
  """
  result: String
  """
  Additional information about why 3D Secure succeeded or failed based
on the `result`.
  """
  result_reason: String
  """
  The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
(dsTransId) for this payment.
  """
  transaction_id: String
  """
  The version of 3D Secure that was used.
  """
  version: String
}

  """
  
  """
type ThreeDSecureDetailsCharge {
  """
  For authenticated transactions: how the customer was authenticated by
the issuing bank.
  """
  authentication_flow: String
  """
  The Electronic Commerce Indicator (ECI). A protocol-level field
indicating what degree of authentication was performed.
  """
  electronic_commerce_indicator: String
  """
  The exemption requested via 3DS and accepted by the issuer at authentication time.
  """
  exemption_indicator: String
  """
  Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
the outcome of Stripe's internal risk assessment.
  """
  exemption_indicator_applied: Boolean
  """
  Indicates the outcome of 3D Secure authentication.
  """
  result: String
  """
  Additional information about why 3D Secure succeeded or failed based
on the `result`.
  """
  result_reason: String
  """
  The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
(dsTransId) for this payment.
  """
  transaction_id: String
  """
  The version of 3D Secure that was used.
  """
  version: String
}

  """
  
  """
type ThreeDSecureUsage {
  """
  Whether 3D Secure is supported on this card.
  """
  supported: Boolean!
}

  """
  Tokenization is the process Stripe uses to collect sensitive card or bank
account details, or personally identifiable information (PII), directly from
your customers in a secure manner. A token representing this information is
returned to your server to use. Use our
[recommended payments integrations](https://stripe.com/docs/payments) to perform this process
on the client-side. This guarantees that no sensitive card data touches your server,
and allows your integration to operate in a PCI-compliant way.

If you can't use client-side tokenization, you can also create tokens using
the API with either your publishable or secret API key. If
your integration uses this method, you're responsible for any PCI compliance
that it might require, and you must keep your secret API key safe. Unlike with
client-side tokenization, your customer's information isn't sent directly to
Stripe, so we can't determine how it's handled or stored.

You can't store or use tokens more than once. To store card or bank account
information for later use, create [Customer](https://stripe.com/docs/api#customers)
objects or [Custom accounts](https://stripe.com/docs/api#external_accounts).
[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
performs best with integrations that use client-side tokenization.
  """
type Token {
  """
  These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank debits and transfers](https://stripe.com/docs/payments/bank-debits-transfers)
  """
  bank_account: BankAccount
  """
  You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
  """
  card: Card
  """
  IP address of the client that generates the token.
  """
  client_ip: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Type of the token: `account`, `bank_account`, `card`, or `pii`.
  """
  type: String!
  """
  Determines if you have already used this token (you can only use tokens once).
  """
  used: Boolean!
}

  """
  
  """
type TokenCardNetworks {
  """
  The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
  """
  preferred: String
}

  """
  To top up your Stripe balance, you create a top-up object. You can retrieve
individual top-ups, as well as list all top-ups. Top-ups are identified by a
unique, random ID.

Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
  """
type Topup {
  """
  Amount transferred.
  """
  amount: Int!
  """
  ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
  """
  balance_transaction: Type826
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
  """
  expected_availability_date: Int
  """
  Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String
  """
  Message to user further explaining reason for top-up failure if available.
  """
  failure_message: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The source field is deprecated. It might not always be present in the API response.
  """
  source: Type827
  """
  Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
  """
  statement_descriptor: String
  """
  The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
  """
  status: String!
  """
  A string that identifies this top-up as part of a group.
  """
  transfer_group: String
}

  """
  A `Transfer` object is created when you move funds between Stripe accounts as
part of Connect.

Before April 6, 2017, transfers also represented movement of funds from a
Stripe account to a card or bank account. This behavior has since been split
out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
information, read about the
[transfer/payout split](https://stripe.com/docs/transfer-payout-split).

Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
  """
type Transfer {
  """
  Amount in cents (or local equivalent) to be transferred.
  """
  amount: Int!
  """
  Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
  """
  amount_reversed: Int!
  """
  Balance transaction that describes the impact of this transfer on your account balance.
  """
  balance_transaction: Type828
  """
  Time that this record of the transfer was first created.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  ID of the Stripe account the transfer was sent to.
  """
  destination: Type829
  """
  If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
  """
  destination_payment: Type830
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  A list of reversals that have been applied to the transfer.
  """
  reversals: Type831!
  """
  Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
  """
  reversed: Boolean!
  """
  ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
  """
  source_transaction: Type832
  """
  The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String
  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  """
  transfer_group: String
}

  """
  
  """
type TransferData {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int
  """
  The account (if any) that the payment is attributed to for tax
reporting, and where funds from the payment are transferred to after
payment success.
  """
  destination: Type833!
}

  """
  [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
connected account, either entirely or partially, and can also specify whether
to refund any related application fees. Transfer reversals add to the
platform's balance and subtract from the destination account's balance.

Reversing a transfer that was made for a [destination
charge](/docs/connect/destination-charges) is allowed only up to the amount of
the charge. It is possible to reverse a
[transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
transfer only if the destination account has enough balance to cover the
reversal.

Related guide: [Reversing transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reversing-transfers)
  """
type TransferReversal {
  """
  Amount, in cents (or local equivalent).
  """
  amount: Int!
  """
  Balance transaction that describes the impact on your account balance.
  """
  balance_transaction: Type834
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  Linked payment refund for the transfer reversal.
  """
  destination_payment_refund: Type835
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  ID of the refund responsible for the transfer reversal.
  """
  source_refund: Type836
  """
  ID of the transfer that was reversed.
  """
  transfer: Type837!
}

  """
  
  """
type TransferSchedule {
  """
  The number of days charges for the account will be held before being paid out.
  """
  delay_days: Int!
  """
  How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
  """
  interval: String!
  """
  The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  """
  monthly_anchor: Int
  """
  The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
  """
  weekly_anchor: String
}

  """
  
  """
type TransformQuantity {
  """
  Divide usage by this number.
  """
  divide_by: Int!
  """
  After division, either round the result `up` or `down`.
  """
  round: String!
}

  """
  
  """
type TransformUsage {
  """
  Divide usage by this number.
  """
  divide_by: Int!
  """
  After division, either round the result `up` or `down`.
  """
  round: String!
}

  """
  You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  """
type Treasury.creditReversal {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The FinancialAccount to reverse funds from.
  """
  financial_account: String!
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The rails used to reverse the funds.
  """
  network: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ReceivedCredit being reversed.
  """
  received_credit: String!
  """
  Status of the CreditReversal
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryReceivedCreditsResourceStatusTransitions!
  """
  The Transaction associated with this object.
  """
  transaction: Type838
}

  """
  You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
  """
type Treasury.debitReversal {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  The FinancialAccount to reverse funds from.
  """
  financial_account: String
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Other flows linked to a DebitReversal.
  """
  linked_flows: Type839
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  The rails used to reverse the funds.
  """
  network: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The ReceivedDebit being reversed.
  """
  received_debit: String!
  """
  Status of the DebitReversal
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryReceivedDebitsResourceStatusTransitions!
  """
  The Transaction associated with this object.
  """
  transaction: Type840
}

  """
  Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
  """
type Treasury.financialAccount {
  """
  The array of paths to active Features in the Features hash.
  """
  active_features: [String]
  """
  Balance information for the FinancialAccount
  """
  balance: TreasuryFinancialAccountsResourceBalance!
  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
Stripe or the platform can control Features via the requested field.
  """
  features: Treasury.financialAccountFeatures
  """
  The set of credentials that resolve to a FinancialAccount.
  """
  financial_addresses: [TreasuryFinancialAccountsResourceFinancialAddress]!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The array of paths to pending Features in the Features hash.
  """
  pending_features: [String]
  """
  The set of functionalities that the platform can restrict on the FinancialAccount.
  """
  platform_restrictions: Type841
  """
  The array of paths to restricted Features in the Features hash.
  """
  restricted_features: [String]
  """
  The enum specifying what state the account is in.
  """
  status: String!
  """
  
  """
  status_details: TreasuryFinancialAccountsResourceStatusDetails!
  """
  The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
  """
  supported_currencies: [String]!
}

  """
  Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
Stripe or the platform can control Features via the requested field.
  """
type Treasury.financialAccountFeatures {
  """
  Toggle settings for enabling/disabling a feature
  """
  card_issuing: TreasuryFinancialAccountsResourceToggleSettings
  """
  Toggle settings for enabling/disabling a feature
  """
  deposit_insurance: TreasuryFinancialAccountsResourceToggleSettings
  """
  Settings related to Financial Addresses features on a Financial Account
  """
  financial_addresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures
  """
  InboundTransfers contains inbound transfers features for a FinancialAccount.
  """
  inbound_transfers: TreasuryFinancialAccountsResourceInboundTransfers
  """
  Toggle settings for enabling/disabling a feature
  """
  intra_stripe_flows: TreasuryFinancialAccountsResourceToggleSettings
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Settings related to Outbound Payments features on a Financial Account
  """
  outbound_payments: TreasuryFinancialAccountsResourceOutboundPayments
  """
  OutboundTransfers contains outbound transfers features for a FinancialAccount.
  """
  outbound_transfers: TreasuryFinancialAccountsResourceOutboundTransfers
}

  """
  Use [InboundTransfers](https://stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
  """
type Treasury.inboundTransfer {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Returns `true` if the InboundTransfer is able to be canceled.
  """
  cancelable: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  Details about this InboundTransfer's failure. Only set when status is `failed`.
  """
  failure_details: Type842
  """
  The FinancialAccount that received the funds.
  """
  financial_account: String!
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  
  """
  linked_flows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The origin payment method to be debited for an InboundTransfer.
  """
  origin_payment_method: String!
  """
  Details about the PaymentMethod for an InboundTransfer.
  """
  origin_payment_method_details: Type843
  """
  Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.
  """
  returned: Boolean
  """
  Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.
  """
  statement_descriptor: String!
  """
  Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions!
  """
  The Transaction associated with this object.
  """
  transaction: Type844
}

  """
  Use OutboundPayments to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).

Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
  """
type Treasury.outboundPayment {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Returns `true` if the object can be canceled, and `false` otherwise.
  """
  cancelable: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.
  """
  customer: String
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.
  """
  destination_payment_method: String
  """
  Details about the PaymentMethod for an OutboundPayment.
  """
  destination_payment_method_details: Type845
  """
  Details about the end user.
  """
  end_user_details: Type846
  """
  The date when funds are expected to arrive in the destination account.
  """
  expected_arrival_date: Int!
  """
  The FinancialAccount that funds were pulled from.
  """
  financial_account: String!
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Details about a returned OutboundPayment. Only set when the status is `returned`.
  """
  returned_details: Type847
  """
  The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
  """
  statement_descriptor: String!
  """
  Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions!
  """
  The Transaction associated with this object.
  """
  transaction: Type848!
}

  """
  Use OutboundTransfers to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.

Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
  """
type Treasury.outboundTransfer {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Returns `true` if the object can be canceled, and `false` otherwise.
  """
  cancelable: Boolean!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  """
  The PaymentMethod used as the payment instrument for an OutboundTransfer.
  """
  destination_payment_method: String
  """
  
  """
  destination_payment_method_details: OutboundTransfersPaymentMethodDetails!
  """
  The date when funds are expected to arrive in the destination account.
  """
  expected_arrival_date: Int!
  """
  The FinancialAccount that funds were pulled from.
  """
  financial_account: String!
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Details about a returned OutboundTransfer. Only set when the status is `returned`.
  """
  returned_details: Type849
  """
  Information about the OutboundTransfer to be sent to the recipient account.
  """
  statement_descriptor: String!
  """
  Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryOutboundTransfersResourceStatusTransitions!
  """
  The Transaction associated with this object.
  """
  transaction: Type850!
}

  """
  ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
  """
type Treasury.receivedCredit {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String!
  """
  Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
  """
  failure_code: String
  """
  The FinancialAccount that received the funds.
  """
  financial_account: String
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  
  """
  initiating_payment_method_details: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
  """
  
  """
  linked_flows: TreasuryReceivedCreditsResourceLinkedFlows!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The rails used to send the funds.
  """
  network: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Details describing when a ReceivedCredit may be reversed.
  """
  reversal_details: Type851
  """
  Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
  """
  status: String!
  """
  The Transaction associated with this object.
  """
  transaction: Type852
}

  """
  ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
  """
type Treasury.receivedDebit {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String!
  """
  Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
  """
  failure_code: String
  """
  The FinancialAccount that funds were pulled from.
  """
  financial_account: String
  """
  A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  """
  hosted_regulatory_receipt_url: String
  """
  Unique identifier for the object.
  """
  id: String!
  """
  
  """
  initiating_payment_method_details: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
  """
  
  """
  linked_flows: TreasuryReceivedDebitsResourceLinkedFlows!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  The network used for the ReceivedDebit.
  """
  network: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Details describing when a ReceivedDebit might be reversed.
  """
  reversal_details: Type853
  """
  Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
  """
  status: String!
  """
  The Transaction associated with this object.
  """
  transaction: Type854
}

  """
  Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
  """
type Treasury.transaction {
  """
  Amount (in cents) transferred.
  """
  amount: Int!
  """
  Change to a FinancialAccount's balance
  """
  balance_impact: TreasuryTransactionsResourceBalanceImpact!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String!
  """
  A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
  """
  entries: Type855
  """
  The FinancialAccount associated with this object.
  """
  financial_account: String!
  """
  ID of the flow that created the Transaction.
  """
  flow: String
  """
  Details of the flow that created the Transaction.
  """
  flow_details: Type856
  """
  Type of the flow that created the Transaction.
  """
  flow_type: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Status of the Transaction.
  """
  status: String!
  """
  
  """
  status_transitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions!
}

  """
  TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
  """
type Treasury.transactionEntry {
  """
  Change to a FinancialAccount's balance
  """
  balance_impact: TreasuryTransactionsResourceBalanceImpact!
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String!
  """
  When the TransactionEntry will impact the FinancialAccount's balance.
  """
  effective_at: Int!
  """
  The FinancialAccount associated with this object.
  """
  financial_account: String!
  """
  Token of the flow associated with the TransactionEntry.
  """
  flow: String
  """
  Details of the flow associated with the TransactionEntry.
  """
  flow_details: Type857
  """
  Type of the flow associated with the TransactionEntry.
  """
  flow_type: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The Transaction associated with this object.
  """
  transaction: Type858!
  """
  The specific money movement that generated the TransactionEntry.
  """
  type: String!
}

  """
  ABA Records contain U.S. bank account details per the ABA format.
  """
type TreasuryFinancialAccountsResourceAbaRecord {
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String!
  """
  The account number.
  """
  account_number: String
  """
  The last four characters of the account number.
  """
  account_number_last4: String!
  """
  Name of the bank.
  """
  bank_name: String!
  """
  Routing number for the account.
  """
  routing_number: String!
}

  """
  Toggle settings for enabling/disabling the ABA address feature
  """
type TreasuryFinancialAccountsResourceAbaToggleSettings {
  """
  Whether the FinancialAccount should have the Feature.
  """
  requested: Boolean!
  """
  Whether the Feature is operational.
  """
  status: String!
  """
  Additional details; includes at least one entry when the status is not `active`.
  """
  status_details: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails]!
}

  """
  Toggle settings for enabling/disabling an ACH specific feature
  """
type TreasuryFinancialAccountsResourceAchToggleSettings {
  """
  Whether the FinancialAccount should have the Feature.
  """
  requested: Boolean!
  """
  Whether the Feature is operational.
  """
  status: String!
  """
  Additional details; includes at least one entry when the status is not `active`.
  """
  status_details: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails]!
}

  """
  Balance information for the FinancialAccount
  """
type TreasuryFinancialAccountsResourceBalance {
  """
  Funds the user can spend right now.
  """
  cash: JSON!
  """
  Funds not spendable yet, but will become available at a later time.
  """
  inbound_pending: JSON!
  """
  Funds in the account, but not spendable because they are being held for pending outbound flows.
  """
  outbound_pending: JSON!
}

  """
  
  """
type TreasuryFinancialAccountsResourceClosedStatusDetails {
  """
  The array that contains reasons for a FinancialAccount closure.
  """
  reasons: [String]!
}

  """
  FinancialAddresses contain identifying information that resolves to a FinancialAccount.
  """
type TreasuryFinancialAccountsResourceFinancialAddress {
  """
  ABA Records contain U.S. bank account details per the ABA format.
  """
  aba: TreasuryFinancialAccountsResourceAbaRecord
  """
  The list of networks that the address supports
  """
  supported_networks: [String]
  """
  The type of financial address
  """
  type: String!
}

  """
  Settings related to Financial Addresses features on a Financial Account
  """
type TreasuryFinancialAccountsResourceFinancialAddressesFeatures {
  """
  Toggle settings for enabling/disabling the ABA address feature
  """
  aba: TreasuryFinancialAccountsResourceAbaToggleSettings
}

  """
  InboundTransfers contains inbound transfers features for a FinancialAccount.
  """
type TreasuryFinancialAccountsResourceInboundTransfers {
  """
  Toggle settings for enabling/disabling an ACH specific feature
  """
  ach: TreasuryFinancialAccountsResourceAchToggleSettings
}

  """
  Settings related to Outbound Payments features on a Financial Account
  """
type TreasuryFinancialAccountsResourceOutboundPayments {
  """
  Toggle settings for enabling/disabling an ACH specific feature
  """
  ach: TreasuryFinancialAccountsResourceAchToggleSettings
  """
  Toggle settings for enabling/disabling a feature
  """
  us_domestic_wire: TreasuryFinancialAccountsResourceToggleSettings
}

  """
  OutboundTransfers contains outbound transfers features for a FinancialAccount.
  """
type TreasuryFinancialAccountsResourceOutboundTransfers {
  """
  Toggle settings for enabling/disabling an ACH specific feature
  """
  ach: TreasuryFinancialAccountsResourceAchToggleSettings
  """
  Toggle settings for enabling/disabling a feature
  """
  us_domestic_wire: TreasuryFinancialAccountsResourceToggleSettings
}

  """
  Restrictions that a Connect Platform has placed on this FinancialAccount.
  """
type TreasuryFinancialAccountsResourcePlatformRestrictions {
  """
  Restricts all inbound money movement.
  """
  inbound_flows: String
  """
  Restricts all outbound money movement.
  """
  outbound_flows: String
}

  """
  
  """
type TreasuryFinancialAccountsResourceStatusDetails {
  """
  Details related to the closure of this FinancialAccount
  """
  closed: Type859
}

  """
  Toggle settings for enabling/disabling a feature
  """
type TreasuryFinancialAccountsResourceToggleSettings {
  """
  Whether the FinancialAccount should have the Feature.
  """
  requested: Boolean!
  """
  Whether the Feature is operational.
  """
  status: String!
  """
  Additional details; includes at least one entry when the status is not `active`.
  """
  status_details: [TreasuryFinancialAccountsResourceTogglesSettingStatusDetails]!
}

  """
  Additional details on the FinancialAccount Features information.
  """
type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
  """
  Represents the reason why the status is `pending` or `restricted`.
  """
  code: String!
  """
  Represents what the user should do, if anything, to activate the Feature.
  """
  resolution: String
  """
  The `platform_restrictions` that are restricting this Feature.
  """
  restriction: String
}

  """
  
  """
type TreasuryInboundTransfersResourceFailureDetails {
  """
  Reason for the failure.
  """
  code: String!
}

  """
  
  """
type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
  """
  If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return.
  """
  received_debit: String
}

  """
  
  """
type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
  """
  Timestamp describing when an InboundTransfer changed status to `canceled`.
  """
  canceled_at: Int
  """
  Timestamp describing when an InboundTransfer changed status to `failed`.
  """
  failed_at: Int
  """
  Timestamp describing when an InboundTransfer changed status to `succeeded`.
  """
  succeeded_at: Int
}

  """
  
  """
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
  """
  IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.
  """
  ip_address: String
  """
  `true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`.
  """
  present: Boolean!
}

  """
  
  """
type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
  """
  Timestamp describing when an OutboundPayment changed status to `canceled`.
  """
  canceled_at: Int
  """
  Timestamp describing when an OutboundPayment changed status to `failed`.
  """
  failed_at: Int
  """
  Timestamp describing when an OutboundPayment changed status to `posted`.
  """
  posted_at: Int
  """
  Timestamp describing when an OutboundPayment changed status to `returned`.
  """
  returned_at: Int
}

  """
  
  """
type TreasuryOutboundPaymentsResourceReturnedStatus {
  """
  Reason for the return.
  """
  code: String!
  """
  The Transaction associated with this object.
  """
  transaction: Type860!
}

  """
  
  """
type TreasuryOutboundTransfersResourceReturnedDetails {
  """
  Reason for the return.
  """
  code: String!
  """
  The Transaction associated with this object.
  """
  transaction: Type861!
}

  """
  
  """
type TreasuryOutboundTransfersResourceStatusTransitions {
  """
  Timestamp describing when an OutboundTransfer changed status to `canceled`
  """
  canceled_at: Int
  """
  Timestamp describing when an OutboundTransfer changed status to `failed`
  """
  failed_at: Int
  """
  Timestamp describing when an OutboundTransfer changed status to `posted`
  """
  posted_at: Int
  """
  Timestamp describing when an OutboundTransfer changed status to `returned`
  """
  returned_at: Int
}

  """
  
  """
type TreasuryReceivedCreditsResourceLinkedFlows {
  """
  The CreditReversal created as a result of this ReceivedCredit being reversed.
  """
  credit_reversal: String
  """
  Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
  """
  issuing_authorization: String
  """
  Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
  """
  issuing_transaction: String
  """
  ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
  """
  source_flow: String
  """
  The expandable object of the source flow.
  """
  source_flow_details: Type862
  """
  The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
  """
  source_flow_type: String
}

  """
  
  """
type TreasuryReceivedCreditsResourceReversalDetails {
  """
  Time before which a ReceivedCredit can be reversed.
  """
  deadline: Int
  """
  Set if a ReceivedCredit cannot be reversed.
  """
  restricted_reason: String
}

  """
  
  """
type TreasuryReceivedCreditsResourceSourceFlowsDetails {
  """
  You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  """
  credit_reversal: Treasury.creditReversal
  """
  Use OutboundPayments to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).

Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
  """
  outbound_payment: Treasury.outboundPayment
  """
  A `Payout` object is created when you receive funds from Stripe, or when you
initiate a payout to either a bank account or debit card of a [connected
Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
and list all payouts. Payouts are made on [varying
schedules](/docs/connect/manage-payout-schedule), depending on your country and
industry.

Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
  """
  payout: Payout
  """
  The type of the source flow that originated the ReceivedCredit.
  """
  type: String!
}

  """
  
  """
type TreasuryReceivedCreditsResourceStatusTransitions {
  """
  Timestamp describing when the CreditReversal changed status to `posted`
  """
  posted_at: Int
}

  """
  
  """
type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
  """
  Set if there is an Issuing dispute associated with the DebitReversal.
  """
  issuing_dispute: String
}

  """
  
  """
type TreasuryReceivedDebitsResourceLinkedFlows {
  """
  The DebitReversal created as a result of this ReceivedDebit being reversed.
  """
  debit_reversal: String
  """
  Set if the ReceivedDebit is associated with an InboundTransfer's return of funds.
  """
  inbound_transfer: String
  """
  Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
  """
  issuing_authorization: String
  """
  Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object.
  """
  issuing_transaction: String
  """
  Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object.
  """
  payout: String
}

  """
  
  """
type TreasuryReceivedDebitsResourceReversalDetails {
  """
  Time before which a ReceivedDebit can be reversed.
  """
  deadline: Int
  """
  Set if a ReceivedDebit can't be reversed.
  """
  restricted_reason: String
}

  """
  
  """
type TreasuryReceivedDebitsResourceStatusTransitions {
  """
  Timestamp describing when the DebitReversal changed status to `completed`.
  """
  completed_at: Int
}

  """
  
  """
type TreasurySharedResourceBillingDetails {
  """
  
  """
  address: Address!
  """
  Email address.
  """
  email: String
  """
  Full name.
  """
  name: String
}

  """
  
  """
type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
  """
  Set when `type` is `balance`.
  """
  balance: String
  """
  
  """
  billing_details: TreasurySharedResourceBillingDetails!
  """
  
  """
  financial_account: ReceivedPaymentMethodDetailsFinancialAccount
  """
  Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
  """
  issuing_card: String
  """
  Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
  """
  type: String!
  """
  
  """
  us_bank_account: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount
}

  """
  
  """
type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
  """
  Bank name.
  """
  bank_name: String
  """
  The last four digits of the bank account number.
  """
  last4: String
  """
  The routing number for the bank account.
  """
  routing_number: String
}

  """
  
  """
type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
  """
  Timestamp describing when the Transaction changed status to `posted`.
  """
  posted_at: Int
  """
  Timestamp describing when the Transaction changed status to `void`.
  """
  void_at: Int
}

  """
  Change to a FinancialAccount's balance
  """
type TreasuryTransactionsResourceBalanceImpact {
  """
  The change made to funds the user can spend right now.
  """
  cash: Int!
  """
  The change made to funds that are not spendable yet, but will become available at a later time.
  """
  inbound_pending: Int!
  """
  The change made to funds in the account, but not spendable because they are being held for pending outbound flows.
  """
  outbound_pending: Int!
}

  """
  
  """
type TreasuryTransactionsResourceFlowDetails {
  """
  You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  """
  credit_reversal: Treasury.creditReversal
  """
  You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
  """
  debit_reversal: Treasury.debitReversal
  """
  Use [InboundTransfers](https://stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
  """
  inbound_transfer: Treasury.inboundTransfer
  """
  When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
purchase to be completed successfully.

Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
  """
  issuing_authorization: Issuing.authorization
  """
  Use OutboundPayments to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).

Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
  """
  outbound_payment: Treasury.outboundPayment
  """
  Use OutboundTransfers to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.

Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
  """
  outbound_transfer: Treasury.outboundTransfer
  """
  ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
  """
  received_credit: Treasury.receivedCredit
  """
  ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
  """
  received_debit: Treasury.receivedDebit
  """
  Type of the flow that created the Transaction. Set to the same value as `flow_type`.
  """
  type: String!
}

  """
  
  """
type Type1 {
  data: [Account]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type10 {
  data: [ApplicationFee]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type105 {
  """
  Details about each object.
  """
  data: [LineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type106 {
  """
  Details about each object.
  """
  data: [LineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type108 {
  data: [Issuing.authorization]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type11 {
  """
  Details about each object.
  """
  data: [FeeRefund]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type110 {
  data: [Issuing.cardholder]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type112 {
  data: [Issuing.card]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type114 {
  data: [Issuing.dispute]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type116 {
  data: [Issuing.personalizationDesign]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type117 {
  data: [Issuing.physicalBundle]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type119 {
  data: [Issuing.settlement]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type121 {
  data: [Issuing.token]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type123 {
  data: [Issuing.transaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type125 {
  """
  Details about each object.
  """
  data: [FinancialConnections.account]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type126 {
  """
  Details about each object.
  """
  data: [FinancialConnections.accountOwner]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type128 {
  data: [PaymentIntent]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type129 {
  data: [PaymentIntent]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  
  """
type Type13 {
  data: [Apps.secret]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type130 {
  data: [PaymentLink]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type131 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type133 {
  data: [PaymentMethodConfiguration]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type134 {
  data: [PaymentMethodDomain]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type135 {
  data: [PaymentMethod]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type138 {
  data: [Payout]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type140 {
  """
  Details about each object.
  """
  data: [Plan]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type143 {
  """
  Details about each object.
  """
  data: [Price]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type144 {
  data: [Price]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  
  """
type Type146 {
  """
  Details about each object.
  """
  data: [Product]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type147 {
  data: [Product]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  
  """
type Type149 {
  data: [PromotionCode]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type150 {
  data: [Quote]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type151 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type152 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type154 {
  data: [Radar.earlyFraudWarning]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type156 {
  data: [Radar.valueListItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type158 {
  data: [Radar.valueList]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type16 {
  data: [BalanceTransaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type160 {
  data: [Refund]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type162 {
  data: [Reporting.reportRun]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type163 {
  data: [Reporting.reportType]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type165 {
  data: [Review]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type167 {
  data: [SetupAttempt]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type169 {
  data: [SetupIntent]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type171 {
  data: [ShippingRate]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type172 {
  data: [ScheduledQueryRun]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type173 {
  data: [SourceTransaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type174 {
  data: [SubscriptionItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type175 {
  data: [UsageRecordSummary]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type18 {
  data: [BalanceTransaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type180 {
  data: [SubscriptionSchedule]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type185 {
  data: [Subscription]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type186 {
  data: [Subscription]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  
  """
type Type187 {
  """
  Details about each object.
  """
  data: [Tax.calculationLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type188 {
  data: [Tax.registration]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type189 {
  """
  Details about each object.
  """
  data: [Tax.transactionLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type19 {
  data: [Billing.meter]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type190 {
  data: [TaxCode]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type192 {
  """
  Details about each object.
  """
  data: [TaxId]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type194 {
  data: [TaxRate]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type195 {
  data: [Terminal.configuration]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type197 {
  data: [Terminal.location]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type199 {
  """
  A list of readers
  """
  data: [Terminal.reader]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type2 {
  data: [Capability]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type20 {
  data: [Billing.meterEventSummary]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type201 {
  data: [TestHelpers.testClock]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type204 {
  data: [Topup]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type206 {
  """
  Details about each object.
  """
  data: [Transfer]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type207 {
  """
  Details about each object.
  """
  data: [TransferReversal]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type208 {
  """
  Details about each object.
  """
  data: [Treasury.creditReversal]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type209 {
  """
  Details about each object.
  """
  data: [Treasury.debitReversal]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type21 {
  data: [BillingPortal.configuration]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type211 {
  data: [Treasury.financialAccount]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type212 {
  """
  Details about each object.
  """
  data: [Treasury.inboundTransfer]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type214 {
  """
  Details about each object.
  """
  data: [Treasury.outboundPayment]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type215 {
  """
  Details about each object.
  """
  data: [Treasury.outboundTransfer]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type217 {
  """
  Details about each object.
  """
  data: [Treasury.receivedCredit]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type218 {
  """
  Details about each object.
  """
  data: [Treasury.receivedDebit]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type221 {
  """
  Details about each object.
  """
  data: [Treasury.transactionEntry]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type224 {
  """
  Details about each object.
  """
  data: [Treasury.transaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type225 {
  data: [WebhookEndpoint]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
  """
type Type227 {
  """
  The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
  """
  data: [Type0]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type23 {
  data: [Charge]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type24 {
  data: [Charge]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  A list of refunds that have been applied to the fee.
  """
type Type240 {
  """
  Details about each object.
  """
  data: [FeeRefund]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type25 {
  """
  Details about each object.
  """
  data: [Refund]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  A list of refunds that have been applied to the charge.
  """
type Type267 {
  """
  Details about each object.
  """
  data: [Refund]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type28 {
  data: [Checkout.session]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The line items purchased by the customer.
  """
type Type283 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type29 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type3 {
  """
  The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
  """
  data: [Type0]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type30 {
  data: [Climate.order]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  Line items that make up the credit note
  """
type Type305 {
  """
  Details about each object.
  """
  data: [CreditNoteLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type31 {
  data: [Climate.product]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The customer's payment sources, if any.
  """
type Type315 {
  """
  Details about each object.
  """
  data: [Type0]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The customer's current subscriptions, if any.
  """
type Type316 {
  """
  Details about each object.
  """
  data: [Subscription]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The customer's tax IDs.
  """
type Type317 {
  """
  Details about each object.
  """
  data: [TaxId]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type32 {
  data: [Climate.supplier]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type33 {
  data: [CountrySpec]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type333 {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type Type334 {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type Type335 {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type Type336 {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  """
  Always true for a deleted object
  """
  deleted: Boolean!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
}

  """
  
  """
type Type35 {
  data: [Coupon]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank debits and transfers](https://stripe.com/docs/payments/bank-debits-transfers)
  """
type Type353 {
  """
  The ID of the account that the bank account is associated with.
  """
  account: Type0
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String
  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String
  """
  The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String
  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String!
  """
  The ID of the customer that the bank account is associated with.
  """
  customer: Type0
  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
  """
  future_requirements: Type0
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the bank account number.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Information about the requirements for the bank account, including what information needs to be collected.
  """
  requirements: Type0
  """
  The routing transit number for the bank account.
  """
  routing_number: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.

For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
  """
  status: String!
}

  """
  You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
  """
type Type354 {
  """
  The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
  """
  account: Type0
  """
  City/District/Suburb/Town/Village.
  """
  address_city: String
  """
  Billing address country, if provided when creating card.
  """
  address_country: String
  """
  Address line 1 (Street address/PO Box/Company name).
  """
  address_line1: String
  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  Address line 2 (Apartment/Suite/Unit/Building).
  """
  address_line2: String
  """
  State/County/Province/Region.
  """
  address_state: String
  """
  ZIP or postal code.
  """
  address_zip: String
  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String
  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String!
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  """
  The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
  """
  customer: Type0
  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String
  """
  Whether this card is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the card.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Cardholder name.
  """
  name: String
  """
  
  """
  networks: TokenCardNetworks
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
  """
  status: String
  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

  """
  A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  """
type Type357 {
  """
  Details about each object.
  """
  data: [FileLink]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  A paginated list of owners for this account.
  """
type Type365 {
  """
  Details about each object.
  """
  data: [FinancialConnections.accountOwner]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The accounts that were collected as part of this Session.
  """
type Type367 {
  """
  Details about each object.
  """
  data: [FinancialConnections.account]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type37 {
  data: [CreditNote]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
  """
type Type400 {
  """
  Details about each object.
  """
  data: [LineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type42 {
  """
  Details about each object.
  """
  data: [CreditNoteLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type43 {
  """
  Details about each object.
  """
  data: [CreditNoteLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type45 {
  data: [Customer]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type46 {
  data: [Customer]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  
  """
type Type48 {
  """
  Details about each object.
  """
  data: [CustomerBalanceTransaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type49 {
  """
  Details about each object.
  """
  data: [BankAccount]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type5 {
  data: [Person]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type50 {
  data: [Card]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  Customers with certain payments enabled have a cash balance, representing funds that were paid
by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
to payments, and refunds to the customer.
  """
type Type51 {
  """
  Details about each object.
  """
  data: [CustomerCashBalanceTransaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type52 {
  data: [PaymentMethod]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type53 {
  """
  Details about each object.
  """
  data: [Type0]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type54 {
  """
  Details about each object.
  """
  data: [Subscription]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type55 {
  """
  Details about each object.
  """
  data: [TaxId]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type57 {
  data: [Dispute]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The line items representing what is being sold.
  """
type Type570 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type59 {
  data: [Event]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type60 {
  data: [ExchangeRate]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type62 {
  """
  Details about each object.
  """
  data: [FileLink]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type64 {
  data: [File]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  This is an object representing a Stripe account. You can retrieve it to see
properties on the account like its current requirements or if the account is
enabled to make live charges or receive payouts.

For Custom accounts, the properties below are always returned. For other accounts, some properties are returned until that
account has started to go through Connect Onboarding. Once you create an [Account Link](https://stripe.com/docs/api/account_links) or [Account Session](https://stripe.com/docs/api/account_sessions),
some properties are only returned for Custom accounts. Learn about the differences [between accounts](https://stripe.com/docs/connect/accounts).
  """
type Type645 {
  """
  Business information about the account.
  """
  business_profile: Type0
  """
  The business type. Once you create an [Account Link](https://stripe.com/docs/api/account_links) or [Account Session](https://stripe.com/docs/api/account_sessions), this property is only returned for Custom accounts.
  """
  business_type: String
  """
  
  """
  capabilities: AccountCapabilities
  """
  Whether the account can create live charges.
  """
  charges_enabled: Boolean
  """
  
  """
  company: LegalEntityCompany
  """
  
  """
  controller: AccountUnificationAccountController
  """
  The account's country.
  """
  country: String
  """
  Time at which the account was connected. Measured in seconds since the Unix epoch.
  """
  created: Int
  """
  Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  """
  default_currency: String
  """
  Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
  """
  details_submitted: Boolean
  """
  An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
  """
  email: String
  """
  External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
  """
  external_accounts: Type0
  """
  
  """
  future_requirements: AccountFutureRequirements
  """
  Unique identifier for the object.
  """
  id: String!
  """
  This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform prefilling and account onboarding steps.

Related guide: [Handling identity verification with the API](https://stripe.com/docs/connect/handling-api-verification#person-information)
  """
  individual: Person
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Whether Stripe can send payouts to this account.
  """
  payouts_enabled: Boolean
  """
  
  """
  requirements: AccountRequirements
  """
  Options for customizing how the account functions within Stripe.
  """
  settings: Type0
  """
  
  """
  tos_acceptance: AccountTosAcceptance
  """
  The Stripe account type. Can be `standard`, `express`, or `custom`.
  """
  type: String
}

  """
  These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank debits and transfers](https://stripe.com/docs/payments/bank-debits-transfers)
  """
type Type646 {
  """
  The ID of the account that the bank account is associated with.
  """
  account: Type0
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String
  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String
  """
  The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  """
  account_type: String
  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String!
  """
  The ID of the customer that the bank account is associated with.
  """
  customer: Type0
  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  """
  Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
  """
  future_requirements: Type0
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the bank account number.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Information about the requirements for the bank account, including what information needs to be collected.
  """
  requirements: Type0
  """
  The routing transit number for the bank account.
  """
  routing_number: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.

For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
  """
  status: String!
}

  """
  You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
  """
type Type647 {
  """
  The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
  """
  account: Type0
  """
  City/District/Suburb/Town/Village.
  """
  address_city: String
  """
  Billing address country, if provided when creating card.
  """
  address_country: String
  """
  Address line 1 (Street address/PO Box/Company name).
  """
  address_line1: String
  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String
  """
  Address line 2 (Apartment/Suite/Unit/Building).
  """
  address_line2: String
  """
  State/County/Province/Region.
  """
  address_state: String
  """
  ZIP or postal code.
  """
  address_zip: String
  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String
  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [String]
  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String!
  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String
  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  """
  The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
  """
  customer: Type0
  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String
  """
  Whether this card is the default external account for its currency.
  """
  default_for_currency: Boolean
  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  """
  Two-digit number representing the card's expiration month.
  """
  exp_month: Int!
  """
  Four-digit number representing the card's expiration year.
  """
  exp_year: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.

*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  """
  fingerprint: String
  """
  Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  """
  funding: String!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The last four digits of the card.
  """
  last4: String!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Cardholder name.
  """
  name: String
  """
  
  """
  networks: TokenCardNetworks
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
  """
  status: String
  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

  """
  `Source` objects allow you to accept a variety of payment methods. They
represent a customer's payment instrument, and can be used with the Stripe API
just like a `Card` object: once chargeable, they can be charged, or can be
attached to customers.

Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
This newer API provides access to our latest features and payment method types.

Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  """
type Type648 {
  ach_credit_transfer: SourceTypeAchCreditTransfer
  ach_debit: SourceTypeAchDebit
  acss_debit: SourceTypeAcssDebit
  alipay: SourceTypeAlipay
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  amount: Int
  au_becs_debit: SourceTypeAuBecsDebit
  bancontact: SourceTypeBancontact
  card: SourceTypeCard
  card_present: SourceTypeCardPresent
  """
  The client secret of the source. Used for client-side retrieval using a publishable key.
  """
  client_secret: String!
  """
  
  """
  code_verification: SourceCodeVerificationFlow
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  currency: String
  """
  The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  """
  customer: String
  eps: SourceTypeEps
  """
  The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  """
  flow: String!
  giropay: SourceTypeGiropay
  """
  Unique identifier for the object.
  """
  id: String!
  ideal: SourceTypeIdeal
  klarna: SourceTypeKlarna
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  multibanco: SourceTypeMultibanco
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  Information about the owner of the payment instrument that may be used or required by particular source types.
  """
  owner: Type0
  p24: SourceTypeP24
  """
  
  """
  receiver: SourceReceiverFlow
  """
  
  """
  redirect: SourceRedirectFlow
  sepa_debit: SourceTypeSepaDebit
  sofort: SourceTypeSofort
  """
  
  """
  source_order: SourceOrder
  """
  Extra information about a source. This will appear on your customer's statement every time you charge the source.
  """
  statement_descriptor: String
  """
  The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  """
  status: String!
  three_d_secure: SourceTypeThreeDSecure
  """
  The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  """
  type: String!
  """
  Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  """
  usage: String
  wechat: SourceTypeWechat
}

  """
  
  """
type Type66 {
  """
  Details about each object.
  """
  data: [FinancialConnections.account]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type67 {
  """
  Details about each object.
  """
  data: [FinancialConnections.accountOwner]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  A list of items the customer is being quoted for.
  """
type Type681 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  """
type Type691 {
  """
  Details about each object.
  """
  data: [Item]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  List of items contained within this value list.
  """
type Type694 {
  """
  Details about each object.
  """
  data: [Radar.valueListItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type7 {
  data: [Person]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type70 {
  """
  Details about each object.
  """
  data: [FinancialConnections.transaction]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  List of ForwardingRequest data.
  """
type Type72 {
  data: [Forwarding.request]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type74 {
  data: [Identity.verificationReport]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type76 {
  data: [Identity.verificationSession]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  List of subscription items, each with an attached price.
  """
type Type760 {
  """
  Details about each object.
  """
  data: [SubscriptionItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type78 {
  data: [Invoiceitem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type8 {
  data: [ApplePayDomain]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The list of items the customer is purchasing.
  """
type Type802 {
  """
  Details about each object.
  """
  data: [Tax.calculationLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  The tax collected or refunded, by line item.
  """
type Type805 {
  """
  Details about each object.
  """
  data: [Tax.transactionLineItem]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type81 {
  data: [Invoice]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type Type82 {
  data: [Invoice]!
  has_more: Boolean!
  next_page: String
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The total number of objects that match the query, only accurate up to 10,000.
  """
  total_count: Int
  url: String!
}

  """
  A list of reversals that have been applied to the transfer.
  """
type Type831 {
  """
  Details about each object.
  """
  data: [TransferReversal]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
  """
type Type855 {
  """
  Details about each object.
  """
  data: [Treasury.transactionEntry]!
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: String!
  """
  The URL where this list can be accessed.
  """
  url: String!
}

  """
  
  """
type UsBankAccountNetworks {
  """
  The preferred network.
  """
  preferred: String
  """
  All supported networks.
  """
  supported: [String]!
}

  """
  Usage records allow you to report customer usage and metrics to Stripe for
metered billing of subscription prices.

Related guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)
  """
type UsageRecord {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The usage quantity for the specified date.
  """
  quantity: Int!
  """
  The ID of the subscription item this usage record contains data for.
  """
  subscription_item: String!
  """
  The timestamp when this usage occurred.
  """
  timestamp: Int!
}

  """
  
  """
type UsageRecordSummary {
  """
  Unique identifier for the object.
  """
  id: String!
  """
  The invoice in which this usage period has been billed for.
  """
  invoice: String
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  
  """
  period: Period!
  """
  The ID of the subscription item this summary is describing.
  """
  subscription_item: String!
  """
  The total usage within this usage period.
  """
  total_usage: Int!
}

  """
  
  """
type VerificationSessionRedaction {
  """
  Indicates whether this object and its related objects have been redacted or not.
  """
  status: String!
}

  """
  You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
notified about events that happen in your Stripe account or connected
accounts.

Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.

Related guide: [Setting up webhooks](https://stripe.com/docs/webhooks/configure)
  """
type WebhookEndpoint {
  """
  The API version events are rendered as for this webhook endpoint.
  """
  api_version: String
  """
  The ID of the associated Connect application.
  """
  application: String
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!
  """
  An optional description of what the webhook is used for.
  """
  description: String
  """
  The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
  """
  enabled_events: [String]!
  """
  Unique identifier for the object.
  """
  id: String!
  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean!
  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON!
  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: String!
  """
  The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
  """
  secret: String
  """
  The status of the webhook. It can be `enabled` or `disabled`.
  """
  status: String!
  """
  The URL of the webhook endpoint.
  """
  url: String!
}
