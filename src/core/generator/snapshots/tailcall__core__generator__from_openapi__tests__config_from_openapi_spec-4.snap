---
source: src/core/generator/from_openapi.rs
expression: "OpenApiToConfigConverter::new(\"Query\",\n                content.as_str()).unwrap().convert().to_sdl()"
---
schema @server @upstream(baseURL: "https://api.stripe.com/") {
  query: Query
}

type Query {
  """
  <p>Invalidates a short-lived API key for a given resource.</p>
  """
  deleteEphemeralKeysKey:  @http(method: "DELETE", path: "/v1/ephemeral_keys/{key}")
  """
  <p>Removes the currently applied discount on a subscription.</p>
  """
  deleteSubscriptionsSubscriptionExposedIdDiscount:  @http(method: "DELETE", path: "/v1/subscriptions/{subscription_exposed_id}/discount")
  """
  <p>Retrieves the details of an account.</p>
  """
  getAccount:  @http(path: "/v1/account")
  """
  <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
  """
  getAccounts:  @http(path: "/v1/accounts")
  """
  <p>Retrieves the details of an account.</p>
  """
  getAccountsAccount:  @http(path: "/v1/accounts/{account}")
  """
  <p>Retrieve a specified external account for a given account.</p>
  """
  getAccountsAccountBankAccountsId:  @http(path: "/v1/accounts/{account}/bank_accounts/{id}")
  """
  <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
  """
  getAccountsAccountCapabilities:  @http(path: "/v1/accounts/{account}/capabilities")
  """
  <p>Retrieves information about the specified Account Capability.</p>
  """
  getAccountsAccountCapabilitiesCapability:  @http(path: "/v1/accounts/{account}/capabilities/{capability}")
  """
  <p>List external accounts for an account.</p>
  """
  getAccountsAccountExternalAccounts:  @http(path: "/v1/accounts/{account}/external_accounts")
  """
  <p>Retrieve a specified external account for a given account.</p>
  """
  getAccountsAccountExternalAccountsId:  @http(path: "/v1/accounts/{account}/external_accounts/{id}")
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  """
  getAccountsAccountPeople:  @http(path: "/v1/accounts/{account}/people")
  """
  <p>Retrieves an existing person.</p>
  """
  getAccountsAccountPeoplePerson:  @http(path: "/v1/accounts/{account}/people/{person}")
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  """
  getAccountsAccountPersons:  @http(path: "/v1/accounts/{account}/persons")
  """
  <p>Retrieves an existing person.</p>
  """
  getAccountsAccountPersonsPerson:  @http(path: "/v1/accounts/{account}/persons/{person}")
  """
  <p>List apple pay domains.</p>
  """
  getApplePayDomains:  @http(path: "/v1/apple_pay/domains")
  """
  <p>Retrieve an apple pay domain.</p>
  """
  getApplePayDomainsDomain:  @http(path: "/v1/apple_pay/domains/{domain}")
  """
  <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
  """
  getApplicationFees:  @http(path: "/v1/application_fees")
  """
  <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
  """
  getApplicationFeesFeeRefundsId:  @http(path: "/v1/application_fees/{fee}/refunds/{id}")
  """
  <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
  """
  getApplicationFeesId:  @http(path: "/v1/application_fees/{id}")
  """
  <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  """
  getApplicationFeesIdRefunds:  @http(path: "/v1/application_fees/{id}/refunds")
  """
  <p>List all secrets stored on the given scope.</p>
  """
  getAppsSecrets:  @http(path: "/v1/apps/secrets")
  """
  <p>Finds a secret in the secret store by name and scope.</p>
  """
  getAppsSecretsFind:  @http(path: "/v1/apps/secrets/find")
  """
  <p>Retrieves the current account balance, based on the authentication that was used to make the request.
 For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
  """
  getBalance:  @http(path: "/v1/balance")
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  """
  getBalanceHistory:  @http(path: "/v1/balance/history")
  """
  <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  """
  getBalanceHistoryId:  @http(path: "/v1/balance/history/{id}")
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  """
  getBalanceTransactions:  @http(path: "/v1/balance_transactions")
  """
  <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  """
  getBalanceTransactionsId:  @http(path: "/v1/balance_transactions/{id}")
  """
  <p>Retrieve a list of billing meters.</p>
  """
  getBillingMeters:  @http(path: "/v1/billing/meters")
  """
  <p>Retrieves a billing meter given an ID</p>
  """
  getBillingMetersId:  @http(path: "/v1/billing/meters/{id}")
  """
  <p>Retrieve a list of billing meter event summaries.</p>
  """
  getBillingMetersIdEventSummaries:  @http(path: "/v1/billing/meters/{id}/event_summaries")
  """
  <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
  """
  getBillingPortalConfigurations:  @http(path: "/v1/billing_portal/configurations")
  """
  <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
  """
  getBillingPortalConfigurationsConfiguration:  @http(path: "/v1/billing_portal/configurations/{configuration}")
  """
  <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
  """
  getCharges:  @http(path: "/v1/charges")
  """
  <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
  """
  getChargesCharge:  @http(path: "/v1/charges/{charge}")
  """
  <p>Retrieve a dispute for a specified charge.</p>
  """
  getChargesChargeDispute:  @http(path: "/v1/charges/{charge}/dispute")
  """
  <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  """
  getChargesChargeRefunds:  @http(path: "/v1/charges/{charge}/refunds")
  """
  <p>Retrieves the details of an existing refund.</p>
  """
  getChargesChargeRefundsRefund:  @http(path: "/v1/charges/{charge}/refunds/{refund}")
  """
  <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getChargesSearch:  @http(path: "/v1/charges/search")
  """
  <p>Returns a list of Checkout Sessions.</p>
  """
  getCheckoutSessions:  @http(path: "/v1/checkout/sessions")
  """
  <p>Retrieves a Session object.</p>
  """
  getCheckoutSessionsSession:  @http(path: "/v1/checkout/sessions/{session}")
  """
  <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getCheckoutSessionsSessionLineItems:  @http(path: "/v1/checkout/sessions/{session}/line_items")
  """
  <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
most recently created orders appearing first.</p>
  """
  getClimateOrders:  @http(path: "/v1/climate/orders")
  """
  <p>Retrieves the details of a Climate order object with the given ID.</p>
  """
  getClimateOrdersOrder:  @http(path: "/v1/climate/orders/{order}")
  """
  <p>Lists all available Climate product objects.</p>
  """
  getClimateProducts:  @http(path: "/v1/climate/products")
  """
  <p>Retrieves the details of a Climate product with the given ID.</p>
  """
  getClimateProductsProduct:  @http(path: "/v1/climate/products/{product}")
  """
  <p>Lists all available Climate supplier objects.</p>
  """
  getClimateSuppliers:  @http(path: "/v1/climate/suppliers")
  """
  <p>Retrieves a Climate supplier object.</p>
  """
  getClimateSuppliersSupplier:  @http(path: "/v1/climate/suppliers/{supplier}")
  """
  <p>Retrieves an existing ConfirmationToken object</p>
  """
  getConfirmationTokensConfirmationToken:  @http(path: "/v1/confirmation_tokens/{confirmation_token}")
  """
  <p>Lists all Country Spec objects available in the API.</p>
  """
  getCountrySpecs:  @http(path: "/v1/country_specs")
  """
  <p>Returns a Country Spec for a given Country code.</p>
  """
  getCountrySpecsCountry:  @http(path: "/v1/country_specs/{country}")
  """
  <p>Returns a list of your coupons.</p>
  """
  getCoupons:  @http(path: "/v1/coupons")
  """
  <p>Retrieves the coupon with the given ID.</p>
  """
  getCouponsCoupon:  @http(path: "/v1/coupons/{coupon}")
  """
  <p>Returns a list of credit notes.</p>
  """
  getCreditNotes:  @http(path: "/v1/credit_notes")
  """
  <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getCreditNotesCreditNoteLines:  @http(path: "/v1/credit_notes/{credit_note}/lines")
  """
  <p>Retrieves the credit note object with the given identifier.</p>
  """
  getCreditNotesId:  @http(path: "/v1/credit_notes/{id}")
  """
  <p>Get a preview of a credit note without creating it.</p>
  """
  getCreditNotesPreview:  @http(path: "/v1/credit_notes/preview")
  """
  <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
  """
  getCreditNotesPreviewLines:  @http(path: "/v1/credit_notes/preview/lines")
  """
  <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
  """
  getCustomers:  @http(path: "/v1/customers")
  """
  <p>Retrieves a Customer object.</p>
  """
  getCustomersCustomer:  @http(path: "/v1/customers/{customer}")
  """
  <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  """
  getCustomersCustomerBalanceTransactions:  @http(path: "/v1/customers/{customer}/balance_transactions")
  """
  <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  """
  getCustomersCustomerBalanceTransactionsTransaction:  @http(path: "/v1/customers/{customer}/balance_transactions/{transaction}")
  """
  <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
  """
  getCustomersCustomerBankAccounts:  @http(path: "/v1/customers/{customer}/bank_accounts")
  """
  <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
  """
  getCustomersCustomerBankAccountsId:  @http(path: "/v1/customers/{customer}/bank_accounts/{id}")
  """
  <p>You can see a list of the cards belonging to a customer.
Note that the 10 most recent sources are always available on the <code>Customer</code> object.
If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
  """
  getCustomersCustomerCards:  @http(path: "/v1/customers/{customer}/cards")
  """
  <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
  """
  getCustomersCustomerCardsId:  @http(path: "/v1/customers/{customer}/cards/{id}")
  """
  <p>Retrieves a customer’s cash balance.</p>
  """
  getCustomersCustomerCashBalance:  @http(path: "/v1/customers/{customer}/cash_balance")
  """
  <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
  """
  getCustomersCustomerCashBalanceTransactions:  @http(path: "/v1/customers/{customer}/cash_balance_transactions")
  """
  <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
  """
  getCustomersCustomerCashBalanceTransactionsTransaction:  @http(path: "/v1/customers/{customer}/cash_balance_transactions/{transaction}")
  """
  
  """
  getCustomersCustomerDiscount:  @http(path: "/v1/customers/{customer}/discount")
  """
  <p>Returns a list of PaymentMethods for a given Customer</p>
  """
  getCustomersCustomerPaymentMethods:  @http(path: "/v1/customers/{customer}/payment_methods")
  """
  <p>Retrieves a PaymentMethod object for a given Customer.</p>
  """
  getCustomersCustomerPaymentMethodsPaymentMethod:  @http(path: "/v1/customers/{customer}/payment_methods/{payment_method}")
  """
  <p>List sources for a specified customer.</p>
  """
  getCustomersCustomerSources:  @http(path: "/v1/customers/{customer}/sources")
  """
  <p>Retrieve a specified source for a given customer.</p>
  """
  getCustomersCustomerSourcesId:  @http(path: "/v1/customers/{customer}/sources/{id}")
  """
  <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
  """
  getCustomersCustomerSubscriptions:  @http(path: "/v1/customers/{customer}/subscriptions")
  """
  <p>Retrieves the subscription with the given ID.</p>
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedId:  @http(path: "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}")
  """
  
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount:  @http(path: "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount")
  """
  <p>Returns a list of tax IDs for a customer.</p>
  """
  getCustomersCustomerTaxIds:  @http(path: "/v1/customers/{customer}/tax_ids")
  """
  <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
  """
  getCustomersCustomerTaxIdsId:  @http(path: "/v1/customers/{customer}/tax_ids/{id}")
  """
  <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getCustomersSearch:  @http(path: "/v1/customers/search")
  """
  <p>Returns a list of your disputes.</p>
  """
  getDisputes:  @http(path: "/v1/disputes")
  """
  <p>Retrieves the dispute with the given ID.</p>
  """
  getDisputesDispute:  @http(path: "/v1/disputes/{dispute}")
  """
  <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
  """
  getEvents:  @http(path: "/v1/events")
  """
  <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
  """
  getEventsId:  @http(path: "/v1/events/{id}")
  """
  <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
  """
  getExchangeRates:  @http(path: "/v1/exchange_rates")
  """
  <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
  """
  getExchangeRatesRateId:  @http(path: "/v1/exchange_rates/{rate_id}")
  """
  <p>Returns a list of file links.</p>
  """
  getFileLinks:  @http(path: "/v1/file_links")
  """
  <p>Retrieves the file link with the given ID.</p>
  """
  getFileLinksLink:  @http(path: "/v1/file_links/{link}")
  """
  <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
  """
  getFiles:  @http(path: "/v1/files")
  """
  <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
  """
  getFilesFile:  @http(path: "/v1/files/{file}")
  """
  <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
  """
  getFinancialConnectionsAccounts:  @http(path: "/v1/financial_connections/accounts")
  """
  <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
  """
  getFinancialConnectionsAccountsAccount:  @http(path: "/v1/financial_connections/accounts/{account}")
  """
  <p>Lists all owners for a given <code>Account</code></p>
  """
  getFinancialConnectionsAccountsAccountOwners:  @http(path: "/v1/financial_connections/accounts/{account}/owners")
  """
  <p>Retrieves the details of a Financial Connections <code>Session</code></p>
  """
  getFinancialConnectionsSessionsSession:  @http(path: "/v1/financial_connections/sessions/{session}")
  """
  <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
  """
  getFinancialConnectionsTransactions:  @http(path: "/v1/financial_connections/transactions")
  """
  <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
  """
  getFinancialConnectionsTransactionsTransaction:  @http(path: "/v1/financial_connections/transactions/{transaction}")
  """
  <p>Lists all ForwardingRequest objects.</p>
  """
  getForwardingRequests:  @http(path: "/v1/forwarding/requests")
  """
  <p>Retrieves a ForwardingRequest object.</p>
  """
  getForwardingRequestsId:  @http(path: "/v1/forwarding/requests/{id}")
  """
  <p>List all verification reports.</p>
  """
  getIdentityVerificationReports:  @http(path: "/v1/identity/verification_reports")
  """
  <p>Retrieves an existing VerificationReport</p>
  """
  getIdentityVerificationReportsReport:  @http(path: "/v1/identity/verification_reports/{report}")
  """
  <p>Returns a list of VerificationSessions</p>
  """
  getIdentityVerificationSessions:  @http(path: "/v1/identity/verification_sessions")
  """
  <p>Retrieves the details of a VerificationSession that was previously created.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
<code>client_secret</code> or <code>url</code> to allow re-submission.</p>
  """
  getIdentityVerificationSessionsSession:  @http(path: "/v1/identity/verification_sessions/{session}")
  """
  <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
  """
  getInvoiceitems:  @http(path: "/v1/invoiceitems")
  """
  <p>Retrieves the invoice item with the given ID.</p>
  """
  getInvoiceitemsInvoiceitem:  @http(path: "/v1/invoiceitems/{invoiceitem}")
  """
  <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
  """
  getInvoices:  @http(path: "/v1/invoices")
  """
  <p>Retrieves the invoice with the given ID.</p>
  """
  getInvoicesInvoice:  @http(path: "/v1/invoices/{invoice}")
  """
  <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getInvoicesInvoiceLines:  @http(path: "/v1/invoices/{invoice}/lines")
  """
  <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getInvoicesSearch:  @http(path: "/v1/invoices/search")
  """
  <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
  """
  getInvoicesUpcoming:  @http(path: "/v1/invoices/upcoming")
  """
  <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getInvoicesUpcomingLines:  @http(path: "/v1/invoices/upcoming/lines")
  """
  <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingAuthorizations:  @http(path: "/v1/issuing/authorizations")
  """
  <p>Retrieves an Issuing <code>Authorization</code> object.</p>
  """
  getIssuingAuthorizationsAuthorization:  @http(path: "/v1/issuing/authorizations/{authorization}")
  """
  <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingCardholders:  @http(path: "/v1/issuing/cardholders")
  """
  <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
  """
  getIssuingCardholdersCardholder:  @http(path: "/v1/issuing/cardholders/{cardholder}")
  """
  <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingCards:  @http(path: "/v1/issuing/cards")
  """
  <p>Retrieves an Issuing <code>Card</code> object.</p>
  """
  getIssuingCardsCard:  @http(path: "/v1/issuing/cards/{card}")
  """
  <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingDisputes:  @http(path: "/v1/issuing/disputes")
  """
  <p>Retrieves an Issuing <code>Dispute</code> object.</p>
  """
  getIssuingDisputesDispute:  @http(path: "/v1/issuing/disputes/{dispute}")
  """
  <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingPersonalizationDesigns:  @http(path: "/v1/issuing/personalization_designs")
  """
  <p>Retrieves a personalization design object.</p>
  """
  getIssuingPersonalizationDesignsPersonalizationDesign:  @http(path: "/v1/issuing/personalization_designs/{personalization_design}")
  """
  <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingPhysicalBundles:  @http(path: "/v1/issuing/physical_bundles")
  """
  <p>Retrieves a physical bundle object.</p>
  """
  getIssuingPhysicalBundlesPhysicalBundle:  @http(path: "/v1/issuing/physical_bundles/{physical_bundle}")
  """
  <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingSettlements:  @http(path: "/v1/issuing/settlements")
  """
  <p>Retrieves an Issuing <code>Settlement</code> object.</p>
  """
  getIssuingSettlementsSettlement:  @http(path: "/v1/issuing/settlements/{settlement}")
  """
  <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
  """
  getIssuingTokens:  @http(path: "/v1/issuing/tokens")
  """
  <p>Retrieves an Issuing <code>Token</code> object.</p>
  """
  getIssuingTokensToken:  @http(path: "/v1/issuing/tokens/{token}")
  """
  <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getIssuingTransactions:  @http(path: "/v1/issuing/transactions")
  """
  <p>Retrieves an Issuing <code>Transaction</code> object.</p>
  """
  getIssuingTransactionsTransaction:  @http(path: "/v1/issuing/transactions/{transaction}")
  """
  <p>Retrieves the details of a Financial Connections <code>Session</code></p>
  """
  getLinkAccountSessionsSession:  @http(path: "/v1/link_account_sessions/{session}")
  """
  <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
  """
  getLinkedAccounts:  @http(path: "/v1/linked_accounts")
  """
  <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
  """
  getLinkedAccountsAccount:  @http(path: "/v1/linked_accounts/{account}")
  """
  <p>Lists all owners for a given <code>Account</code></p>
  """
  getLinkedAccountsAccountOwners:  @http(path: "/v1/linked_accounts/{account}/owners")
  """
  <p>Retrieves a Mandate object.</p>
  """
  getMandatesMandate:  @http(path: "/v1/mandates/{mandate}")
  """
  <p>Returns a list of PaymentIntents.</p>
  """
  getPaymentIntents:  @http(path: "/v1/payment_intents")
  """
  <p>Retrieves the details of a PaymentIntent that has previously been created. </p>

<p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>

<p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
  """
  getPaymentIntentsIntent:  @http(path: "/v1/payment_intents/{intent}")
  """
  <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getPaymentIntentsSearch:  @http(path: "/v1/payment_intents/search")
  """
  <p>Returns a list of your payment links.</p>
  """
  getPaymentLinks:  @http(path: "/v1/payment_links")
  """
  <p>Retrieve a payment link.</p>
  """
  getPaymentLinksPaymentLink:  @http(path: "/v1/payment_links/{payment_link}")
  """
  <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getPaymentLinksPaymentLinkLineItems:  @http(path: "/v1/payment_links/{payment_link}/line_items")
  """
  <p>List payment method configurations</p>
  """
  getPaymentMethodConfigurations:  @http(path: "/v1/payment_method_configurations")
  """
  <p>Retrieve payment method configuration</p>
  """
  getPaymentMethodConfigurationsConfiguration:  @http(path: "/v1/payment_method_configurations/{configuration}")
  """
  <p>Lists the details of existing payment method domains.</p>
  """
  getPaymentMethodDomains:  @http(path: "/v1/payment_method_domains")
  """
  <p>Retrieves the details of an existing payment method domain.</p>
  """
  getPaymentMethodDomainsPaymentMethodDomain:  @http(path: "/v1/payment_method_domains/{payment_method_domain}")
  """
  <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
  """
  getPaymentMethods:  @http(path: "/v1/payment_methods")
  """
  <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
  """
  getPaymentMethodsPaymentMethod:  @http(path: "/v1/payment_methods/{payment_method}")
  """
  <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
  """
  getPayouts:  @http(path: "/v1/payouts")
  """
  <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
  """
  getPayoutsPayout:  @http(path: "/v1/payouts/{payout}")
  """
  <p>Returns a list of your plans.</p>
  """
  getPlans:  @http(path: "/v1/plans")
  """
  <p>Retrieves the plan with the given ID.</p>
  """
  getPlansPlan:  @http(path: "/v1/plans/{plan}")
  """
  <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
  """
  getPrices:  @http(path: "/v1/prices")
  """
  <p>Retrieves the price with the given ID.</p>
  """
  getPricesPrice:  @http(path: "/v1/prices/{price}")
  """
  <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getPricesSearch:  @http(path: "/v1/prices/search")
  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  getProducts:  @http(path: "/v1/products")
  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  getProductsId:  @http(path: "/v1/products/{id}")
  """
  <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getProductsSearch:  @http(path: "/v1/products/search")
  """
  <p>Returns a list of your promotion codes.</p>
  """
  getPromotionCodes:  @http(path: "/v1/promotion_codes")
  """
  <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
  """
  getPromotionCodesPromotionCode:  @http(path: "/v1/promotion_codes/{promotion_code}")
  """
  <p>Returns a list of your quotes.</p>
  """
  getQuotes:  @http(path: "/v1/quotes")
  """
  <p>Retrieves the quote with the given ID.</p>
  """
  getQuotesQuote:  @http(path: "/v1/quotes/{quote}")
  """
  <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
  """
  getQuotesQuoteComputedUpfrontLineItems:  @http(path: "/v1/quotes/{quote}/computed_upfront_line_items")
  """
  <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  """
  getQuotesQuoteLineItems:  @http(path: "/v1/quotes/{quote}/line_items")
  """
  <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
  """
  getQuotesQuotePdf:  @http(path: "/v1/quotes/{quote}/pdf")
  """
  <p>Returns a list of early fraud warnings.</p>
  """
  getRadarEarlyFraudWarnings:  @http(path: "/v1/radar/early_fraud_warnings")
  """
  <p>Retrieves the details of an early fraud warning that has previously been created. </p>

<p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
  """
  getRadarEarlyFraudWarningsEarlyFraudWarning:  @http(path: "/v1/radar/early_fraud_warnings/{early_fraud_warning}")
  """
  <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getRadarValueListItems:  @http(path: "/v1/radar/value_list_items")
  """
  <p>Retrieves a <code>ValueListItem</code> object.</p>
  """
  getRadarValueListItemsItem:  @http(path: "/v1/radar/value_list_items/{item}")
  """
  <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getRadarValueLists:  @http(path: "/v1/radar/value_lists")
  """
  <p>Retrieves a <code>ValueList</code> object.</p>
  """
  getRadarValueListsValueList:  @http(path: "/v1/radar/value_lists/{value_list}")
  """
  <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
  """
  getRefunds:  @http(path: "/v1/refunds")
  """
  <p>Retrieves the details of an existing refund.</p>
  """
  getRefundsRefund:  @http(path: "/v1/refunds/{refund}")
  """
  <p>Returns a list of Report Runs, with the most recent appearing first.</p>
  """
  getReportingReportRuns:  @http(path: "/v1/reporting/report_runs")
  """
  <p>Retrieves the details of an existing Report Run.</p>
  """
  getReportingReportRunsReportRun:  @http(path: "/v1/reporting/report_runs/{report_run}")
  """
  <p>Returns a full list of Report Types.</p>
  """
  getReportingReportTypes:  @http(path: "/v1/reporting/report_types")
  """
  <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
  """
  getReportingReportTypesReportType:  @http(path: "/v1/reporting/report_types/{report_type}")
  """
  <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  """
  getReviews:  @http(path: "/v1/reviews")
  """
  <p>Retrieves a <code>Review</code> object.</p>
  """
  getReviewsReview:  @http(path: "/v1/reviews/{review}")
  """
  <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
  """
  getSetupAttempts:  @http(path: "/v1/setup_attempts")
  """
  <p>Returns a list of SetupIntents.</p>
  """
  getSetupIntents:  @http(path: "/v1/setup_intents")
  """
  <p>Retrieves the details of a SetupIntent that has previously been created. </p>

<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>

<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
  """
  getSetupIntentsIntent:  @http(path: "/v1/setup_intents/{intent}")
  """
  <p>Returns a list of your shipping rates.</p>
  """
  getShippingRates:  @http(path: "/v1/shipping_rates")
  """
  <p>Returns the shipping rate object with the given ID.</p>
  """
  getShippingRatesShippingRateToken:  @http(path: "/v1/shipping_rates/{shipping_rate_token}")
  """
  <p>Returns a list of scheduled query runs.</p>
  """
  getSigmaScheduledQueryRuns:  @http(path: "/v1/sigma/scheduled_query_runs")
  """
  <p>Retrieves the details of an scheduled query run.</p>
  """
  getSigmaScheduledQueryRunsScheduledQueryRun:  @http(path: "/v1/sigma/scheduled_query_runs/{scheduled_query_run}")
  """
  <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
  """
  getSourcesSource:  @http(path: "/v1/sources/{source}")
  """
  <p>Retrieves a new Source MandateNotification.</p>
  """
  getSourcesSourceMandateNotificationsMandateNotification:  @http(path: "/v1/sources/{source}/mandate_notifications/{mandate_notification}")
  """
  <p>List source transactions for a given source.</p>
  """
  getSourcesSourceSourceTransactions:  @http(path: "/v1/sources/{source}/source_transactions")
  """
  <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
  """
  getSourcesSourceSourceTransactionsSourceTransaction:  @http(path: "/v1/sources/{source}/source_transactions/{source_transaction}")
  """
  <p>Returns a list of your subscription items for a given subscription.</p>
  """
  getSubscriptionItems:  @http(path: "/v1/subscription_items")
  """
  <p>Retrieves the subscription item with the given ID.</p>
  """
  getSubscriptionItemsItem:  @http(path: "/v1/subscription_items/{item}")
  """
  <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>

<p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
  """
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries:  @http(path: "/v1/subscription_items/{subscription_item}/usage_record_summaries")
  """
  <p>Retrieves the list of your subscription schedules.</p>
  """
  getSubscriptionSchedules:  @http(path: "/v1/subscription_schedules")
  """
  <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
  """
  getSubscriptionSchedulesSchedule:  @http(path: "/v1/subscription_schedules/{schedule}")
  """
  <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
  """
  getSubscriptions:  @http(path: "/v1/subscriptions")
  """
  <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>
  """
  getSubscriptionsSearch:  @http(path: "/v1/subscriptions/search")
  """
  <p>Retrieves the subscription with the given ID.</p>
  """
  getSubscriptionsSubscriptionExposedId:  @http(path: "/v1/subscriptions/{subscription_exposed_id}")
  """
  <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
  """
  getTaxCalculationsCalculationLineItems:  @http(path: "/v1/tax/calculations/{calculation}/line_items")
  """
  <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
  """
  getTaxCodes:  @http(path: "/v1/tax_codes")
  """
  <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
  """
  getTaxCodesId:  @http(path: "/v1/tax_codes/{id}")
  """
  <p>Returns a list of tax IDs.</p>
  """
  getTaxIds:  @http(path: "/v1/tax_ids")
  """
  <p>Retrieves an account or customer <code>tax_id</code> object.</p>
  """
  getTaxIdsId:  @http(path: "/v1/tax_ids/{id}")
  """
  <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
  """
  getTaxRates:  @http(path: "/v1/tax_rates")
  """
  <p>Retrieves a tax rate with the given ID</p>
  """
  getTaxRatesTaxRate:  @http(path: "/v1/tax_rates/{tax_rate}")
  """
  <p>Returns a list of Tax <code>Registration</code> objects.</p>
  """
  getTaxRegistrations:  @http(path: "/v1/tax/registrations")
  """
  <p>Returns a Tax <code>Registration</code> object.</p>
  """
  getTaxRegistrationsId:  @http(path: "/v1/tax/registrations/{id}")
  """
  <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
  """
  getTaxSettings:  @http(path: "/v1/tax/settings")
  """
  <p>Retrieves a Tax <code>Transaction</code> object.</p>
  """
  getTaxTransactionsTransaction:  @http(path: "/v1/tax/transactions/{transaction}")
  """
  <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
  """
  getTaxTransactionsTransactionLineItems:  @http(path: "/v1/tax/transactions/{transaction}/line_items")
  """
  <p>Returns a list of <code>Configuration</code> objects.</p>
  """
  getTerminalConfigurations:  @http(path: "/v1/terminal/configurations")
  """
  <p>Retrieves a <code>Configuration</code> object.</p>
  """
  getTerminalConfigurationsConfiguration:  @http(path: "/v1/terminal/configurations/{configuration}")
  """
  <p>Returns a list of <code>Location</code> objects.</p>
  """
  getTerminalLocations:  @http(path: "/v1/terminal/locations")
  """
  <p>Retrieves a <code>Location</code> object.</p>
  """
  getTerminalLocationsLocation:  @http(path: "/v1/terminal/locations/{location}")
  """
  <p>Returns a list of <code>Reader</code> objects.</p>
  """
  getTerminalReaders:  @http(path: "/v1/terminal/readers")
  """
  <p>Retrieves a <code>Reader</code> object.</p>
  """
  getTerminalReadersReader:  @http(path: "/v1/terminal/readers/{reader}")
  """
  <p>Returns a list of your test clocks.</p>
  """
  getTestHelpersTestClocks:  @http(path: "/v1/test_helpers/test_clocks")
  """
  <p>Retrieves a test clock.</p>
  """
  getTestHelpersTestClocksTestClock:  @http(path: "/v1/test_helpers/test_clocks/{test_clock}")
  """
  <p>Retrieves the token with the given ID.</p>
  """
  getTokensToken:  @http(path: "/v1/tokens/{token}")
  """
  <p>Returns a list of top-ups.</p>
  """
  getTopups:  @http(path: "/v1/topups")
  """
  <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
  """
  getTopupsTopup:  @http(path: "/v1/topups/{topup}")
  """
  <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
  """
  getTransfers:  @http(path: "/v1/transfers")
  """
  <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
  """
  getTransfersIdReversals:  @http(path: "/v1/transfers/{id}/reversals")
  """
  <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
  """
  getTransfersTransfer:  @http(path: "/v1/transfers/{transfer}")
  """
  <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
  """
  getTransfersTransferReversalsId:  @http(path: "/v1/transfers/{transfer}/reversals/{id}")
  """
  <p>Returns a list of CreditReversals.</p>
  """
  getTreasuryCreditReversals:  @http(path: "/v1/treasury/credit_reversals")
  """
  <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
  """
  getTreasuryCreditReversalsCreditReversal:  @http(path: "/v1/treasury/credit_reversals/{credit_reversal}")
  """
  <p>Returns a list of DebitReversals.</p>
  """
  getTreasuryDebitReversals:  @http(path: "/v1/treasury/debit_reversals")
  """
  <p>Retrieves a DebitReversal object.</p>
  """
  getTreasuryDebitReversalsDebitReversal:  @http(path: "/v1/treasury/debit_reversals/{debit_reversal}")
  """
  <p>Returns a list of FinancialAccounts.</p>
  """
  getTreasuryFinancialAccounts:  @http(path: "/v1/treasury/financial_accounts")
  """
  <p>Retrieves the details of a FinancialAccount.</p>
  """
  getTreasuryFinancialAccountsFinancialAccount:  @http(path: "/v1/treasury/financial_accounts/{financial_account}")
  """
  <p>Retrieves Features information associated with the FinancialAccount.</p>
  """
  getTreasuryFinancialAccountsFinancialAccountFeatures:  @http(path: "/v1/treasury/financial_accounts/{financial_account}/features")
  """
  <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
  """
  getTreasuryInboundTransfers:  @http(path: "/v1/treasury/inbound_transfers")
  """
  <p>Retrieves the details of an existing InboundTransfer.</p>
  """
  getTreasuryInboundTransfersId:  @http(path: "/v1/treasury/inbound_transfers/{id}")
  """
  <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
  """
  getTreasuryOutboundPayments:  @http(path: "/v1/treasury/outbound_payments")
  """
  <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
  """
  getTreasuryOutboundPaymentsId:  @http(path: "/v1/treasury/outbound_payments/{id}")
  """
  <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
  """
  getTreasuryOutboundTransfers:  @http(path: "/v1/treasury/outbound_transfers")
  """
  <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
  """
  getTreasuryOutboundTransfersOutboundTransfer:  @http(path: "/v1/treasury/outbound_transfers/{outbound_transfer}")
  """
  <p>Returns a list of ReceivedCredits.</p>
  """
  getTreasuryReceivedCredits:  @http(path: "/v1/treasury/received_credits")
  """
  <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
  """
  getTreasuryReceivedCreditsId:  @http(path: "/v1/treasury/received_credits/{id}")
  """
  <p>Returns a list of ReceivedDebits.</p>
  """
  getTreasuryReceivedDebits:  @http(path: "/v1/treasury/received_debits")
  """
  <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
  """
  getTreasuryReceivedDebitsId:  @http(path: "/v1/treasury/received_debits/{id}")
  """
  <p>Retrieves a list of TransactionEntry objects.</p>
  """
  getTreasuryTransactionEntries:  @http(path: "/v1/treasury/transaction_entries")
  """
  <p>Retrieves a TransactionEntry object.</p>
  """
  getTreasuryTransactionEntriesId:  @http(path: "/v1/treasury/transaction_entries/{id}")
  """
  <p>Retrieves a list of Transaction objects.</p>
  """
  getTreasuryTransactions:  @http(path: "/v1/treasury/transactions")
  """
  <p>Retrieves the details of an existing Transaction.</p>
  """
  getTreasuryTransactionsId:  @http(path: "/v1/treasury/transactions/{id}")
  """
  <p>Returns a list of your webhook endpoints.</p>
  """
  getWebhookEndpoints:  @http(path: "/v1/webhook_endpoints")
  """
  <p>Retrieves the webhook endpoint with the given ID.</p>
  """
  getWebhookEndpointsWebhookEndpoint:  @http(path: "/v1/webhook_endpoints/{webhook_endpoint}")
  """
  <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
  """
  postAccountLinks:  @http(method: "POST", path: "/v1/account_links")
  """
  <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
  """
  postAccountSessions:  @http(method: "POST", path: "/v1/account_sessions")
  """
  <p>Create an external account for a given account.</p>
  """
  postAccountsAccountBankAccounts:  @http(method: "POST", path: "/v1/accounts/{account}/bank_accounts")
  """
  <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>

<p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
  """
  postAccountsAccountLoginLinks:  @http(method: "POST", path: "/v1/accounts/{account}/login_links")
  """
  <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>

<p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
  """
  postAccountsAccountReject:  @http(method: "POST", path: "/v1/accounts/{account}/reject")
  """
  
  """
  postApplicationFeesIdRefund:  @http(method: "POST", path: "/v1/application_fees/{id}/refund")
  """
  <p>Deletes a secret from the secret store by name and scope.</p>
  """
  postAppsSecretsDelete:  @http(method: "POST", path: "/v1/apps/secrets/delete")
  """
  <p>Creates a billing meter event adjustment</p>
  """
  postBillingMeterEventAdjustments:  @http(method: "POST", path: "/v1/billing/meter_event_adjustments")
  """
  <p>Creates a billing meter event</p>
  """
  postBillingMeterEvents:  @http(method: "POST", path: "/v1/billing/meter_events")
  """
  <p>Deactivates a billing meter</p>
  """
  postBillingMetersIdDeactivate:  @http(method: "POST", path: "/v1/billing/meters/{id}/deactivate")
  """
  <p>Reactivates a billing meter</p>
  """
  postBillingMetersIdReactivate:  @http(method: "POST", path: "/v1/billing/meters/{id}/reactivate")
  """
  <p>Creates a session of the customer portal.</p>
  """
  postBillingPortalSessions:  @http(method: "POST", path: "/v1/billing_portal/sessions")
  """
  <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>

<p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>

<p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
  """
  postChargesChargeCapture:  @http(method: "POST", path: "/v1/charges/{charge}/capture")
  """
  
  """
  postChargesChargeDisputeClose:  @http(method: "POST", path: "/v1/charges/{charge}/dispute/close")
  """
  <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>

<p>This action refunds a previously created charge that’s not refunded yet.
Funds are refunded to the credit or debit card that’s originally charged.</p>

<p>You can optionally refund only part of a charge.
You can repeat this until the entire charge is refunded.</p>

<p>After you entirely refund a charge, you can’t refund it again.
This method raises an error when it’s called on an already-refunded charge,
or when you attempt to refund more money than is left on a charge.</p>
  """
  postChargesChargeRefund:  @http(method: "POST", path: "/v1/charges/{charge}/refund")
  """
  <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>

<p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
  """
  postCheckoutSessionsSessionExpire:  @http(method: "POST", path: "/v1/checkout/sessions/{session}/expire")
  """
  <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
  """
  postClimateOrdersOrderCancel:  @http(method: "POST", path: "/v1/climate/orders/{order}/cancel")
  """
  <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
  """
  postCreditNotesIdVoid:  @http(method: "POST", path: "/v1/credit_notes/{id}/void")
  """
  <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
  """
  postCustomerSessions:  @http(method: "POST", path: "/v1/customer_sessions")
  """
  <p>Verify a specified bank account for a given customer.</p>
  """
  postCustomersCustomerBankAccountsIdVerify:  @http(method: "POST", path: "/v1/customers/{customer}/bank_accounts/{id}/verify")
  """
  <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
funding instructions will be created. If funding instructions have already been created for a given customer, the same
funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
  """
  postCustomersCustomerFundingInstructions:  @http(method: "POST", path: "/v1/customers/{customer}/funding_instructions")
  """
  <p>Verify a specified bank account for a given customer.</p>
  """
  postCustomersCustomerSourcesIdVerify:  @http(method: "POST", path: "/v1/customers/{customer}/sources/{id}/verify")
  """
  <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>

<p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
  """
  postDisputesDisputeClose:  @http(method: "POST", path: "/v1/disputes/{dispute}/close")
  """
  <p>Creates a short-lived API key for a given resource.</p>
  """
  postEphemeralKeys:  @http(method: "POST", path: "/v1/ephemeral_keys")
  """
  <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
  """
  postFinancialConnectionsAccountsAccountDisconnect:  @http(method: "POST", path: "/v1/financial_connections/accounts/{account}/disconnect")
  """
  <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountRefresh:  @http(method: "POST", path: "/v1/financial_connections/accounts/{account}/refresh")
  """
  <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountSubscribe:  @http(method: "POST", path: "/v1/financial_connections/accounts/{account}/subscribe")
  """
  <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
  """
  postFinancialConnectionsAccountsAccountUnsubscribe:  @http(method: "POST", path: "/v1/financial_connections/accounts/{account}/unsubscribe")
  """
  <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
  """
  postFinancialConnectionsSessions:  @http(method: "POST", path: "/v1/financial_connections/sessions")
  """
  <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>

<p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
  """
  postIdentityVerificationSessionsSessionCancel:  @http(method: "POST", path: "/v1/identity/verification_sessions/{session}/cancel")
  """
  <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
the VerificationSession and all objects related to it, including VerificationReports, Events,
request logs, etc.</p>

<p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
<a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
state will automatically cancel it.</p>

<p>The redaction process may take up to four days. When the redaction process is in progress, the
VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
will be emitted.</p>

<p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
used for any purpose.</p>

<p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
  """
  postIdentityVerificationSessionsSessionRedact:  @http(method: "POST", path: "/v1/identity/verification_sessions/{session}/redact")
  """
  <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
  """
  postInvoicesInvoiceFinalize:  @http(method: "POST", path: "/v1/invoices/{invoice}/finalize")
  """
  <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
Updating an invoice’s line item is only possible before the invoice is finalized.</p>
  """
  postInvoicesInvoiceLinesLineItemId:  @http(method: "POST", path: "/v1/invoices/{invoice}/lines/{line_item_id}")
  """
  <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
  """
  postInvoicesInvoiceMarkUncollectible:  @http(method: "POST", path: "/v1/invoices/{invoice}/mark_uncollectible")
  """
  <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
  """
  postInvoicesInvoicePay:  @http(method: "POST", path: "/v1/invoices/{invoice}/pay")
  """
  <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>

<p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
  """
  postInvoicesInvoiceSend:  @http(method: "POST", path: "/v1/invoices/{invoice}/send")
  """
  <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>

<p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
  """
  postInvoicesInvoiceVoid:  @http(method: "POST", path: "/v1/invoices/{invoice}/void")
  """
  <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
  """
  postIssuingAuthorizationsAuthorizationApprove:  @http(method: "POST", path: "/v1/issuing/authorizations/{authorization}/approve")
  """
  <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
  """
  postIssuingAuthorizationsAuthorizationDecline:  @http(method: "POST", path: "/v1/issuing/authorizations/{authorization}/decline")
  """
  <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
  """
  postIssuingDisputesDisputeSubmit:  @http(method: "POST", path: "/v1/issuing/disputes/{dispute}/submit")
  """
  <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
  """
  postLinkAccountSessions:  @http(method: "POST", path: "/v1/link_account_sessions")
  """
  <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
  """
  postLinkedAccountsAccountDisconnect:  @http(method: "POST", path: "/v1/linked_accounts/{account}/disconnect")
  """
  <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
  """
  postLinkedAccountsAccountRefresh:  @http(method: "POST", path: "/v1/linked_accounts/{account}/refresh")
  """
  <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
  """
  postPaymentIntentsIntentApplyCustomerBalance:  @http(method: "POST", path: "/v1/payment_intents/{intent}/apply_customer_balance")
  """
  <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>

<p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>

<p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
  """
  postPaymentIntentsIntentCancel:  @http(method: "POST", path: "/v1/payment_intents/{intent}/cancel")
  """
  <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>

<p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>

<p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
  """
  postPaymentIntentsIntentCapture:  @http(method: "POST", path: "/v1/payment_intents/{intent}/capture")
  """
  <p>Confirm that your customer intends to pay with current or provided
payment method. Upon confirmation, the PaymentIntent will attempt to initiate
a payment.
If the selected payment method requires additional authentication steps, the
PaymentIntent will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If payment fails,
the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
<code>canceled</code> status if the confirmation limit is reached. If
payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
After <code>next_action</code>s are handled by the client, no additional
confirmation is required to complete the payment.
If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
initiated using a secret key.
If any actions are required for the payment, the PaymentIntent will
return to the <code>requires_confirmation</code> state
after those actions are completed. Your server needs to then
explicitly re-confirm the PaymentIntent to initiate the next payment
attempt.</p>
  """
  postPaymentIntentsIntentConfirm:  @http(method: "POST", path: "/v1/payment_intents/{intent}/confirm")
  """
  <p>Perform an incremental authorization on an eligible
<a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
PaymentIntent’s status must be <code>requires_capture</code> and
<a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
must be <code>true</code>.</p>

<p>Incremental authorizations attempt to increase the authorized amount on
your customer’s card to the new, higher <code>amount</code> provided. Similar to the
initial authorization, incremental authorizations can be declined. A
single PaymentIntent can call this endpoint multiple times to further
increase the authorized amount.</p>

<p>If the incremental authorization succeeds, the PaymentIntent object
returns with the updated
<a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
If the incremental authorization fails, a
<a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
fields on the PaymentIntent or Charge update. The PaymentIntent
object remains capturable for the previously authorized amount.</p>

<p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
After it’s captured, a PaymentIntent can no longer be incremented.</p>

<p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
  """
  postPaymentIntentsIntentIncrementAuthorization:  @http(method: "POST", path: "/v1/payment_intents/{intent}/increment_authorization")
  """
  <p>Verifies microdeposits on a PaymentIntent object.</p>
  """
  postPaymentIntentsIntentVerifyMicrodeposits:  @http(method: "POST", path: "/v1/payment_intents/{intent}/verify_microdeposits")
  """
  <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
The payment method doesn’t appear in Elements for this domain until it is active.</p>

<p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>

<p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
  """
  postPaymentMethodDomainsPaymentMethodDomainValidate:  @http(method: "POST", path: "/v1/payment_method_domains/{payment_method_domain}/validate")
  """
  <p>Attaches a PaymentMethod object to a Customer.</p>

<p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
future use, which makes later declines and payment friction more likely.
See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
future payments.</p>

<p>To use this PaymentMethod as the default for invoice or subscription payments,
set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
on the Customer to the PaymentMethod’s ID.</p>
  """
  postPaymentMethodsPaymentMethodAttach:  @http(method: "POST", path: "/v1/payment_methods/{payment_method}/attach")
  """
  <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
  """
  postPaymentMethodsPaymentMethodDetach:  @http(method: "POST", path: "/v1/payment_methods/{payment_method}/detach")
  """
  <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
  """
  postPayoutsPayoutCancel:  @http(method: "POST", path: "/v1/payouts/{payout}/cancel")
  """
  <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>

<p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
  """
  postPayoutsPayoutReverse:  @http(method: "POST", path: "/v1/payouts/{payout}/reverse")
  """
  <p>Accepts the specified quote.</p>
  """
  postQuotesQuoteAccept:  @http(method: "POST", path: "/v1/quotes/{quote}/accept")
  """
  <p>Cancels the quote.</p>
  """
  postQuotesQuoteCancel:  @http(method: "POST", path: "/v1/quotes/{quote}/cancel")
  """
  <p>Finalizes the quote.</p>
  """
  postQuotesQuoteFinalize:  @http(method: "POST", path: "/v1/quotes/{quote}/finalize")
  """
  <p>Cancels a refund with a status of <code>requires_action</code>.</p>

<p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
  """
  postRefundsRefundCancel:  @http(method: "POST", path: "/v1/refunds/{refund}/cancel")
  """
  <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
  """
  postReviewsReviewApprove:  @http(method: "POST", path: "/v1/reviews/{review}/approve")
  """
  <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>

<p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
  """
  postSetupIntentsIntentCancel:  @http(method: "POST", path: "/v1/setup_intents/{intent}/cancel")
  """
  <p>Confirm that your customer intends to set up the current or
provided payment method. For example, you would confirm a SetupIntent
when a customer hits the “Save” button on a payment method management
page on your website.</p>

<p>If the selected payment method does not require any additional
steps from the customer, the SetupIntent will transition to the
<code>succeeded</code> status.</p>

<p>Otherwise, it will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If setup fails,
the SetupIntent will transition to the
<code>requires_payment_method</code> status or the <code>canceled</code> status if the
confirmation limit is reached.</p>
  """
  postSetupIntentsIntentConfirm:  @http(method: "POST", path: "/v1/setup_intents/{intent}/confirm")
  """
  <p>Verifies microdeposits on a SetupIntent object.</p>
  """
  postSetupIntentsIntentVerifyMicrodeposits:  @http(method: "POST", path: "/v1/setup_intents/{intent}/verify_microdeposits")
  """
  <p>Creates a new source object.</p>
  """
  postSources:  @http(method: "POST", path: "/v1/sources")
  """
  <p>Verify a given source.</p>
  """
  postSourcesSourceVerify:  @http(method: "POST", path: "/v1/sources/{source}/verify")
  """
  <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>

<p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>

<p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>

<p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
  """
  postSubscriptionItemsSubscriptionItemUsageRecords:  @http(method: "POST", path: "/v1/subscription_items/{subscription_item}/usage_records")
  """
  <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
  """
  postSubscriptionSchedulesScheduleCancel:  @http(method: "POST", path: "/v1/subscription_schedules/{schedule}/cancel")
  """
  <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
  """
  postSubscriptionSchedulesScheduleRelease:  @http(method: "POST", path: "/v1/subscription_schedules/{schedule}/release")
  """
  <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
  """
  postSubscriptionsSubscriptionResume:  @http(method: "POST", path: "/v1/subscriptions/{subscription}/resume")
  """
  <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
  """
  postTaxCalculations:  @http(method: "POST", path: "/v1/tax/calculations")
  """
  <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
  """
  postTaxTransactionsCreateFromCalculation:  @http(method: "POST", path: "/v1/tax/transactions/create_from_calculation")
  """
  <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
  """
  postTaxTransactionsCreateReversal:  @http(method: "POST", path: "/v1/tax/transactions/create_reversal")
  """
  <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
  """
  postTerminalConnectionTokens:  @http(method: "POST", path: "/v1/terminal/connection_tokens")
  """
  <p>Cancels the current reader action.</p>
  """
  postTerminalReadersReaderCancelAction:  @http(method: "POST", path: "/v1/terminal/readers/{reader}/cancel_action")
  """
  <p>Initiates a payment flow on a Reader.</p>
  """
  postTerminalReadersReaderProcessPaymentIntent:  @http(method: "POST", path: "/v1/terminal/readers/{reader}/process_payment_intent")
  """
  <p>Initiates a setup intent flow on a Reader.</p>
  """
  postTerminalReadersReaderProcessSetupIntent:  @http(method: "POST", path: "/v1/terminal/readers/{reader}/process_setup_intent")
  """
  <p>Initiates a refund on a Reader</p>
  """
  postTerminalReadersReaderRefundPayment:  @http(method: "POST", path: "/v1/terminal/readers/{reader}/refund_payment")
  """
  <p>Sets reader display to show cart details.</p>
  """
  postTerminalReadersReaderSetReaderDisplay:  @http(method: "POST", path: "/v1/terminal/readers/{reader}/set_reader_display")
  """
  <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
  """
  postTestHelpersConfirmationTokens:  @http(method: "POST", path: "/v1/test_helpers/confirmation_tokens")
  """
  <p>Create an incoming testmode bank transfer</p>
  """
  postTestHelpersCustomersCustomerFundCashBalance:  @http(method: "POST", path: "/v1/test_helpers/customers/{customer}/fund_cash_balance")
  """
  <p>Create a test-mode authorization.</p>
  """
  postTestHelpersIssuingAuthorizations:  @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations")
  """
  <p>Capture a test-mode authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationCapture:  @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{authorization}/capture")
  """
  <p>Expire a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationExpire:  @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{authorization}/expire")
  """
  <p>Increment a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationIncrement:  @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{authorization}/increment")
  """
  <p>Reverse a test-mode Authorization.</p>
  """
  postTestHelpersIssuingAuthorizationsAuthorizationReverse:  @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{authorization}/reverse")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingDeliver:  @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{card}/shipping/deliver")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingFail:  @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{card}/shipping/fail")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingReturn:  @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{card}/shipping/return")
  """
  <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
  """
  postTestHelpersIssuingCardsCardShippingShip:  @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{card}/shipping/ship")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate:  @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate:  @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate")
  """
  <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
  """
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject:  @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject")
  """
  <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
  """
  postTestHelpersIssuingTransactionsCreateForceCapture:  @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_force_capture")
  """
  <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
  """
  postTestHelpersIssuingTransactionsCreateUnlinkedRefund:  @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_unlinked_refund")
  """
  <p>Refund a test-mode Transaction.</p>
  """
  postTestHelpersIssuingTransactionsTransactionRefund:  @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/{transaction}/refund")
  """
  <p>Expire a refund with a status of <code>requires_action</code>.</p>
  """
  postTestHelpersRefundsRefundExpire:  @http(method: "POST", path: "/v1/test_helpers/refunds/{refund}/expire")
  """
  <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
  """
  postTestHelpersTerminalReadersReaderPresentPaymentMethod:  @http(method: "POST", path: "/v1/test_helpers/terminal/readers/{reader}/present_payment_method")
  """
  <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
  """
  postTestHelpersTestClocksTestClockAdvance:  @http(method: "POST", path: "/v1/test_helpers/test_clocks/{test_clock}/advance")
  """
  <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdFail:  @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{id}/fail")
  """
  <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdReturn:  @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{id}/return")
  """
  <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryInboundTransfersIdSucceed:  @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdFail:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{id}/fail")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdPost:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{id}/post")
  """
  <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundPaymentsIdReturn:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{id}/return")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post")
  """
  <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
  """
  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn:  @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return")
  """
  <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
  """
  postTestHelpersTreasuryReceivedCredits:  @http(method: "POST", path: "/v1/test_helpers/treasury/received_credits")
  """
  <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
  """
  postTestHelpersTreasuryReceivedDebits:  @http(method: "POST", path: "/v1/test_helpers/treasury/received_debits")
  """
  <p>Creates a single-use token that represents a bank account’s details.
You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">Custom account</a>.</p>
  """
  postTokens:  @http(method: "POST", path: "/v1/tokens")
  """
  <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
  """
  postTopupsTopupCancel:  @http(method: "POST", path: "/v1/topups/{topup}/cancel")
  """
  <p>Cancels an InboundTransfer.</p>
  """
  postTreasuryInboundTransfersInboundTransferCancel:  @http(method: "POST", path: "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel")
  """
  <p>Cancel an OutboundPayment.</p>
  """
  postTreasuryOutboundPaymentsIdCancel:  @http(method: "POST", path: "/v1/treasury/outbound_payments/{id}/cancel")
  """
  <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
  """
  postTreasuryOutboundTransfersOutboundTransferCancel:  @http(method: "POST", path: "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel")
}
