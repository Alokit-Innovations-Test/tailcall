---
source: src/core/generator/from_openapi.rs
expression: apis_guru
---
schema @server @upstream {
  query: Query
}

type Query {
  """
  Returns the API entry for one specific version of an API where there is no serviceName.
  """
  getApi(api: String!, provider: String!): Api @http(baseURL: "https://api.apis.guru/v2", path: "/specs/{{.args.provider}}/{{.args.api}}.json")
  """
  Some basic metrics for the entire directory.
Just stunning numbers to put on a front page and are intended purely for WoW effect :)

  """
  getMetrics: Metrics @http(baseURL: "https://api.apis.guru/v2", path: "/metrics.json")
  """
  List all APIs in the directory for a particular providerName
Returns links to the individual API entry for each API.

  """
  getProvider(provider: String!): ApIs @http(baseURL: "https://api.apis.guru/v2", path: "/{{.args.provider}}.json")
  """
  List all the providers in the directory

  """
  getProviders: Unknown @http(baseURL: "https://api.apis.guru/v2", path: "/providers.json")
  """
  Returns the API entry for one specific version of an API where there is a serviceName.
  """
  getServiceApi(api: String!, provider: String!, service: String!): Api @http(baseURL: "https://api.apis.guru/v2", path: "/specs/{{.args.provider}}/{{.args.service}}/{{.args.api}}.json")
  """
  List all serviceNames in the directory for a particular providerName

  """
  getServices(provider: String!): Unknown @http(baseURL: "https://api.apis.guru/v2", path: "/{{.args.provider}}/services.json")
  """
  List all APIs in the directory.
Returns links to the OpenAPI definitions for each API in the directory.
If API exist in multiple versions `preferred` one is explicitly marked.
Some basic info from the OpenAPI definition is cached inside each object.
This allows you to generate some simple views without needing to fetch the OpenAPI definition for each API.

  """
  listApIs: ApIs @http(baseURL: "https://api.apis.guru/v2", path: "/list.json")
}
