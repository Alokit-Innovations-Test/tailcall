---
source: src/core/generator/from_openapi.rs
expression: spotify
---
schema @server @upstream(baseURL: "https://api.spotify.com/v1") {
  query: Query
}

type Query {
  """
  Check to see if the current user is following one or more artists or other Spotify users.

  """
  checkCurrentUserFollows(ids: String!, type: Type13!): [Boolean] @http(path: "/me/following/contains")
  """
  Check to see if one or more Spotify users are following a specified playlist.

  """
  checkIfUserFollowsPlaylist(ids: String!, playlist_id: String!): [Boolean] @http(path: "/playlists/{playlist_id}/followers/contains")
  """
  Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.

  """
  checkUsersSavedAlbums(ids: String!): [Boolean] @http(path: "/me/albums/contains")
  """
  Check if one or more audiobooks are already saved in the current Spotify user's library.

  """
  checkUsersSavedAudiobooks(ids: String!): [Boolean] @http(path: "/me/audiobooks/contains")
  """
  Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..

  """
  checkUsersSavedEpisodes(ids: String!): [Boolean] @http(path: "/me/episodes/contains")
  """
  Check if one or more shows is already saved in the current Spotify user's library.

  """
  checkUsersSavedShows(ids: String!): [Boolean] @http(path: "/me/shows/contains")
  """
  Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.

  """
  checkUsersSavedTracks(ids: String!): [Boolean] @http(path: "/me/tracks/contains")
  """
  Get a list of Spotify playlists tagged with a particular category.

  """
  getACategoriesPlaylists(category_id: String!, limit: Int, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/categories/{category_id}/playlists")
  """
  Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).

  """
  getACategory(category_id: String!, locale: String): CategoryObject @http(path: "/browse/categories/{category_id}")
  """
  Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  getAChapter(id: String!, market: String): ChapterObject @http(path: "/chapters/{id}")
  """
  Get a list of the playlists owned or followed by the current Spotify
user.

  """
  getAListOfCurrentUsersPlaylists(limit: Int, offset: Int): PagingPlaylistObject @http(path: "/me/playlists")
  """
  Get Spotify catalog information for a single show identified by its
unique Spotify ID.

  """
  getAShow(id: String!, market: String): ShowObject @http(path: "/shows/{id}")
  """
  Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.

  """
  getAShowsEpisodes(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedEpisodeObject @http(path: "/shows/{id}/episodes")
  """
  Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response.

  """
  getAUsersAvailableDevices: Type14 @http(path: "/me/player/devices")
  """
  Get Spotify catalog information for a single album.

  """
  getAnAlbum(id: String!, market: String): AlbumObject @http(path: "/albums/{id}")
  """
  Get Spotify catalog information about an album’s tracks.
Optional parameters can be used to limit the number of tracks returned.

  """
  getAnAlbumsTracks(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedTrackObject @http(path: "/albums/{id}/tracks")
  """
  Get Spotify catalog information for a single artist identified by their unique Spotify ID.

  """
  getAnArtist(id: String!): ArtistObject @http(path: "/artists/{id}")
  """
  Get Spotify catalog information about an artist's albums.

  """
  getAnArtistsAlbums(id: String!, include_groups: String, limit: Int, market: String, offset: Int): PagingArtistDiscographyAlbumObject @http(path: "/artists/{id}/albums")
  """
  Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's listening history.

  """
  getAnArtistsRelatedArtists(id: String!): Type2 @http(path: "/artists/{id}/related-artists")
  """
  Get Spotify catalog information about an artist's top tracks by country.

  """
  getAnArtistsTopTracks(id: String!, market: String): Type3 @http(path: "/artists/{id}/top-tracks")
  """
  Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  getAnAudiobook(id: String!, market: String): AudiobookObject @http(path: "/audiobooks/{id}")
  """
  Get Spotify catalog information for a single episode identified by its
unique Spotify ID.

  """
  getAnEpisode(id: String!, market: String): EpisodeObject @http(path: "/episodes/{id}")
  """
  Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.

  """
  getAudioAnalysis(id: String!): AudioAnalysisObject @http(path: "/audio-analysis/{id}")
  """
  Get audio feature information for a single track identified by its unique
Spotify ID.

  """
  getAudioFeatures(id: String!): AudioFeaturesObject @http(path: "/audio-features/{id}")
  """
  Get Spotify catalog information about an audiobook's chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  getAudiobookChapters(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedChapterObject @http(path: "/audiobooks/{id}/chapters")
  """
  Get the list of markets where Spotify is available.

  """
  getAvailableMarkets: Type10 @http(path: "/markets")
  """
  Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).

  """
  getCategories(limit: Int, locale: String, offset: Int): Type6 @http(path: "/browse/categories")
  """
  Get detailed profile information about the current user (including the
current user's username).

  """
  getCurrentUsersProfile: PrivateUserObject @http(path: "/me")
  """
  Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).

  """
  getFeaturedPlaylists(limit: Int, locale: String, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/featured-playlists")
  """
  Get the current user's followed artists.

  """
  getFollowed(after: String, limit: Int, type: Type11!): Type12 @http(path: "/me/following")
  """
  Get information about the user’s current playback state, including track or episode, progress, and active device.

  """
  getInformationAboutTheUsersCurrentPlayback(additional_types: String, market: String): CurrentlyPlayingContextObject @http(path: "/me/player")
  """
  Get a list of the playlists owned or followed by a Spotify user.

  """
  getListUsersPlaylists(limit: Int, offset: Int, user_id: String!): PagingPlaylistObject @http(path: "/users/{user_id}/playlists")
  """
  Get Spotify catalog information for multiple albums identified by their Spotify IDs.

  """
  getMultipleAlbums(ids: String!, market: String): Type0 @http(path: "/albums")
  """
  Get Spotify catalog information for several artists based on their Spotify IDs.

  """
  getMultipleArtists(ids: String!): Type1 @http(path: "/artists")
  """
  Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  getMultipleAudiobooks(ids: String!, market: String): Type5 @http(path: "/audiobooks")
  """
  Get Spotify catalog information for several episodes based on their Spotify IDs.

  """
  getMultipleEpisodes(ids: String!, market: String): Type9 @http(path: "/episodes")
  """
  Get Spotify catalog information for several shows based on their Spotify IDs.

  """
  getMultipleShows(ids: String!, market: String): Type19 @http(path: "/shows")
  """
  Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).

  """
  getNewReleases(limit: Int, offset: Int): Type7 @http(path: "/browse/new-releases")
  """
  Get a playlist owned by a Spotify user.

  """
  getPlaylist(additional_types: String, fields: String, market: String, playlist_id: String!): PlaylistObject @http(path: "/playlists/{playlist_id}")
  """
  Get the current image associated with a specific playlist.

  """
  getPlaylistCover(playlist_id: String!): [ImageObject] @http(path: "/playlists/{playlist_id}/images")
  """
  Get full details of the items of a playlist owned by a Spotify user.

  """
  getPlaylistsTracks(additional_types: String, fields: String, limit: Int, market: String, offset: Int, playlist_id: String!): PagingPlaylistTrackObject @http(path: "/playlists/{playlist_id}/tracks")
  """
  Get the list of objects that make up the user's queue.

  """
  getQueue: QueueObject @http(path: "/me/player/queue")
  """
  Get tracks from the current user's recently played tracks.
_**Note**: Currently doesn't support podcast episodes._

  """
  getRecentlyPlayed(after: Int, before: Int, limit: Int): CursorPagingPlayHistoryObject @http(path: "/me/player/recently-played")
  """
  Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).

  """
  getRecommendationGenres: Type15 @http(path: "/recommendations/available-genre-seeds")
  """
  Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.

  """
  getRecommendations(limit: Int, market: String, max_acousticness: Int, max_danceability: Int, max_duration_ms: Int, max_energy: Int, max_instrumentalness: Int, max_key: Int, max_liveness: Int, max_loudness: Int, max_mode: Int, max_popularity: Int, max_speechiness: Int, max_tempo: Int, max_time_signature: Int, max_valence: Int, min_acousticness: Int, min_danceability: Int, min_duration_ms: Int, min_energy: Int, min_instrumentalness: Int, min_key: Int, min_liveness: Int, min_loudness: Int, min_mode: Int, min_popularity: Int, min_speechiness: Int, min_tempo: Int, min_time_signature: Int, min_valence: Int, seed_artists: String, seed_genres: String, seed_tracks: String, target_acousticness: Int, target_danceability: Int, target_duration_ms: Int, target_energy: Int, target_instrumentalness: Int, target_key: Int, target_liveness: Int, target_loudness: Int, target_mode: Int, target_popularity: Int, target_speechiness: Int, target_tempo: Int, target_time_signature: Int, target_valence: Int): RecommendationsObject @http(path: "/recommendations")
  """
  Get audio features for multiple tracks based on their Spotify IDs.

  """
  getSeveralAudioFeatures(ids: String!): Type4 @http(path: "/audio-features")
  """
  Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  getSeveralChapters(ids: String!, market: String): Type8 @http(path: "/chapters")
  """
  Get Spotify catalog information for multiple tracks based on their Spotify IDs.

  """
  getSeveralTracks(ids: String!, market: String): Type20 @http(path: "/tracks")
  """
  Get the object currently being played on the user's Spotify account.

  """
  getTheUsersCurrentlyPlayingTrack(additional_types: String, market: String): CurrentlyPlayingObject @http(path: "/me/player/currently-playing")
  """
  Get Spotify catalog information for a single track identified by its
unique Spotify ID.

  """
  getTrack(id: String!, market: String): TrackObject @http(path: "/tracks/{id}")
  """
  Get public profile information about a Spotify user.

  """
  getUsersProfile(user_id: String!): PublicUserObject @http(path: "/users/{user_id}")
  """
  Get a list of the albums saved in the current Spotify user's 'Your Music' library.

  """
  getUsersSavedAlbums(limit: Int, market: String, offset: Int): PagingSavedAlbumObject @http(path: "/me/albums")
  """
  Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.

  """
  getUsersSavedAudiobooks(limit: Int, offset: Int): PagingSavedAudiobookObject @http(path: "/me/audiobooks")
  """
  Get a list of the episodes saved in the current Spotify user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

  """
  getUsersSavedEpisodes(limit: Int, market: String, offset: Int): PagingSavedEpisodeObject @http(path: "/me/episodes")
  """
  Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.

  """
  getUsersSavedShows(limit: Int, offset: Int): PagingSavedShowObject @http(path: "/me/shows")
  """
  Get a list of the songs saved in the current Spotify user's 'Your Music' library.

  """
  getUsersSavedTracks(limit: Int, market: String, offset: Int): PagingSavedTrackObject @http(path: "/me/tracks")
  """
  Get the current user's top artists based on calculated affinity.

  """
  getUsersTopArtists(limit: Int, offset: Int, time_range: String): PagingArtistObject @http(path: "/me/top/artists")
  """
  Get the current user's top tracks based on calculated affinity.

  """
  getUsersTopTracks(limit: Int, offset: Int, time_range: String): PagingTrackObject @http(path: "/me/top/tracks")
  """
  Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks
that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.

  """
  search(include_external: Type17, limit: Int, market: String, offset: Int, q: String!, type: [Type16]!): Type18 @http(path: "/search")
}
