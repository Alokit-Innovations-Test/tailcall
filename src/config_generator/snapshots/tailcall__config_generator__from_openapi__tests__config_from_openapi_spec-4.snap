---
source: src/config_generator/from_openapi.rs
expression: "OpenApiToGraphQLConverter::new(content.as_str()).unwrap().convert().to_sdl()"
---
schema @server(graphiql: true) @upstream(baseURL: "https://api.spotify.com/v1") {
  query: Query
}

scalar Key

scalar Loudness

scalar Mode

scalar Tempo

scalar TimeSignature

scalar Type24

scalar Type27

scalar Type3

scalar Type37

scalar Type43

scalar Type47

scalar Type55

scalar Type56

scalar Type58

scalar Type59

scalar Type74

scalar Type8

scalar Type80

type AlbumBase {
  albumType: String!
  availableMarkets: Array!
  externalUrls: Type3!
  href: String!
  id: String!
  images: Array!
  name: String!
  releaseDate: String!
  releaseDatePrecision: String!
  restrictions: Type4
  totalTracks: Int!
  type: String!
  uri: String!
}

type AlbumObject {
  albumType: String
  artists: Array!
  availableMarkets: Array
  copyrights: Array!
  externalIds: Type7!
  externalUrls: Type5
  genres: Array!
  href: String
  id: String
  images: Array
  label: String!
  name: String
  popularity: Int!
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type6
  totalTracks: Int
  tracks: Type8!
  type: String
  uri: String
}

type AlbumRestrictionObject {
  reason: String
}

type ArtistDiscographyAlbumObject {
  albumGroup: String
}

type ArtistObject {
  externalUrls: Type9
  followers: Type10
  genres: Array
  href: String
  id: String
  images: Array
  name: String
  popularity: Int
  type: String
  uri: String
}

type AudioAnalysisObject {
  bars: Array
  beats: Array
  meta: Object
  sections: Array
  segments: Array
  tatums: Array
  track: Object
}

type AudioFeaturesObject {
  acousticness: Number
  analysisUrl: String
  danceability: Number
  durationMs: Int
  energy: Number
  id: String
  instrumentalness: Number
  key: Int
  liveness: Number
  loudness: Number
  mode: Int
  speechiness: Number
  tempo: Number
  timeSignature: Int
  trackHref: String
  type: String
  uri: String
  valence: Number
}

type AudiobookBase {
  authors: Array!
  availableMarkets: Array!
  copyrights: Array!
  description: String!
  edition: String
  explicit: Boolean!
  externalUrls: Type11!
  href: String!
  htmlDescription: String!
  id: String!
  images: Array!
  languages: Array!
  mediaType: String!
  name: String!
  narrators: Array!
  publisher: String!
  totalChapters: Int!
  type: String!
  uri: String!
}

type AudiobookObject {
  authors: Array
  availableMarkets: Array
  chapters: Object
  copyrights: Array
  description: String
  edition: String
  explicit: Boolean
  externalUrls: Type12
  href: String
  htmlDescription: String
  id: String
  images: Array
  languages: Array
  mediaType: String
  name: String
  narrators: Array
  publisher: String
  totalChapters: Int
  type: String
  uri: String
}

type AuthorObject {
  name: String
}

type CategoryObject {
  href: String!
  icons: Array!
  id: String!
  name: String!
}

type ChapterBase {
  audioPreviewUrl: String!
  availableMarkets: Array
  chapterNumber: Int!
  description: String!
  durationMs: Int!
  explicit: Boolean!
  externalUrls: Type13!
  href: String!
  htmlDescription: String!
  id: String!
  images: Array!
  isPlayable: Boolean!
  languages: Array!
  name: String!
  releaseDate: String!
  releaseDatePrecision: String!
  restrictions: Type14
  resumePoint: Type15
  type: String!
  uri: String!
}

type ChapterObject {
  audioPreviewUrl: String
  audiobook: Type19
  availableMarkets: Array
  chapterNumber: Int
  description: String
  durationMs: Int
  explicit: Boolean
  externalUrls: Type16
  href: String
  htmlDescription: String
  id: String
  images: Array
  isPlayable: Boolean
  languages: Array
  name: String
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type17
  resumePoint: Type18
  type: String
  uri: String
}

type ChapterRestrictionObject {
  reason: String
}

type ContextObject {
  externalUrls: Type20
  href: String
  type: String
  uri: String
}

type CopyrightObject {
  text: String
  type: String
}

type CurrentlyPlayingContextObject {
  actions: Type21
  context: Type22
  currentlyPlayingType: String
  device: Type23
  isPlaying: Boolean
  item: Type24
  progressMs: Int
  repeatState: String
  shuffleState: Boolean
  timestamp: Int
}

type CurrentlyPlayingObject {
  actions: Type25
  context: Type26
  currentlyPlayingType: String
  isPlaying: Boolean
  item: Type27
  progressMs: Int
  timestamp: Int
}

type CursorObject {
  after: String
  before: String
}

type CursorPagingObject {
  cursors: Type28
  href: String
  limit: Int
  next: String
  total: Int
}

type CursorPagingPlayHistoryObject {
  cursors: Type29
  href: String
  items: Array
  limit: Int
  next: String
  total: Int
}

type CursorPagingSimplifiedArtistObject {
  cursors: Type30
  href: String
  items: Array
  limit: Int
  next: String
  total: Int
}

type DeviceObject {
  id: String
  isActive: Boolean
  isPrivateSession: Boolean
  isRestricted: Boolean
  name: String
  supportsVolume: Boolean
  type: String
  volumePercent: Int
}

type DisallowsObject {
  interruptingPlayback: Boolean
  pausing: Boolean
  resuming: Boolean
  seeking: Boolean
  skippingNext: Boolean
  skippingPrev: Boolean
  togglingRepeatContext: Boolean
  togglingRepeatTrack: Boolean
  togglingShuffle: Boolean
  transferringPlayback: Boolean
}

type EpisodeBase {
  audioPreviewUrl: String!
  description: String!
  durationMs: Int!
  explicit: Boolean!
  externalUrls: Type31!
  href: String!
  htmlDescription: String!
  id: String!
  images: Array!
  isExternallyHosted: Boolean!
  isPlayable: Boolean!
  language: String
  languages: Array!
  name: String!
  releaseDate: String!
  releaseDatePrecision: String!
  restrictions: Type32
  resumePoint: Type33
  type: String!
  uri: String!
}

type EpisodeObject {
  audioPreviewUrl: String
  description: String
  durationMs: Int
  explicit: Boolean
  externalUrls: Type34
  href: String
  htmlDescription: String
  id: String
  images: Array
  isExternallyHosted: Boolean
  isPlayable: Boolean
  language: String
  languages: Array
  name: String
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type35
  resumePoint: Type36
  show: Type37
  type: String
  uri: String
}

type EpisodeRestrictionObject {
  reason: String
}

type ErrorObject {
  message: String!
  status: Int!
}

type ExplicitContentSettingsObject {
  filterEnabled: Boolean
  filterLocked: Boolean
}

type ExternalIdObject {
  ean: String
  isrc: String
  upc: String
}

type ExternalUrlObject {
  spotify: String
}

type FollowersObject {
  href: String
  total: Int
}

type ImageObject {
  height: Int!
  url: String!
  width: Int!
}

type LinkedTrackObject {
  externalUrls: Type38
  href: String
  id: String
  type: String
  uri: String
}

type NarratorObject {
  name: String
}

type PagingArtistDiscographyAlbumObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingArtistObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingFeaturedPlaylistObject {
  message: String
  playlists: Object
}

type PagingObject {
  href: String!
  limit: Int!
  next: String!
  offset: Int!
  previous: String!
  total: Int!
}

type PagingPlaylistObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingPlaylistTrackObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSavedAlbumObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSavedAudiobookObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSavedEpisodeObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSavedShowObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSavedTrackObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedAlbumObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedAudiobookObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedChapterObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedEpisodeObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedShowObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingSimplifiedTrackObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PagingTrackObject {
  href: String
  items: Array
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

type PlayHistoryObject {
  context: Type39
  playedAt: String
  track: Type40
}

type PlaylistObject {
  collaborative: Boolean
  description: String
  externalUrls: Type41
  followers: Type42
  href: String
  id: String
  images: Array
  name: String
  owner: Type43
  public: Boolean
  snapshotId: String
  tracks: Object
  type: String
  uri: String
}

type PlaylistOwnerObject {
  displayName: String
  externalUrls: Type44
  followers: Type45
  href: String
  id: String
  type: String
  uri: String
}

type PlaylistTrackObject {
  addedAt: String
  addedBy: Type46
  isLocal: Boolean
  track: Type47
}

type PlaylistTracksRefObject {
  href: String
  total: Int
}

type PlaylistUserObject {
  externalUrls: Type48
  followers: Type49
  href: String
  id: String
  type: String
  uri: String
}

type PrivateUserObject {
  country: String
  displayName: String
  email: String
  explicitContent: Type50
  externalUrls: Type51
  followers: Type52
  href: String
  id: String
  images: Array
  product: String
  type: String
  uri: String
}

type PublicUserObject {
  displayName: String
  externalUrls: Type53
  followers: Type54
  href: String
  id: String
  images: Array
  type: String
  uri: String
}

type Query {
  checkCurrentUserFollows(ids: String!, type: String!): [Boolean] @http(path: "/me/following/contains")
  checkIfUserFollowsPlaylist(ids: String!, playlistId: String!): [Boolean] @http(path: "/playlists/{{args.playlist_id}}/followers/contains")
  checkUsersSavedAlbums(ids: String!): [Boolean] @http(path: "/me/albums/contains")
  checkUsersSavedAudiobooks(ids: String!): [Boolean] @http(path: "/me/audiobooks/contains")
  checkUsersSavedEpisodes(ids: String!): [Boolean] @http(path: "/me/episodes/contains")
  checkUsersSavedShows(ids: String!): [Boolean] @http(path: "/me/shows/contains")
  checkUsersSavedTracks(ids: String!): [Boolean] @http(path: "/me/tracks/contains")
  getACategoriesPlaylists(categoryId: String!, limit: Int, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/categories/{{args.category_id}}/playlists")
  getACategory(categoryId: String!, locale: String): CategoryObject @http(path: "/browse/categories/{{args.category_id}}")
  getAChapter(id: String!, market: String): ChapterObject @http(path: "/chapters/{{args.id}}")
  getAListOfCurrentUsersPlaylists(limit: Int, offset: Int): PagingPlaylistObject @http(path: "/me/playlists")
  getAShow(id: String!, market: String): Type2 @http(path: "/shows/{{args.id}}")
  getAShowsEpisodes(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedEpisodeObject @http(path: "/shows/{{args.id}}/episodes")
  getAUsersAvailableDevices: Object @http(path: "/me/player/devices")
  getAnAlbum(id: String!, market: String): Type0 @http(path: "/albums/{{args.id}}")
  getAnAlbumsTracks(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedTrackObject @http(path: "/albums/{{args.id}}/tracks")
  getAnArtist(id: String!): ArtistObject @http(path: "/artists/{{args.id}}")
  getAnArtistsAlbums(id: String!, includeGroups: String, limit: Int, market: String, offset: Int): PagingArtistDiscographyAlbumObject @http(path: "/artists/{{args.id}}/albums")
  getAnArtistsRelatedArtists(id: String!): Object @http(path: "/artists/{{args.id}}/related-artists")
  getAnArtistsTopTracks(id: String!, market: String): Object @http(path: "/artists/{{args.id}}/top-tracks")
  getAnAudiobook(id: String!, market: String): Type1 @http(path: "/audiobooks/{{args.id}}")
  getAnEpisode(id: String!, market: String): EpisodeObject @http(path: "/episodes/{{args.id}}")
  getAudioAnalysis(id: String!): AudioAnalysisObject @http(path: "/audio-analysis/{{args.id}}")
  getAudioFeatures(id: String!): AudioFeaturesObject @http(path: "/audio-features/{{args.id}}")
  getAudiobookChapters(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedChapterObject @http(path: "/audiobooks/{{args.id}}/chapters")
  getAvailableMarkets: Object @http(path: "/markets")
  getCategories(limit: Int, locale: String, offset: Int): Object @http(path: "/browse/categories")
  getCurrentUsersProfile: PrivateUserObject @http(path: "/me")
  getFeaturedPlaylists(limit: Int, locale: String, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/featured-playlists")
  getFollowed(after: String, limit: Int, type: String!): Object @http(path: "/me/following")
  getInformationAboutTheUsersCurrentPlayback(additionalTypes: String, market: String): CurrentlyPlayingContextObject @http(path: "/me/player")
  getListUsersPlaylists(limit: Int, offset: Int, userId: String!): PagingPlaylistObject @http(path: "/users/{{args.user_id}}/playlists")
  getMultipleAlbums(ids: String!, market: String): Object @http(path: "/albums")
  getMultipleArtists(ids: String!): Object @http(path: "/artists")
  getMultipleAudiobooks(ids: String!, market: String): Object @http(path: "/audiobooks")
  getMultipleEpisodes(ids: String!, market: String): Object @http(path: "/episodes")
  getMultipleShows(ids: String!, market: String): Object @http(path: "/shows")
  getNewReleases(limit: Int, offset: Int): Object @http(path: "/browse/new-releases")
  getPlaylist(additionalTypes: String, fields: String, market: String, playlistId: String!): PlaylistObject @http(path: "/playlists/{{args.playlist_id}}")
  getPlaylistCover(playlistId: String!): [ImageObject] @http(path: "/playlists/{{args.playlist_id}}/images")
  getPlaylistsTracks(additionalTypes: String, fields: String, limit: Int, market: String, offset: Int, playlistId: String!): PagingPlaylistTrackObject @http(path: "/playlists/{{args.playlist_id}}/tracks")
  getQueue: QueueObject @http(path: "/me/player/queue")
  getRecentlyPlayed(after: Int, before: Int, limit: Int): CursorPagingPlayHistoryObject @http(path: "/me/player/recently-played")
  getRecommendationGenres: Object @http(path: "/recommendations/available-genre-seeds")
  getRecommendations(limit: Int, market: String, maxAcousticness: Number, maxDanceability: Number, maxDurationMs: Int, maxEnergy: Number, maxInstrumentalness: Number, maxKey: Int, maxLiveness: Number, maxLoudness: Number, maxMode: Int, maxPopularity: Int, maxSpeechiness: Number, maxTempo: Number, maxTimeSignature: Int, maxValence: Number, minAcousticness: Number, minDanceability: Number, minDurationMs: Int, minEnergy: Number, minInstrumentalness: Number, minKey: Int, minLiveness: Number, minLoudness: Number, minMode: Int, minPopularity: Int, minSpeechiness: Number, minTempo: Number, minTimeSignature: Int, minValence: Number, seedArtists: String, seedGenres: String, seedTracks: String, targetAcousticness: Number, targetDanceability: Number, targetDurationMs: Int, targetEnergy: Number, targetInstrumentalness: Number, targetKey: Int, targetLiveness: Number, targetLoudness: Number, targetMode: Int, targetPopularity: Int, targetSpeechiness: Number, targetTempo: Number, targetTimeSignature: Int, targetValence: Number): RecommendationsObject @http(path: "/recommendations")
  getSeveralAudioFeatures(ids: String!): Object @http(path: "/audio-features")
  getSeveralChapters(ids: String!, market: String): Object @http(path: "/chapters")
  getSeveralTracks(ids: String!, market: String): Object @http(path: "/tracks")
  getTheUsersCurrentlyPlayingTrack(additionalTypes: String, market: String): CurrentlyPlayingObject @http(path: "/me/player/currently-playing")
  getTrack(id: String!, market: String): TrackObject @http(path: "/tracks/{{args.id}}")
  getUsersProfile(userId: String!): PublicUserObject @http(path: "/users/{{args.user_id}}")
  getUsersSavedAlbums(limit: Int, market: String, offset: Int): PagingSavedAlbumObject @http(path: "/me/albums")
  getUsersSavedAudiobooks(limit: Int, offset: Int): PagingSavedAudiobookObject @http(path: "/me/audiobooks")
  getUsersSavedEpisodes(limit: Int, market: String, offset: Int): PagingSavedEpisodeObject @http(path: "/me/episodes")
  getUsersSavedShows(limit: Int, offset: Int): PagingSavedShowObject @http(path: "/me/shows")
  getUsersSavedTracks(limit: Int, market: String, offset: Int): PagingSavedTrackObject @http(path: "/me/tracks")
  getUsersTopArtists(limit: Int, offset: Int, timeRange: String): PagingArtistObject @http(path: "/me/top/artists")
  getUsersTopTracks(limit: Int, offset: Int, timeRange: String): PagingTrackObject @http(path: "/me/top/tracks")
  search(includeExternal: String, limit: Int, market: String, offset: Int, q: String!, type: [String]!): Object @http(path: "/search")
}

type QueueObject {
  currentlyPlaying: Type55
  queue: Array
}

type RecommendationSeedObject {
  afterFilteringSize: Int
  afterRelinkingSize: Int
  href: String
  id: String
  initialPoolSize: Int
  type: String
}

type RecommendationsObject {
  seeds: Array!
  tracks: Array!
}

type ResumePointObject {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type SavedAlbumObject {
  addedAt: String
  album: Type56
}

type SavedAudiobookObject {
  addedAt: String
  audiobook: Type57
}

type SavedEpisodeObject {
  addedAt: String
  episode: Type58
}

type SavedShowObject {
  addedAt: String
  show: Type59
}

type SavedTrackObject {
  addedAt: String
  track: Type60
}

type SectionObject {
  confidence: Number
  duration: Number
  key: Int
  keyConfidence: Number
  loudness: Number
  mode: Number
  modeConfidence: Number
  start: Number
  tempo: Number
  tempoConfidence: Number
  timeSignature: Int
  timeSignatureConfidence: Number
}

type SegmentObject {
  confidence: Number
  duration: Number
  loudnessEnd: Number
  loudnessMax: Number
  loudnessMaxTime: Number
  loudnessStart: Number
  pitches: Array
  start: Number
  timbre: Array
}

type ShowBase {
  availableMarkets: Array!
  copyrights: Array!
  description: String!
  explicit: Boolean!
  externalUrls: Type61!
  href: String!
  htmlDescription: String!
  id: String!
  images: Array!
  isExternallyHosted: Boolean!
  languages: Array!
  mediaType: String!
  name: String!
  publisher: String!
  totalEpisodes: Int!
  type: String!
  uri: String!
}

type ShowObject {
  availableMarkets: Array
  copyrights: Array
  description: String
  episodes: Object
  explicit: Boolean
  externalUrls: Type62
  href: String
  htmlDescription: String
  id: String
  images: Array
  isExternallyHosted: Boolean
  languages: Array
  mediaType: String
  name: String
  publisher: String
  totalEpisodes: Int
  type: String
  uri: String
}

type SimplifiedAlbumObject {
  albumType: String
  artists: Array
  availableMarkets: Array
  externalUrls: Type63
  href: String
  id: String
  images: Array
  name: String
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type64
  totalTracks: Int
  type: String
  uri: String
}

type SimplifiedArtistObject {
  externalUrls: Type65
  href: String
  id: String
  name: String
  type: String
  uri: String
}

type SimplifiedAudiobookObject {
  authors: Array
  availableMarkets: Array
  copyrights: Array
  description: String
  edition: String
  explicit: Boolean
  externalUrls: Type66
  href: String
  htmlDescription: String
  id: String
  images: Array
  languages: Array
  mediaType: String
  name: String
  narrators: Array
  publisher: String
  totalChapters: Int
  type: String
  uri: String
}

type SimplifiedChapterObject {
  audioPreviewUrl: String
  availableMarkets: Array
  chapterNumber: Int
  description: String
  durationMs: Int
  explicit: Boolean
  externalUrls: Type67
  href: String
  htmlDescription: String
  id: String
  images: Array
  isPlayable: Boolean
  languages: Array
  name: String
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type68
  resumePoint: Type69
  type: String
  uri: String
}

type SimplifiedEpisodeObject {
  audioPreviewUrl: String
  description: String
  durationMs: Int
  explicit: Boolean
  externalUrls: Type70
  href: String
  htmlDescription: String
  id: String
  images: Array
  isExternallyHosted: Boolean
  isPlayable: Boolean
  language: String
  languages: Array
  name: String
  releaseDate: String
  releaseDatePrecision: String
  restrictions: Type71
  resumePoint: Type72
  type: String
  uri: String
}

type SimplifiedPlaylistObject {
  collaborative: Boolean
  description: String
  externalUrls: Type73
  href: String
  id: String
  images: Array
  name: String
  owner: Type74
  public: Boolean
  snapshotId: String
  tracks: Type75
  type: String
  uri: String
}

type SimplifiedShowObject {
  availableMarkets: Array
  copyrights: Array
  description: String
  explicit: Boolean
  externalUrls: Type76
  href: String
  htmlDescription: String
  id: String
  images: Array
  isExternallyHosted: Boolean
  languages: Array
  mediaType: String
  name: String
  publisher: String
  totalEpisodes: Int
  type: String
  uri: String
}

type SimplifiedTrackObject {
  artists: Array
  availableMarkets: Array
  discNumber: Int
  durationMs: Int
  explicit: Boolean
  externalUrls: Type77
  href: String
  id: String
  isLocal: Boolean
  isPlayable: Boolean
  linkedFrom: Type78
  name: String
  previewUrl: String
  restrictions: Type79
  trackNumber: Int
  type: String
  uri: String
}

type TimeIntervalObject {
  confidence: Number
  duration: Number
  start: Number
}

type TrackObject {
  album: Type80
  artists: Array
  availableMarkets: Array
  discNumber: Int
  durationMs: Int
  explicit: Boolean
  externalIds: Type81
  externalUrls: Type82
  href: String
  id: String
  isLocal: Boolean
  isPlayable: Boolean
  linkedFrom: Type83
  name: String
  popularity: Int
  previewUrl: String
  restrictions: Type84
  trackNumber: Int
  type: String
  uri: String
}

type TrackRestrictionObject {
  reason: String
}

type Type0 {
  spotify: String
}

type Type1 {
  reason: String
}

type Type10 {
  href: String
  total: Int
}

type Type11 {
  spotify: String
}

type Type12 {
  spotify: String
}

type Type13 {
  spotify: String
}

type Type14 {
  reason: String
}

type Type15 {
  spotify: String
}

type Type16 {
  spotify: String
}

type Type17 {
  reason: String
}

type Type18 {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type Type19 {
  spotify: String
}

type Type2 {
  ean: String
  isrc: String
  upc: String
}

type Type20 {
  spotify: String
}

type Type21 {
  interruptingPlayback: Boolean
  pausing: Boolean
  resuming: Boolean
  seeking: Boolean
  skippingNext: Boolean
  skippingPrev: Boolean
  togglingRepeatContext: Boolean
  togglingRepeatTrack: Boolean
  togglingShuffle: Boolean
  transferringPlayback: Boolean
}

type Type22 {
  externalUrls: Type15
  href: String
  type: String
  uri: String
}

type Type23 {
  id: String
  isActive: Boolean
  isPrivateSession: Boolean
  isRestricted: Boolean
  name: String
  supportsVolume: Boolean
  type: String
  volumePercent: Int
}

type Type25 {
  interruptingPlayback: Boolean
  pausing: Boolean
  resuming: Boolean
  seeking: Boolean
  skippingNext: Boolean
  skippingPrev: Boolean
  togglingRepeatContext: Boolean
  togglingRepeatTrack: Boolean
  togglingShuffle: Boolean
  transferringPlayback: Boolean
}

type Type26 {
  externalUrls: Type19
  href: String
  type: String
  uri: String
}

type Type28 {
  after: String
  before: String
}

type Type29 {
  after: String
  before: String
}

type Type30 {
  after: String
  before: String
}

type Type31 {
  spotify: String
}

type Type32 {
  reason: String
}

type Type33 {
  spotify: String
}

type Type34 {
  spotify: String
}

type Type35 {
  reason: String
}

type Type36 {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type Type38 {
  spotify: String
}

type Type39 {
  externalUrls: Type33
  href: String
  type: String
  uri: String
}

type Type4 {
  reason: String
}

type Type40 {
  album: Type35
  artists: Array
  availableMarkets: Array
  discNumber: Int
  durationMs: Int
  explicit: Boolean
  externalIds: Type35
  externalUrls: Type35
  href: String
  id: String
  isLocal: Boolean
  isPlayable: Boolean
  linkedFrom: Type35
  name: String
  popularity: Int
  previewUrl: String
  restrictions: Type35
  trackNumber: Int
  type: String
  uri: String
}

type Type41 {
  href: String
  total: Int
}

type Type42 {
  href: String
  total: Int
}

type Type44 {
  spotify: String
}

type Type45 {
  href: String
  total: Int
}

type Type46 {
  externalUrls: Type41
  followers: Type41
  href: String
  id: String
  type: String
  uri: String
}

type Type48 {
  spotify: String
}

type Type49 {
  href: String
  total: Int
}

type Type5 {
  spotify: String
}

type Type50 {
  filterEnabled: Boolean
  filterLocked: Boolean
}

type Type51 {
  spotify: String
}

type Type52 {
  href: String
  total: Int
}

type Type53 {
  spotify: String
}

type Type54 {
  href: String
  total: Int
}

type Type57 {
  reason: String
}

type Type6 {
  reason: String
}

type Type60 {
  album: Type57
  artists: Array
  availableMarkets: Array
  discNumber: Int
  durationMs: Int
  explicit: Boolean
  externalIds: Type57
  externalUrls: Type57
  href: String
  id: String
  isLocal: Boolean
  isPlayable: Boolean
  linkedFrom: Type57
  name: String
  popularity: Int
  previewUrl: String
  restrictions: Type57
  trackNumber: Int
  type: String
  uri: String
}

type Type61 {
  spotify: String
}

type Type62 {
  spotify: String
}

type Type63 {
  spotify: String
}

type Type64 {
  reason: String
}

type Type65 {
  spotify: String
}

type Type66 {
  spotify: String
}

type Type67 {
  spotify: String
}

type Type68 {
  reason: String
}

type Type69 {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type Type7 {
  ean: String
  isrc: String
  upc: String
}

type Type70 {
  spotify: String
}

type Type71 {
  reason: String
}

type Type72 {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type Type73 {
  spotify: String
}

type Type75 {
  href: String
  total: Int
}

type Type76 {
  spotify: String
}

type Type77 {
  spotify: String
}

type Type78 {
  externalUrls: Type76
  href: String
  id: String
  type: String
  uri: String
}

type Type79 {
  reason: String
}

type Type81 {
  ean: String
  isrc: String
  upc: String
}

type Type82 {
  spotify: String
}

type Type83 {
  externalUrls: Type82
  href: String
  id: String
  type: String
  uri: String
}

type Type84 {
  reason: String
}

type Type9 {
  spotify: String
}
