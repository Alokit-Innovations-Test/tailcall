---
source: src/config_generator/from_openapi.rs
expression: config_from_openapi_spec(content.as_str()).unwrap().to_sdl()
---
schema @server(graphiql: true) @upstream(baseURL: "https://api.spotify.com/v1") {
  query: Query
}

scalar AlbumObject

scalar ArtistDiscographyAlbumObject

scalar AudiobookObject

scalar ChapterObject

scalar CursorPagingPlayHistoryObject

scalar CursorPagingSimplifiedArtistObject

scalar EpisodeObject

scalar Key

scalar Loudness

scalar Mode

scalar PagingArtistDiscographyAlbumObject

scalar PagingArtistObject

scalar PagingPlaylistObject

scalar PagingPlaylistTrackObject

scalar PagingSavedAlbumObject

scalar PagingSavedAudiobookObject

scalar PagingSavedEpisodeObject

scalar PagingSavedShowObject

scalar PagingSavedTrackObject

scalar PagingSimplifiedAlbumObject

scalar PagingSimplifiedAudiobookObject

scalar PagingSimplifiedChapterObject

scalar PagingSimplifiedEpisodeObject

scalar PagingSimplifiedShowObject

scalar PagingSimplifiedTrackObject

scalar PagingTrackObject

scalar PlaylistOwnerObject

scalar ShowObject

scalar SimplifiedAlbumObject

scalar SimplifiedAudiobookObject

scalar SimplifiedChapterObject

scalar SimplifiedEpisodeObject

scalar SimplifiedShowObject

scalar Tempo

scalar TimeSignature

type AlbumBase {
  album_type: String!
  available_markets: Array!
  external_urls: Object!
  href: String!
  id: String!
  images: Array!
  name: String!
  release_date: String!
  release_date_precision: String!
  restrictions: Object
  total_tracks: Int!
  type: String!
  uri: String!
}

type AlbumRestrictionObject {
  reason: String
}

type ArtistObject {
  external_urls: Object
  followers: Object
  genres: Array
  href: String
  id: String
  images: Array
  name: String
  popularity: Int
  type: String
  uri: String
}

type AudioAnalysisObject {
  bars: Array
  beats: Array
  meta: Object
  sections: Array
  segments: Array
  tatums: Array
  track: Object
}

type AudioFeaturesObject {
  acousticness: Number
  analysis_url: String
  danceability: Number
  duration_ms: Int
  energy: Number
  id: String
  instrumentalness: Number
  key: Int
  liveness: Number
  loudness: Number
  mode: Int
  speechiness: Number
  tempo: Number
  time_signature: Int
  track_href: String
  type: String
  uri: String
  valence: Number
}

type AudiobookBase {
  authors: Array!
  available_markets: Array!
  copyrights: Array!
  description: String!
  edition: String
  explicit: Boolean!
  external_urls: Object!
  href: String!
  html_description: String!
  id: String!
  images: Array!
  languages: Array!
  media_type: String!
  name: String!
  narrators: Array!
  publisher: String!
  total_chapters: Int!
  type: String!
  uri: String!
}

type AuthorObject {
  name: String
}

type CategoryObject {
  href: String!
  icons: Array!
  id: String!
  name: String!
}

type ChapterBase {
  audio_preview_url: String!
  available_markets: Array
  chapter_number: Int!
  description: String!
  duration_ms: Int!
  explicit: Boolean!
  external_urls: Object!
  href: String!
  html_description: String!
  id: String!
  images: Array!
  is_playable: Boolean!
  languages: Array!
  name: String!
  release_date: String!
  release_date_precision: String!
  restrictions: Object
  resume_point: Object
  type: String!
  uri: String!
}

type ChapterRestrictionObject {
  reason: String
}

type ContextObject {
  external_urls: Object
  href: String
  type: String
  uri: String
}

type CopyrightObject {
  text: String
  type: String
}

type CurrentlyPlayingContextObject {
  actions: Object
  context: Object
  currently_playing_type: String
  device: Object
  is_playing: Boolean
  item: Object
  progress_ms: Int
  repeat_state: String
  shuffle_state: Boolean
  timestamp: Int
}

type CurrentlyPlayingObject {
  actions: Object
  context: Object
  currently_playing_type: String
  is_playing: Boolean
  item: Object
  progress_ms: Int
  timestamp: Int
}

type CursorObject {
  after: String
  before: String
}

type CursorPagingObject {
  cursors: Object
  href: String
  limit: Int
  next: String
  total: Int
}

type DeviceObject {
  id: String
  is_active: Boolean
  is_private_session: Boolean
  is_restricted: Boolean
  name: String
  supports_volume: Boolean
  type: String
  volume_percent: Int
}

type DisallowsObject {
  interrupting_playback: Boolean
  pausing: Boolean
  resuming: Boolean
  seeking: Boolean
  skipping_next: Boolean
  skipping_prev: Boolean
  toggling_repeat_context: Boolean
  toggling_repeat_track: Boolean
  toggling_shuffle: Boolean
  transferring_playback: Boolean
}

type EpisodeBase {
  audio_preview_url: String!
  description: String!
  duration_ms: Int!
  explicit: Boolean!
  external_urls: Object!
  href: String!
  html_description: String!
  id: String!
  images: Array!
  is_externally_hosted: Boolean!
  is_playable: Boolean!
  language: String
  languages: Array!
  name: String!
  release_date: String!
  release_date_precision: String!
  restrictions: Object
  resume_point: Object
  type: String!
  uri: String!
}

type EpisodeRestrictionObject {
  reason: String
}

type ErrorObject {
  message: String!
  status: Int!
}

type ExplicitContentSettingsObject {
  filter_enabled: Boolean
  filter_locked: Boolean
}

type ExternalIdObject {
  ean: String
  isrc: String
  upc: String
}

type ExternalUrlObject {
  spotify: String
}

type FollowersObject {
  href: String
  total: Int
}

type ImageObject {
  height: Int!
  url: String!
  width: Int!
}

type LinkedTrackObject {
  external_urls: Object
  href: String
  id: String
  type: String
  uri: String
}

type NarratorObject {
  name: String
}

type PagingFeaturedPlaylistObject {
  message: String
  playlists: Object
}

type PagingObject {
  href: String!
  limit: Int!
  next: String!
  offset: Int!
  previous: String!
  total: Int!
}

type PlayHistoryObject {
  context: Object
  played_at: String
  track: Object
}

type PlaylistObject {
  collaborative: Boolean
  description: String
  external_urls: Object
  followers: Object
  href: String
  id: String
  images: Array
  name: String
  owner: Object
  public: Boolean
  snapshot_id: String
  tracks: Object
  type: String
  uri: String
}

type PlaylistTrackObject {
  added_at: String
  added_by: Object
  is_local: Boolean
  track: Object
}

type PlaylistTracksRefObject {
  href: String
  total: Int
}

type PlaylistUserObject {
  external_urls: Object
  followers: Object
  href: String
  id: String
  type: String
  uri: String
}

type PrivateUserObject {
  country: String
  display_name: String
  email: String
  explicit_content: Object
  external_urls: Object
  followers: Object
  href: String
  id: String
  images: Array
  product: String
  type: String
  uri: String
}

type PublicUserObject {
  display_name: String
  external_urls: Object
  followers: Object
  href: String
  id: String
  images: Array
  type: String
  uri: String
}

type Query {
  check-current-user-follows(ids: String!, type: String!): [Boolean] @http(path: "/me/following/contains")
  check-if-user-follows-playlist(ids: String!, playlist_id: String!): [Boolean] @http(path: "/playlists/{{args.playlist_id}}/followers/contains")
  check-users-saved-albums(ids: String!): [Boolean] @http(path: "/me/albums/contains")
  check-users-saved-audiobooks(ids: String!): [Boolean] @http(path: "/me/audiobooks/contains")
  check-users-saved-episodes(ids: String!): [Boolean] @http(path: "/me/episodes/contains")
  check-users-saved-shows(ids: String!): [Boolean] @http(path: "/me/shows/contains")
  check-users-saved-tracks(ids: String!): [Boolean] @http(path: "/me/tracks/contains")
  get-a-categories-playlists(category_id: String!, limit: Int, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/categories/{{args.category_id}}/playlists")
  get-a-category(category_id: String!, locale: String): CategoryObject @http(path: "/browse/categories/{{args.category_id}}")
  get-a-chapter(id: String!, market: String): ChapterObject @http(path: "/chapters/{{args.id}}")
  get-a-list-of-current-users-playlists(limit: Int, offset: Int): PagingPlaylistObject @http(path: "/me/playlists")
  get-a-show(id: String!, market: String): ShowObject @http(path: "/shows/{{args.id}}")
  get-a-shows-episodes(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedEpisodeObject @http(path: "/shows/{{args.id}}/episodes")
  get-a-users-available-devices: Object @http(path: "/me/player/devices")
  get-an-album(id: String!, market: String): AlbumObject @http(path: "/albums/{{args.id}}")
  get-an-albums-tracks(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedTrackObject @http(path: "/albums/{{args.id}}/tracks")
  get-an-artist(id: String!): ArtistObject @http(path: "/artists/{{args.id}}")
  get-an-artists-albums(id: String!, include_groups: String, limit: Int, market: String, offset: Int): PagingArtistDiscographyAlbumObject @http(path: "/artists/{{args.id}}/albums")
  get-an-artists-related-artists(id: String!): Object @http(path: "/artists/{{args.id}}/related-artists")
  get-an-artists-top-tracks(id: String!, market: String): Object @http(path: "/artists/{{args.id}}/top-tracks")
  get-an-audiobook(id: String!, market: String): AudiobookObject @http(path: "/audiobooks/{{args.id}}")
  get-an-episode(id: String!, market: String): EpisodeObject @http(path: "/episodes/{{args.id}}")
  get-audio-analysis(id: String!): AudioAnalysisObject @http(path: "/audio-analysis/{{args.id}}")
  get-audio-features(id: String!): AudioFeaturesObject @http(path: "/audio-features/{{args.id}}")
  get-audiobook-chapters(id: String!, limit: Int, market: String, offset: Int): PagingSimplifiedChapterObject @http(path: "/audiobooks/{{args.id}}/chapters")
  get-available-markets: Object @http(path: "/markets")
  get-categories(limit: Int, locale: String, offset: Int): Object @http(path: "/browse/categories")
  get-current-users-profile: PrivateUserObject @http(path: "/me")
  get-featured-playlists(limit: Int, locale: String, offset: Int): PagingFeaturedPlaylistObject @http(path: "/browse/featured-playlists")
  get-followed(after: String, limit: Int, type: String!): Object @http(path: "/me/following")
  get-information-about-the-users-current-playback(additional_types: String, market: String): CurrentlyPlayingContextObject @http(path: "/me/player")
  get-list-users-playlists(limit: Int, offset: Int, user_id: String!): PagingPlaylistObject @http(path: "/users/{{args.user_id}}/playlists")
  get-multiple-albums(ids: String!, market: String): Object @http(path: "/albums")
  get-multiple-artists(ids: String!): Object @http(path: "/artists")
  get-multiple-audiobooks(ids: String!, market: String): Object @http(path: "/audiobooks")
  get-multiple-episodes(ids: String!, market: String): Object @http(path: "/episodes")
  get-multiple-shows(ids: String!, market: String): Object @http(path: "/shows")
  get-new-releases(limit: Int, offset: Int): Object @http(path: "/browse/new-releases")
  get-playlist(additional_types: String, fields: String, market: String, playlist_id: String!): PlaylistObject @http(path: "/playlists/{{args.playlist_id}}")
  get-playlist-cover(playlist_id: String!): [ImageObject] @http(path: "/playlists/{{args.playlist_id}}/images")
  get-playlists-tracks(additional_types: String, fields: String, limit: Int, market: String, offset: Int, playlist_id: String!): PagingPlaylistTrackObject @http(path: "/playlists/{{args.playlist_id}}/tracks")
  get-queue: QueueObject @http(path: "/me/player/queue")
  get-recently-played(after: Int, before: Int, limit: Int): CursorPagingPlayHistoryObject @http(path: "/me/player/recently-played")
  get-recommendation-genres: Object @http(path: "/recommendations/available-genre-seeds")
  get-recommendations(limit: Int, market: String, max_acousticness: Number, max_danceability: Number, max_duration_ms: Int, max_energy: Number, max_instrumentalness: Number, max_key: Int, max_liveness: Number, max_loudness: Number, max_mode: Int, max_popularity: Int, max_speechiness: Number, max_tempo: Number, max_time_signature: Int, max_valence: Number, min_acousticness: Number, min_danceability: Number, min_duration_ms: Int, min_energy: Number, min_instrumentalness: Number, min_key: Int, min_liveness: Number, min_loudness: Number, min_mode: Int, min_popularity: Int, min_speechiness: Number, min_tempo: Number, min_time_signature: Int, min_valence: Number, seed_artists: String, seed_genres: String, seed_tracks: String, target_acousticness: Number, target_danceability: Number, target_duration_ms: Int, target_energy: Number, target_instrumentalness: Number, target_key: Int, target_liveness: Number, target_loudness: Number, target_mode: Int, target_popularity: Int, target_speechiness: Number, target_tempo: Number, target_time_signature: Int, target_valence: Number): RecommendationsObject @http(path: "/recommendations")
  get-several-audio-features(ids: String!): Object @http(path: "/audio-features")
  get-several-chapters(ids: String!, market: String): Object @http(path: "/chapters")
  get-several-tracks(ids: String!, market: String): Object @http(path: "/tracks")
  get-the-users-currently-playing-track(additional_types: String, market: String): CurrentlyPlayingObject @http(path: "/me/player/currently-playing")
  get-track(id: String!, market: String): TrackObject @http(path: "/tracks/{{args.id}}")
  get-users-profile(user_id: String!): PublicUserObject @http(path: "/users/{{args.user_id}}")
  get-users-saved-albums(limit: Int, market: String, offset: Int): PagingSavedAlbumObject @http(path: "/me/albums")
  get-users-saved-audiobooks(limit: Int, offset: Int): PagingSavedAudiobookObject @http(path: "/me/audiobooks")
  get-users-saved-episodes(limit: Int, market: String, offset: Int): PagingSavedEpisodeObject @http(path: "/me/episodes")
  get-users-saved-shows(limit: Int, offset: Int): PagingSavedShowObject @http(path: "/me/shows")
  get-users-saved-tracks(limit: Int, market: String, offset: Int): PagingSavedTrackObject @http(path: "/me/tracks")
  get-users-top-artists(limit: Int, offset: Int, time_range: String): PagingArtistObject @http(path: "/me/top/artists")
  get-users-top-tracks(limit: Int, offset: Int, time_range: String): PagingTrackObject @http(path: "/me/top/tracks")
  search(include_external: String, limit: Int, market: String, offset: Int, q: String!, type: [String]!): Object @http(path: "/search")
}

type QueueObject {
  currently_playing: Object
  queue: Array
}

type RecommendationSeedObject {
  afterFilteringSize: Int
  afterRelinkingSize: Int
  href: String
  id: String
  initialPoolSize: Int
  type: String
}

type RecommendationsObject {
  seeds: Array!
  tracks: Array!
}

type ResumePointObject {
  fully_played: Boolean
  resume_position_ms: Int
}

type SavedAlbumObject {
  added_at: String
  album: Object
}

type SavedAudiobookObject {
  added_at: String
  audiobook: Object
}

type SavedEpisodeObject {
  added_at: String
  episode: Object
}

type SavedShowObject {
  added_at: String
  show: Object
}

type SavedTrackObject {
  added_at: String
  track: Object
}

type SectionObject {
  confidence: Number
  duration: Number
  key: Int
  key_confidence: Number
  loudness: Number
  mode: Number
  mode_confidence: Number
  start: Number
  tempo: Number
  tempo_confidence: Number
  time_signature: Int
  time_signature_confidence: Number
}

type SegmentObject {
  confidence: Number
  duration: Number
  loudness_end: Number
  loudness_max: Number
  loudness_max_time: Number
  loudness_start: Number
  pitches: Array
  start: Number
  timbre: Array
}

type ShowBase {
  available_markets: Array!
  copyrights: Array!
  description: String!
  explicit: Boolean!
  external_urls: Object!
  href: String!
  html_description: String!
  id: String!
  images: Array!
  is_externally_hosted: Boolean!
  languages: Array!
  media_type: String!
  name: String!
  publisher: String!
  total_episodes: Int!
  type: String!
  uri: String!
}

type SimplifiedArtistObject {
  external_urls: Object
  href: String
  id: String
  name: String
  type: String
  uri: String
}

type SimplifiedPlaylistObject {
  collaborative: Boolean
  description: String
  external_urls: Object
  href: String
  id: String
  images: Array
  name: String
  owner: Object
  public: Boolean
  snapshot_id: String
  tracks: Object
  type: String
  uri: String
}

type SimplifiedTrackObject {
  artists: Array
  available_markets: Array
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  external_urls: Object
  href: String
  id: String
  is_local: Boolean
  is_playable: Boolean
  linked_from: Object
  name: String
  preview_url: String
  restrictions: Object
  track_number: Int
  type: String
  uri: String
}

type TimeIntervalObject {
  confidence: Number
  duration: Number
  start: Number
}

type TrackObject {
  album: Object
  artists: Array
  available_markets: Array
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  external_ids: Object
  external_urls: Object
  href: String
  id: String
  is_local: Boolean
  is_playable: Boolean
  linked_from: Object
  name: String
  popularity: Int
  preview_url: String
  restrictions: Object
  track_number: Int
  type: String
  uri: String
}

type TrackRestrictionObject {
  reason: String
}
