---
source: src/config_generator/from_openapi.rs
expression: "OpenApiToGraphQLConverter::new(content.as_str()).unwrap().convert().to_sdl()"
---
schema @server(graphiql: true) @upstream(baseURL: "https://api.apis.guru/v2") {
  query: Query
}

scalar ApIs

type Api {
  """
  Timestamp when the API was first added to the directory
  """
  added: String!
  """
  Recommended version
  """
  preferred: String!
  """
  List of supported versions of the API
  """
  versions: Object!
}

type ApiVersion {
  """
  Timestamp when the version was added
  """
  added: String!
  """
  Copy of `externalDocs` section from OpenAPI definition
  """
  externalDocs: Object
  """
  Copy of `info` section from OpenAPI definition
  """
  info: Object!
  """
  Link to the individual API entry for this API
  """
  link: String
  """
  The value of the `openapi` or `swagger` property of the source definition
  """
  openapiVer: String!
  """
  URL to OpenAPI definition in JSON format
  """
  swaggerUrl: String!
  """
  URL to OpenAPI definition in YAML format
  """
  swaggerYamlUrl: String!
  """
  Timestamp when the version was updated
  """
  updated: String!
}

type Metrics {
  """
  Data used for charting etc
  """
  datasets: Array
  """
  Percentage of all APIs where auto fixes have been applied
  """
  fixedPct: Int
  """
  Total number of fixes applied across all APIs
  """
  fixes: Int
  """
  Number of newly invalid APIs
  """
  invalid: Int
  """
  Open GitHub issues on our main repo
  """
  issues: Int
  """
  Number of unique APIs
  """
  numApIs: Int!
  """
  Number of methods of API retrieval
  """
  numDrivers: Int
  """
  Total number of endpoints inside all definitions
  """
  numEndpoints: Int!
  """
  Number of API providers in directory
  """
  numProviders: Int
  """
  Number of API definitions including different versions of the same API
  """
  numSpecs: Int!
  """
  GitHub stars for our main repo
  """
  stars: Int
  """
  Summary totals for the last 7 days
  """
  thisWeek: Object
  """
  Number of unofficial APIs
  """
  unofficial: Int
  """
  Number of unreachable (4XX,5XX status) APIs
  """
  unreachable: Int
}

type Query {
  """
  Returns the API entry for one specific version of an API where there is no serviceName.
  """
  getApi(api: String!, provider: String!): API @http(path: "/specs/{{args.provider}}/{{args.api}}.json")
  """
  Some basic metrics for the entire directory.
Just stunning numbers to put on a front page and are intended purely for WoW effect :)

  """
  getMetrics: Metrics @http(path: "/metrics.json")
  """
  List all APIs in the directory for a particular providerName
Returns links to the individual API entry for each API.

  """
  getProvider(provider: String!): APIs @http(path: "/{{args.provider}}.json")
  """
  List all the providers in the directory

  """
  getProviders: Type0 @http(path: "/providers.json")
  """
  Returns the API entry for one specific version of an API where there is a serviceName.
  """
  getServiceApi(api: String!, provider: String!, service: String!): API @http(path: "/specs/{{args.provider}}/{{args.service}}/{{args.api}}.json")
  """
  List all serviceNames in the directory for a particular providerName

  """
  getServices(provider: String!): Type1 @http(path: "/{{args.provider}}/services.json")
  """
  List all APIs in the directory.
Returns links to the OpenAPI definitions for each API in the directory.
If API exist in multiple versions `preferred` one is explicitly marked.
Some basic info from the OpenAPI definition is cached inside each object.
This allows you to generate some simple views without needing to fetch the OpenAPI definition for each API.

  """
  listApIs: APIs @http(path: "/list.json")
}

type Type0 {
  data: Array
}

type Type1 {
  data: Array
}
