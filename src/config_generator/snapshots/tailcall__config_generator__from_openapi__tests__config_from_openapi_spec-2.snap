---
source: src/config_generator/from_openapi.rs
expression: "OpenApiToGraphQLConverter::new(content.as_str()).unwrap().convert().to_sdl()"
---
schema @server(graphiql: true) @upstream(baseURL: "https://api.stripe.com/") {
  query: Query
}

scalar CardMandatePaymentMethodDetails

scalar CheckoutRevolutPayPaymentMethodOptions

scalar ConnectEmbeddedAccountFeatures

scalar ConnectEmbeddedBaseFeatures

scalar DestinationDetailsUnimplemented

scalar GelatoReportIdNumberOptions

scalar GelatoSessionIdNumberOptions

scalar InvoicePaymentMethodOptionsKonbini

scalar InvoicePaymentMethodOptionsSepaDebit

scalar MandateCashapp

scalar MandateLink

scalar MandateMultiUse

scalar OfflineAcceptance

scalar PaymentFlowsPrivatePaymentMethodsAlipay

scalar PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit

scalar PaymentMethodAffirm

scalar PaymentMethodAfterpayClearpay

scalar PaymentMethodBancontact

scalar PaymentMethodBlik

scalar PaymentMethodCardWalletAmexExpressCheckout

scalar PaymentMethodCardWalletApplePay

scalar PaymentMethodCardWalletGooglePay

scalar PaymentMethodCardWalletLink

scalar PaymentMethodCardWalletSamsungPay

scalar PaymentMethodCustomerBalance

scalar PaymentMethodDetailsAffirm

scalar PaymentMethodDetailsBlik

scalar PaymentMethodDetailsCardWalletAmexExpressCheckout

scalar PaymentMethodDetailsCardWalletApplePay

scalar PaymentMethodDetailsCardWalletGooglePay

scalar PaymentMethodDetailsCardWalletLink

scalar PaymentMethodDetailsCardWalletSamsungPay

scalar PaymentMethodDetailsCustomerBalance

scalar PaymentMethodDetailsRevolutPay

scalar PaymentMethodDetailsStripeAccount

scalar PaymentMethodDetailsWechat

scalar PaymentMethodDetailsZip

scalar PaymentMethodGiropay

scalar PaymentMethodGrabpay

scalar PaymentMethodKonbini

scalar PaymentMethodMobilepay

scalar PaymentMethodOptionsInteracPresent

scalar PaymentMethodOptionsRevolutPay

scalar PaymentMethodOxxo

scalar PaymentMethodPaynow

scalar PaymentMethodPix

scalar PaymentMethodPromptpay

scalar PaymentMethodRevolutPay

scalar PaymentMethodSwish

scalar PaymentMethodWechatPay

scalar PaymentMethodZip

scalar SetupAttemptPaymentMethodDetailsAcssDebit

scalar SetupAttemptPaymentMethodDetailsAuBecsDebit

scalar SetupAttemptPaymentMethodDetailsBacsDebit

scalar SetupAttemptPaymentMethodDetailsBoleto

scalar SetupAttemptPaymentMethodDetailsCashapp

scalar SetupAttemptPaymentMethodDetailsKlarna

scalar SetupAttemptPaymentMethodDetailsLink

scalar SetupAttemptPaymentMethodDetailsPaypal

scalar SetupAttemptPaymentMethodDetailsSepaDebit

scalar SetupAttemptPaymentMethodDetailsUsBankAccount

scalar SetupIntentPaymentMethodOptionsLink

scalar SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit

scalar TaxProductResourceTaxSettingsStatusDetailsResourceActive

union DeletedExternalAccount = deleted_bank_account | deleted_card

union DeletedPaymentSource = deleted_bank_account | deleted_card

union ExternalAccount = bank_account | card

union PaymentSource = account | bank_account | card | source

union Type0 = Integer | Object

union Type1 = bank_account | card

union Type10 = Integer | Object

union Type100 = String | application | deleted_application

union Type101 = String | billing_portal.configuration

union Type102 = portal_flows_flow

union Type103 = String | account

union Type104 = String | account

union Type105 = String | customer | deleted_customer

union Type106 = String | application

union Type107 = String | application_fee

union Type108 = String | balance_transaction

union Type109 = String | customer | deleted_customer

union Type11 = Integer | Object

union Type110 = String | balance_transaction

union Type111 = charge_fraud_details

union Type112 = String | invoice

union Type113 = String | account

union Type114 = charge_outcome

union Type115 = String | payment_intent

union Type116 = payment_method_details

union Type117 = String | review

union Type118 = shipping

union Type119 = String | transfer

union Type12 = customer | deleted_customer

union Type120 = String | transfer

union Type121 = charge_transfer_data

union Type122 = String | rule

union Type123 = String | account

union Type124 = payment_pages_checkout_session_after_expiration

union Type125 = payment_pages_checkout_session_consent

union Type126 = payment_pages_checkout_session_consent_collection

union Type127 = payment_pages_checkout_session_currency_conversion

union Type128 = String | customer | deleted_customer

union Type129 = payment_pages_checkout_session_customer_details

union Type13 = account | bank_account | card | source

union Type130 = String | invoice

union Type131 = payment_pages_checkout_session_invoice_creation

union Type132 = String | payment_intent

union Type133 = String | payment_link

union Type134 = payment_method_config_biz_payment_method_configuration_details

union Type135 = checkout_session_payment_method_options

union Type136 = String | setup_intent

union Type137 = payment_pages_checkout_session_shipping_address_collection

union Type138 = payment_pages_checkout_session_shipping_cost

union Type139 = shipping

union Type14 = Integer | Object

union Type140 = String | subscription

union Type141 = payment_pages_checkout_session_total_details

union Type142 = String | climate.product

union Type143 = climate_removals_location

union Type144 = confirmation_tokens_resource_mandate_data

union Type145 = confirmation_tokens_resource_payment_method_preview

union Type146 = confirmation_tokens_resource_shipping

union Type147 = confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online

union Type148 = String | account

union Type149 = String | account

union Type15 = Integer | Object

union Type150 = String | customer | deleted_customer

union Type151 = String | customer_balance_transaction

union Type152 = String | invoice

union Type153 = String | refund

union Type154 = invoices_resource_shipping_cost

union Type155 = String | tax_rate

union Type156 = custom_unit_amount

union Type157 = address

union Type158 = cash_balance

union Type159 = String | bank_account | card | source

union Type16 = Integer | Object

union Type160 = discount

union Type161 = shipping

union Type162 = String | test_helpers.test_clock

union Type163 = String | balance_transaction

union Type164 = String | customer_cash_balance_transaction

union Type165 = String | payment_intent

union Type166 = String | refund

union Type167 = String | balance_transaction

union Type168 = String | payment_intent

union Type169 = String | credit_note

union Type17 = Integer | Object

union Type170 = String | customer

union Type171 = String | invoice

union Type172 = String | customer

union Type173 = String | customer

union Type174 = customer_tax_location

union Type175 = String | customer | deleted_customer

union Type176 = String | promotion_code

union Type177 = String | customer | deleted_customer

union Type178 = String | promotion_code

union Type179 = String | deleted_discount | discount

union Type18 = Integer | Object

union Type180 = String | charge

union Type181 = String | payment_intent

union Type182 = String | file

union Type183 = String | file

union Type184 = String | file

union Type185 = String | file

union Type186 = String | file

union Type187 = String | file

union Type188 = String | file

union Type189 = String | file

union Type19 = Integer | Object

union Type190 = String | file

union Type191 = dispute_payment_method_details_card

union Type192 = notification_event_request

union Type193 = String | balance_transaction

union Type194 = String | application_fee

union Type195 = String | file

union Type196 = bank_connections_resource_accountholder

union Type197 = bank_connections_resource_balance

union Type198 = bank_connections_resource_balance_refresh

union Type199 = String | financial_connections.account_ownership

union Type2 = bank_account | card

union Type20 = Integer | Object

union Type200 = bank_connections_resource_ownership_refresh

union Type201 = bank_connections_resource_transaction_refresh

union Type202 = bank_connections_resource_accountholder

union Type203 = forwarded_request_context

union Type204 = forwarded_request_details

union Type205 = forwarded_response_details

union Type206 = address

union Type207 = gelato_data_document_report_date_of_birth

union Type208 = gelato_document_report_error

union Type209 = gelato_data_document_report_expiration_date

union Type21 = Integer | Object

union Type210 = gelato_data_document_report_issued_date

union Type211 = gelato_data_id_number_report_date

union Type212 = gelato_id_number_report_error

union Type213 = gelato_selfie_report_error

union Type214 = address

union Type215 = gelato_data_verified_outputs_date

union Type216 = gelato_session_last_error

union Type217 = String | identity.verification_report

union Type218 = gelato_verification_session_options

union Type219 = verification_session_redaction

union Type22 = Integer | Object

union Type220 = gelato_verified_outputs

union Type221 = String | mandate

union Type222 = String | application | deleted_application

union Type223 = String | charge

union Type224 = String | customer | deleted_customer

union Type225 = address

union Type226 = shipping

union Type227 = String | payment_method

union Type228 = String | bank_account | card | source

union Type229 = discount

union Type23 = Integer | Object

union Type230 = invoices_resource_from_invoice

union Type231 = api_errors

union Type232 = String | invoice

union Type233 = String | account

union Type234 = String | payment_intent

union Type235 = String | quote

union Type236 = invoices_resource_invoice_rendering

union Type237 = invoices_resource_shipping_cost

union Type238 = shipping

union Type239 = String | subscription

union Type24 = Array | String

union Type240 = subscription_details_data

union Type241 = String | test_helpers.test_clock

union Type242 = invoice_transfer_data

union Type243 = String | payment_method

union Type244 = invoice_setting_rendering_options

union Type245 = connect_account_reference

union Type246 = String | tax_rate

union Type247 = String | account

union Type248 = String | customer | deleted_customer

union Type249 = String | invoice

union Type25 = String

union Type250 = price

union Type251 = String | subscription

union Type252 = String | test_helpers.test_clock

union Type253 = invoice_payment_method_options_acss_debit

union Type254 = invoice_payment_method_options_bancontact

union Type255 = invoice_payment_method_options_card

union Type256 = invoice_payment_method_options_customer_balance

union Type257 = invoice_payment_method_options_konbini

union Type258 = invoice_payment_method_options_sepa_debit

union Type259 = invoice_payment_method_options_us_bank_account

union Type26 = Integer | String

union Type260 = invoices_payment_method_options

union Type261 = String | invoice

union Type262 = invoice_rendering_pdf

union Type263 = invoices_resource_line_items_credited_items

union Type264 = String | shipping_rate

union Type265 = issuing_authorization_amount_details

union Type266 = String | issuing.cardholder

union Type267 = issuing_authorization_network_data

union Type268 = issuing_authorization_pending_request

union Type269 = String | issuing.token

union Type27 = Integer | String

union Type270 = issuing_authorization_treasury

union Type271 = String | issuing.personalization_design

union Type272 = String | issuing.card

union Type273 = String | issuing.card

union Type274 = issuing_card_shipping

union Type275 = issuing_card_wallets

union Type276 = issuing_cardholder_company

union Type277 = issuing_cardholder_individual

union Type278 = issuing_cardholder_authorization_controls

union Type279 = String | issuing.transaction

union Type28 = Array | String

union Type280 = issuing_dispute_treasury

union Type281 = String | file

union Type282 = issuing_personalization_design_carrier_text

union Type283 = String | issuing.physical_bundle

union Type284 = String | issuing.card

union Type285 = issuing_transaction_amount_details

union Type286 = String | issuing.authorization

union Type287 = String | balance_transaction

union Type288 = String | issuing.card

union Type289 = String | issuing.cardholder

union Type29 = Integer | String

union Type290 = String | issuing.dispute

union Type291 = issuing_transaction_network_data

union Type292 = issuing_transaction_purchase_details

union Type293 = String | issuing.token

union Type294 = issuing_transaction_treasury

union Type295 = issuing_authorization_amount_details

union Type296 = issuing_authorization_amount_details

union Type297 = issuing_authorization_authentication_exemption

union Type298 = issuing_authorization_three_d_secure

union Type299 = issuing_card_shipping_customs

union Type3 = bank_account | card

union Type30 = Array | String

union Type300 = issuing_cardholder_user_terms_acceptance

union Type301 = String | file

union Type302 = String | file

union Type303 = issuing_cardholder_card_issuing

union Type304 = issuing_cardholder_individual_dob

union Type305 = issuing_cardholder_verification

union Type306 = issuing_cardholder_id_document

union Type307 = String | file

union Type308 = String | file

union Type309 = String | file

union Type31 = String

union Type310 = String | file

union Type311 = String | file

union Type312 = String | file

union Type313 = String | file

union Type314 = String | file

union Type315 = String | file

union Type316 = String | file

union Type317 = issuing_transaction_flight_data

union Type318 = issuing_transaction_fuel_data

union Type319 = issuing_transaction_lodging_data

union Type32 = Integer | String

union Type320 = price

union Type321 = legal_entity_japan_address

union Type322 = legal_entity_japan_address

union Type323 = legal_entity_ubo_declaration

union Type324 = legal_entity_company_verification

union Type325 = String | file

union Type326 = String | file

union Type327 = legal_entity_person_verification_document

union Type328 = String | file

union Type329 = String | file

union Type33 = Integer | String

union Type330 = String | invoiceitem

union Type331 = price

union Type332 = invoices_resource_line_items_proration_details

union Type333 = String | subscription

union Type334 = String | subscription_item

union Type335 = String | payment_method

union Type336 = String | mandate

union Type337 = String | mandate

union Type338 = String | application

union Type339 = payment_flows_automatic_payment_methods_payment_intent

union Type34 = Array | String

union Type340 = String | customer | deleted_customer

union Type341 = String | invoice

union Type342 = api_errors

union Type343 = String | charge

union Type344 = payment_intent_next_action

union Type345 = String | account

union Type346 = String | payment_method

union Type347 = payment_method_config_biz_payment_method_configuration_details

union Type348 = payment_intent_payment_method_options

union Type349 = payment_intent_processing

union Type35 = Integer | String

union Type350 = String | review

union Type351 = shipping

union Type352 = transfer_data

union Type353 = payment_intent_next_action_konbini_familymart

union Type354 = payment_intent_next_action_konbini_lawson

union Type355 = payment_intent_next_action_konbini_ministop

union Type356 = payment_intent_next_action_konbini_seicomart

union Type357 = payment_intent_payment_method_options_acss_debit | payment_intent_type_specific_payment_method_options_client

union Type358 = payment_intent_type_specific_payment_method_options_client | payment_method_options_affirm

union Type359 = payment_intent_type_specific_payment_method_options_client | payment_method_options_afterpay_clearpay

union Type36 = Integer | Object

union Type360 = payment_intent_type_specific_payment_method_options_client | payment_method_options_alipay

union Type361 = payment_intent_payment_method_options_au_becs_debit | payment_intent_type_specific_payment_method_options_client

union Type362 = payment_intent_type_specific_payment_method_options_client | payment_method_options_bacs_debit

union Type363 = payment_intent_type_specific_payment_method_options_client | payment_method_options_bancontact

union Type364 = payment_intent_payment_method_options_blik | payment_intent_type_specific_payment_method_options_client

union Type365 = payment_intent_type_specific_payment_method_options_client | payment_method_options_boleto

union Type366 = payment_intent_payment_method_options_card | payment_intent_type_specific_payment_method_options_client

union Type367 = payment_intent_type_specific_payment_method_options_client | payment_method_options_card_present

union Type368 = payment_intent_type_specific_payment_method_options_client | payment_method_options_cashapp

union Type369 = payment_intent_type_specific_payment_method_options_client | payment_method_options_customer_balance

union Type37 = Integer | Object

union Type370 = payment_intent_payment_method_options_eps | payment_intent_type_specific_payment_method_options_client

union Type371 = payment_intent_type_specific_payment_method_options_client | payment_method_options_fpx

union Type372 = payment_intent_type_specific_payment_method_options_client | payment_method_options_giropay

union Type373 = payment_intent_type_specific_payment_method_options_client | payment_method_options_grabpay

union Type374 = payment_intent_type_specific_payment_method_options_client | payment_method_options_ideal

union Type375 = payment_intent_type_specific_payment_method_options_client | payment_method_options_interac_present

union Type376 = payment_intent_type_specific_payment_method_options_client | payment_method_options_klarna

union Type377 = payment_intent_type_specific_payment_method_options_client | payment_method_options_konbini

union Type378 = payment_intent_payment_method_options_link | payment_intent_type_specific_payment_method_options_client

union Type379 = payment_intent_payment_method_options_mobilepay | payment_intent_type_specific_payment_method_options_client

union Type38 = Integer | Object

union Type380 = payment_intent_type_specific_payment_method_options_client | payment_method_options_oxxo

union Type381 = payment_intent_type_specific_payment_method_options_client | payment_method_options_p24

union Type382 = payment_intent_type_specific_payment_method_options_client | payment_method_options_paynow

union Type383 = payment_intent_type_specific_payment_method_options_client | payment_method_options_paypal

union Type384 = payment_intent_type_specific_payment_method_options_client | payment_method_options_pix

union Type385 = payment_intent_type_specific_payment_method_options_client | payment_method_options_promptpay

union Type386 = payment_intent_type_specific_payment_method_options_client | payment_method_options_revolut_pay

union Type387 = payment_intent_payment_method_options_sepa_debit | payment_intent_type_specific_payment_method_options_client

union Type388 = payment_intent_type_specific_payment_method_options_client | payment_method_options_sofort

union Type389 = payment_intent_payment_method_options_swish | payment_intent_type_specific_payment_method_options_client

union Type39 = Integer | Object

union Type390 = payment_intent_payment_method_options_us_bank_account | payment_intent_type_specific_payment_method_options_client

union Type391 = payment_intent_type_specific_payment_method_options_client | payment_method_options_wechat_pay

union Type392 = payment_intent_type_specific_payment_method_options_client | payment_method_options_zip

union Type393 = payment_method_options_card_installments

union Type394 = payment_method_options_card_mandate_options

union Type395 = String | application | deleted_application

union Type396 = payment_links_resource_consent_collection

union Type397 = payment_links_resource_invoice_creation

union Type398 = String | account

union Type399 = payment_links_resource_payment_intent_data

union Type4 = Integer | Object

union Type40 = Integer | Object

union Type400 = payment_links_resource_restrictions

union Type401 = payment_links_resource_shipping_address_collection

union Type402 = payment_links_resource_subscription_data

union Type403 = payment_links_resource_transfer_data

union Type404 = connect_account_reference

union Type405 = payment_links_resource_payment_method_reuse_agreement

union Type406 = payment_links_resource_custom_text_position

union Type407 = payment_links_resource_custom_text_position

union Type408 = payment_links_resource_custom_text_position

union Type409 = payment_links_resource_custom_text_position

union Type41 = Integer | Object

union Type410 = payment_links_resource_invoice_settings

union Type411 = connect_account_reference

union Type412 = invoice_setting_rendering_options

union Type413 = String | shipping_rate

union Type414 = subscriptions_trials_resource_trial_settings

union Type415 = String | account

union Type416 = String | customer

union Type417 = payment_method_card_checks

union Type418 = payment_method_card_generated_card

union Type419 = networks

union Type42 = Integer | Object

union Type420 = three_d_secure_usage

union Type421 = payment_method_card_wallet

union Type422 = card_generated_from_payment_method_details

union Type423 = String | setup_attempt

union Type424 = payment_method_card_present_networks

union Type425 = address

union Type426 = address

union Type427 = address

union Type428 = address

union Type429 = String | payment_method

union Type43 = Integer | Object

union Type430 = String | mandate

union Type431 = payment_method_details_card_checks

union Type432 = payment_method_details_card_installments

union Type433 = payment_method_details_card_network_token

union Type434 = three_d_secure_details_charge

union Type435 = payment_method_details_card_wallet

union Type436 = payment_method_details_card_installments_plan

union Type437 = payment_method_details_card_present_offline

union Type438 = payment_method_details_card_present_receipt

union Type439 = address

union Type44 = String

union Type440 = address

union Type441 = address

union Type442 = address

union Type443 = String | payment_method

union Type444 = String | mandate

union Type445 = payment_method_details_interac_present_receipt

union Type446 = payment_method_details_konbini_store

union Type447 = internal_card

union Type448 = paypal_seller_protection

union Type449 = String | payment_method

union Type45 = Integer | Object

union Type450 = String | mandate

union Type451 = String | mandate

union Type452 = payment_method_card_present_networks

union Type453 = payment_flows_private_payment_methods_klarna_dob

union Type454 = payment_method_details_card_installments_plan

union Type455 = sepa_debit_generated_from

union Type456 = us_bank_account_networks

union Type457 = payment_method_us_bank_account_status_details

union Type458 = payment_pages_checkout_session_after_expiration_recovery

union Type459 = connect_account_reference

union Type46 = Integer | Object

union Type460 = payment_pages_checkout_session_payment_method_reuse_agreement

union Type461 = payment_pages_checkout_session_custom_text_position

union Type462 = payment_pages_checkout_session_custom_text_position

union Type463 = payment_pages_checkout_session_custom_text_position

union Type464 = payment_pages_checkout_session_custom_text_position

union Type465 = address

union Type466 = connect_account_reference

union Type467 = invoice_setting_rendering_options

union Type468 = String | shipping_rate

union Type469 = String | shipping_rate

union Type47 = Integer | Object

union Type470 = String | balance_transaction

union Type471 = String | bank_account | card | deleted_bank_account | deleted_card

union Type472 = String | balance_transaction

union Type473 = String | payout

union Type474 = String | payout

union Type475 = legal_entity_japan_address

union Type476 = legal_entity_japan_address

union Type477 = person_future_requirements

union Type478 = person_requirements

union Type479 = String | deleted_product | product

union Type48 = Integer | Object

union Type480 = transform_usage

union Type481 = portal_flows_flow_subscription_cancel

union Type482 = portal_flows_flow_subscription_update

union Type483 = portal_flows_flow_subscription_update_confirm

union Type484 = portal_flows_after_completion_hosted_confirmation

union Type485 = portal_flows_after_completion_redirect

union Type486 = portal_flows_retention

union Type487 = portal_flows_coupon_offer

union Type488 = custom_unit_amount

union Type489 = String | deleted_product | product

union Type49 = Integer | Object

union Type490 = recurring

union Type491 = transform_quantity

union Type492 = String | price

union Type493 = package_dimensions

union Type494 = String | tax_code

union Type495 = String | customer | deleted_customer

union Type496 = String | application | deleted_application

union Type497 = String | customer | deleted_customer

union Type498 = quotes_resource_from_quote

union Type499 = String | deleted_invoice | invoice

union Type5 = Integer | Object

union Type50 = Integer | Object

union Type500 = String | account

union Type501 = String | subscription

union Type502 = String | subscription_schedule

union Type503 = String | test_helpers.test_clock

union Type504 = quotes_resource_transfer_data

union Type505 = connect_account_reference

union Type506 = quotes_resource_recurring

union Type507 = String | quote

union Type508 = String | account

union Type509 = String | charge

union Type51 = Integer | Object

union Type510 = String | payment_intent

union Type511 = String | balance_transaction

union Type512 = String | charge

union Type513 = String | balance_transaction

union Type514 = String | payment_intent

union Type515 = String | transfer_reversal

union Type516 = String | transfer_reversal

union Type517 = refund_next_action_display_details

union Type518 = file

union Type519 = String | charge

union Type52 = Integer | Object

union Type520 = radar_review_resource_location

union Type521 = String | payment_intent

union Type522 = radar_review_resource_session

union Type523 = file

union Type524 = connect_account_reference

union Type525 = String | charge

union Type526 = String | setup_attempt

union Type527 = String | application

union Type528 = String | customer | deleted_customer

union Type529 = String | account

union Type53 = Integer | Object

union Type530 = String | payment_method

union Type531 = api_errors

union Type532 = String | setup_intent

union Type533 = String | payment_method

union Type534 = String | mandate

union Type535 = setup_attempt_payment_method_details_card_checks

union Type536 = three_d_secure_details

union Type537 = setup_attempt_payment_method_details_card_wallet

union Type538 = String | payment_method

union Type539 = String | payment_method

union Type54 = Integer | Object

union Type540 = String | mandate

union Type541 = String | payment_method

union Type542 = String | mandate

union Type543 = String | application

union Type544 = payment_flows_automatic_payment_methods_setup_intent

union Type545 = String | customer | deleted_customer

union Type546 = api_errors

union Type547 = String | setup_attempt

union Type548 = String | mandate

union Type549 = setup_intent_next_action

union Type55 = Integer | Object

union Type550 = String | account

union Type551 = String | payment_method

union Type552 = payment_method_config_biz_payment_method_configuration_details

union Type553 = setup_intent_payment_method_options

union Type554 = String | mandate

union Type555 = setup_intent_payment_method_options_acss_debit | setup_intent_type_specific_payment_method_options_client

union Type556 = setup_intent_payment_method_options_link | setup_intent_type_specific_payment_method_options_client

union Type557 = setup_intent_payment_method_options_paypal | setup_intent_type_specific_payment_method_options_client

union Type558 = setup_intent_payment_method_options_sepa_debit | setup_intent_type_specific_payment_method_options_client

union Type559 = setup_intent_payment_method_options_us_bank_account | setup_intent_type_specific_payment_method_options_client

union Type56 = Integer | Object

union Type560 = setup_intent_payment_method_options_card_mandate_options

union Type561 = shipping_rate_delivery_estimate

union Type562 = String | tax_code

union Type563 = shipping_rate_delivery_estimate_bound

union Type564 = shipping_rate_delivery_estimate_bound

union Type565 = source_owner

union Type566 = address

union Type567 = address

union Type568 = String | application | deleted_application

union Type569 = subscriptions_resource_billing_cycle_anchor_config

union Type57 = Integer | Object

union Type570 = subscription_billing_thresholds

union Type571 = cancellation_details

union Type572 = String | customer | deleted_customer

union Type573 = String | payment_method

union Type574 = String | bank_account | card | source

union Type575 = discount

union Type576 = String | invoice

union Type577 = String | account

union Type578 = subscriptions_resource_pause_collection

union Type579 = subscriptions_resource_payment_settings

union Type58 = Integer | Object

union Type580 = subscription_pending_invoice_item_interval

union Type581 = String | setup_intent

union Type582 = subscriptions_resource_pending_update

union Type583 = String | subscription_schedule

union Type584 = String | test_helpers.test_clock

union Type585 = subscription_transfer_data

union Type586 = subscriptions_trials_resource_trial_settings

union Type587 = connect_account_reference

union Type588 = subscription_item_billing_thresholds

union Type589 = String | application | deleted_application

union Type59 = Integer | Object

union Type590 = subscription_schedule_current_phase

union Type591 = String | customer | deleted_customer

union Type592 = String | subscription

union Type593 = String | test_helpers.test_clock

union Type594 = String | deleted_price | price

union Type595 = subscription_item_billing_thresholds

union Type596 = String | deleted_price | price

union Type597 = subscription_billing_thresholds

union Type598 = String | coupon | deleted_coupon

union Type599 = String | payment_method

union Type6 = Integer | Object

union Type60 = Integer | Object

union Type600 = invoice_setting_subscription_schedule_phase_setting

union Type601 = String | account

union Type602 = subscription_transfer_data

union Type603 = subscription_billing_thresholds

union Type604 = String | payment_method

union Type605 = String | account

union Type606 = subscription_transfer_data

union Type607 = connect_account_reference

union Type608 = String | account

union Type609 = invoice_payment_method_options_acss_debit

union Type61 = Integer | Object

union Type610 = invoice_payment_method_options_bancontact

union Type611 = subscription_payment_method_options_card

union Type612 = invoice_payment_method_options_customer_balance

union Type613 = invoice_payment_method_options_konbini

union Type614 = invoice_payment_method_options_sepa_debit

union Type615 = invoice_payment_method_options_us_bank_account

union Type616 = subscriptions_resource_payment_method_options

union Type617 = tax_product_resource_tax_calculation_shipping_cost

union Type618 = tax_product_resource_tax_settings_head_office

union Type619 = tax_product_resource_tax_transaction_resource_reversal

union Type62 = Integer | Object

union Type620 = tax_product_resource_tax_transaction_shipping_cost

union Type621 = tax_product_resource_tax_transaction_line_item_resource_reversal

union Type622 = String | account

union Type623 = String | application

union Type624 = String | customer

union Type625 = String | customer

union Type626 = tax_i_ds_owner

union Type627 = tax_id_verification

union Type628 = tax_product_resource_postal_address

union Type629 = tax_product_resource_line_item_tax_rate_details

union Type63 = Integer | Object

union Type630 = terminal_reader_reader_resource_reader_action

union Type631 = String | terminal.location

union Type632 = String | file

union Type633 = String | payment_intent

union Type634 = String | setup_intent

union Type635 = String | charge

union Type636 = String | payment_intent

union Type637 = String | refund

union Type638 = terminal_reader_reader_resource_cart

union Type639 = String | balance_transaction

union Type64 = Integer | Object

union Type640 = source

union Type641 = String | balance_transaction

union Type642 = String | account

union Type643 = String | charge

union Type644 = String | charge

union Type645 = String | account

union Type646 = String | balance_transaction

union Type647 = String | refund

union Type648 = String | refund

union Type649 = String | transfer

union Type65 = Integer | Object

union Type650 = String | treasury.transaction

union Type651 = treasury_received_debits_resource_debit_reversal_linked_flows

union Type652 = String | treasury.transaction

union Type653 = treasury_financial_accounts_resource_platform_restrictions

union Type654 = treasury_inbound_transfers_resource_failure_details

union Type655 = inbound_transfers

union Type656 = String | treasury.transaction

union Type657 = outbound_payments_payment_method_details

union Type658 = treasury_outbound_payments_resource_outbound_payment_resource_end_user_details

union Type659 = treasury_outbound_payments_resource_returned_status

union Type66 = Integer | Object

union Type660 = String | treasury.transaction

union Type661 = treasury_outbound_transfers_resource_returned_details

union Type662 = String | treasury.transaction

union Type663 = treasury_received_credits_resource_reversal_details

union Type664 = String | treasury.transaction

union Type665 = treasury_received_debits_resource_reversal_details

union Type666 = String | treasury.transaction

union Type667 = treasury_transactions_resource_flow_details

union Type668 = treasury_transactions_resource_flow_details

union Type669 = String | treasury.transaction

union Type67 = Integer | Object

union Type670 = treasury_financial_accounts_resource_closed_status_details

union Type671 = String | treasury.transaction

union Type672 = String | treasury.transaction

union Type673 = treasury_received_credits_resource_source_flows_details

union Type68 = deleted_terminal.configuration | terminal.configuration

union Type69 = deleted_terminal.location | terminal.location

union Type7 = Integer | Object

union Type70 = deleted_terminal.reader | terminal.reader

union Type71 = Integer | Object

union Type72 = Integer | Object

union Type73 = Integer | Object

union Type74 = Integer | Object

union Type75 = Integer | Object

union Type76 = Integer | Object

union Type77 = Integer | Object

union Type78 = Integer | Object

union Type79 = account_business_profile

union Type8 = Integer | Object

union Type80 = account_settings

union Type81 = String | file

union Type82 = String | file

union Type83 = account_annual_revenue

union Type84 = address

union Type85 = bank_account | card | source

union Type86 = String | account

union Type87 = String | application

union Type88 = String | balance_transaction

union Type89 = String | charge

union Type9 = Integer | Object

union Type90 = String | charge

union Type91 = connect_account_reference

union Type92 = String | application_fee | charge | connect_collection_transfer | customer_cash_balance_transaction | dispute | fee_refund | issuing.authorization | issuing.dispute | issuing.transaction | payout | platform_tax_fee | refund | reserve_transaction | tax_deducted_at_source | topup | transfer | transfer_reversal

union Type93 = String | account

union Type94 = String | customer | deleted_customer

union Type95 = external_account_requirements

union Type96 = external_account_requirements

union Type97 = String | account

union Type98 = String | customer

union Type99 = address

type Account {
  businessProfile: Type79
  businessType: String
  capabilities: Object
  chargesEnabled: Boolean
  company: Object
  controller: Object
  country: String
  created: Int
  defaultCurrency: String
  detailsSubmitted: Boolean
  email: String
  externalAccounts: Object
  futureRequirements: Object
  id: String!
  individual: Object
  metadata: Object
  object: String!
  payoutsEnabled: Boolean
  requirements: Object
  settings: Type80
  tosAcceptance: Object
  type: String
}

type AccountAnnualRevenue {
  amount: Int
  currency: String
  fiscalYearEnd: String
}

type AccountBacsDebitPaymentsSettings {
  displayName: String
  serviceUserNumber: String
}

type AccountBrandingSettings {
  icon: Type81
  logo: Type82
  primaryColor: String
  secondaryColor: String
}

type AccountBusinessProfile {
  annualRevenue: Type83
  estimatedWorkerCount: Int
  mcc: String
  monthlyEstimatedRevenue: Object
  name: String
  productDescription: String
  supportAddress: Type84
  supportEmail: String
  supportPhone: String
  supportUrl: String
  url: String
}

type AccountCapabilities {
  acssDebitPayments: String
  affirmPayments: String
  afterpayClearpayPayments: String
  amazonPayPayments: String
  auBecsDebitPayments: String
  bacsDebitPayments: String
  bancontactPayments: String
  bankTransferPayments: String
  blikPayments: String
  boletoPayments: String
  cardIssuing: String
  cardPayments: String
  cartesBancairesPayments: String
  cashappPayments: String
  epsPayments: String
  fpxPayments: String
  giropayPayments: String
  grabpayPayments: String
  idealPayments: String
  indiaInternationalPayments: String
  jcbPayments: String
  klarnaPayments: String
  konbiniPayments: String
  legacyPayments: String
  linkPayments: String
  mobilepayPayments: String
  oxxoPayments: String
  p24Payments: String
  paynowPayments: String
  promptpayPayments: String
  revolutPayPayments: String
  sepaDebitPayments: String
  sofortPayments: String
  swishPayments: String
  taxReportingUs1099K: String
  taxReportingUs1099Misc: String
  transfers: String
  treasury: String
  usBankAccountAchPayments: String
  zipPayments: String
}

type AccountCapabilityFutureRequirements {
  alternatives: Array
  currentDeadline: Int
  currentlyDue: Array!
  disabledReason: String
  errors: Array!
  eventuallyDue: Array!
  pastDue: Array!
  pendingVerification: Array!
}

type AccountCapabilityRequirements {
  alternatives: Array
  currentDeadline: Int
  currentlyDue: Array!
  disabledReason: String
  errors: Array!
  eventuallyDue: Array!
  pastDue: Array!
  pendingVerification: Array!
}

type AccountCardIssuingSettings {
  tosAcceptance: Object
}

type AccountCardPaymentsSettings {
  declineOn: Object
  statementDescriptorPrefix: String
  statementDescriptorPrefixKana: String
  statementDescriptorPrefixKanji: String
}

type AccountDashboardSettings {
  displayName: String
  timezone: String
}

type AccountDeclineChargeOn {
  avsFailure: Boolean!
  cvcFailure: Boolean!
}

type AccountFutureRequirements {
  alternatives: Array
  currentDeadline: Int
  currentlyDue: Array
  disabledReason: String
  errors: Array
  eventuallyDue: Array
  pastDue: Array
  pendingVerification: Array
}

type AccountInvoicesSettings {
  defaultAccountTaxIds: Array
}

type AccountLink {
  created: Int!
  expiresAt: Int!
  object: String!
  url: String!
}

type AccountMonthlyEstimatedRevenue {
  amount: Int!
  currency: String!
}

type AccountPaymentsSettings {
  statementDescriptor: String
  statementDescriptorKana: String
  statementDescriptorKanji: String
  statementDescriptorPrefixKana: String
  statementDescriptorPrefixKanji: String
}

type AccountPayoutSettings {
  debitNegativeBalances: Boolean!
  schedule: Object!
  statementDescriptor: String
}

type AccountRequirements {
  alternatives: Array
  currentDeadline: Int
  currentlyDue: Array
  disabledReason: String
  errors: Array
  eventuallyDue: Array
  pastDue: Array
  pendingVerification: Array
}

type AccountRequirementsAlternative {
  alternativeFieldsDue: Array!
  originalFieldsDue: Array!
}

type AccountRequirementsError {
  code: String!
  reason: String!
  requirement: String!
}

type AccountSepaDebitPaymentsSettings {
  creditorId: String
}

type AccountSession {
  account: String!
  clientSecret: String!
  components: Object!
  expiresAt: Int!
  livemode: Boolean!
  object: String!
}

type AccountSettings {
  bacsDebitPayments: Object
  branding: Object!
  cardIssuing: Object
  cardPayments: Object!
  dashboard: Object!
  invoices: Object
  payments: Object!
  payouts: Object
  sepaDebitPayments: Object
  treasury: Object
}

type AccountTermsOfService {
  date: Int
  ip: String
  userAgent: String
}

type AccountTosAcceptance {
  date: Int
  ip: String
  serviceAgreement: String
  userAgent: String
}

type AccountTreasurySettings {
  tosAcceptance: Object
}

type AccountUnificationAccountController {
  isController: Boolean
  type: String!
}

type Address {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

type ApiErrors {
  charge: String
  code: String
  declineCode: String
  docUrl: String
  message: String
  param: String
  paymentIntent: Object
  paymentMethod: Object
  paymentMethodType: String
  requestLogUrl: String
  setupIntent: Object
  source: Type85
  type: String!
}

type ApplePayDomain {
  created: Int!
  domainName: String!
  id: String!
  livemode: Boolean!
  object: String!
}

type Application {
  id: String!
  name: String
  object: String!
}

type ApplicationFee {
  account: Type86!
  amount: Int!
  amountRefunded: Int!
  application: Type87!
  balanceTransaction: Type88
  charge: Type89!
  created: Int!
  currency: String!
  id: String!
  livemode: Boolean!
  object: String!
  originatingTransaction: Type90
  refunded: Boolean!
  refunds: Object!
}

type Apps.secret {
  created: Int!
  deleted: Boolean
  expiresAt: Int
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  payload: String
  scope: Object!
}

type AutomaticTax {
  enabled: Boolean!
  liability: Type91
  status: String
}

type Balance {
  available: Array!
  connectReserved: Array
  instantAvailable: Array
  issuing: Object
  livemode: Boolean!
  object: String!
  pending: Array!
}

type BalanceAmount {
  amount: Int!
  currency: String!
  sourceTypes: Object
}

type BalanceAmountBySourceType {
  bankAccount: Int
  card: Int
  fpx: Int
}

type BalanceAmountNet {
  amount: Int!
  currency: String!
  sourceTypes: Object
}

type BalanceDetail {
  available: Array!
}

type BalanceTransaction {
  amount: Int!
  availableOn: Int!
  created: Int!
  currency: String!
  description: String
  exchangeRate: Number
  fee: Int!
  feeDetails: Array!
  id: String!
  net: Int!
  object: String!
  reportingCategory: String!
  source: Type92
  status: String!
  type: String!
}

type BankAccount {
  account: Type93
  accountHolderName: String
  accountHolderType: String
  accountType: String
  availablePayoutMethods: Array
  bankName: String
  country: String!
  currency: String!
  customer: Type94
  defaultForCurrency: Boolean
  fingerprint: String
  futureRequirements: Type95
  id: String!
  last4: String!
  metadata: Object
  object: String!
  requirements: Type96
  routingNumber: String
  status: String!
}

type BankConnectionsResourceAccountholder {
  account: Type97
  customer: Type98
  type: String!
}

type BankConnectionsResourceBalance {
  asOf: Int!
  cash: Object
  credit: Object
  current: Object!
  type: String!
}

type BankConnectionsResourceBalanceApiResourceCashBalance {
  available: Object
}

type BankConnectionsResourceBalanceApiResourceCreditBalance {
  used: Object
}

type BankConnectionsResourceBalanceRefresh {
  lastAttemptedAt: Int!
  nextRefreshAvailableAt: Int
  status: String!
}

type BankConnectionsResourceLinkAccountSessionFilters {
  countries: Array
}

type BankConnectionsResourceOwnershipRefresh {
  lastAttemptedAt: Int!
  status: String!
}

type BankConnectionsResourceTransactionRefresh {
  id: String!
  lastAttemptedAt: Int!
  nextRefreshAvailableAt: Int
  status: String!
}

type BankConnectionsResourceTransactionResourceStatusTransitions {
  postedAt: Int
  voidAt: Int
}

type Billing.meter {
  created: Int!
  customerMapping: Object!
  defaultAggregation: Object!
  displayName: String!
  eventName: String!
  eventTimeWindow: String
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  statusTransitions: Object!
  updated: Int!
  valueSettings: Object!
}

type Billing.meterEvent {
  created: Int!
  eventName: String!
  identifier: String!
  livemode: Boolean!
  object: String!
  payload: Object!
  timestamp: Int!
}

type Billing.meterEventAdjustment {
  livemode: Boolean!
  object: String!
  status: String!
}

type Billing.meterEventSummary {
  aggregatedValue: Number!
  endTime: Int!
  id: String!
  livemode: Boolean!
  meter: String!
  object: String!
  startTime: Int!
}

type BillingDetails {
  address: Type99
  email: String
  name: String
  phone: String
}

type BillingMeterResourceAggregationSettings {
  formula: String!
}

type BillingMeterResourceBillingMeterStatusTransitions {
  deactivatedAt: Int
}

type BillingMeterResourceBillingMeterValue {
  eventPayloadKey: String!
}

type BillingMeterResourceCustomerMappingSettings {
  eventPayloadKey: String!
  type: String!
}

type BillingPortal.configuration {
  active: Boolean!
  application: Type100
  businessProfile: Object!
  created: Int!
  defaultReturnUrl: String
  features: Object!
  id: String!
  isDefault: Boolean!
  livemode: Boolean!
  loginPage: Object!
  metadata: Object
  object: String!
  updated: Int!
}

type BillingPortal.session {
  configuration: Type101!
  created: Int!
  customer: String!
  flow: Type102
  id: String!
  livemode: Boolean!
  locale: String
  object: String!
  onBehalfOf: String
  returnUrl: String
  url: String!
}

type CancellationDetails {
  comment: String
  feedback: String
  reason: String
}

type Capability {
  account: Type103!
  futureRequirements: Object
  id: String!
  object: String!
  requested: Boolean!
  requestedAt: Int
  requirements: Object
  status: String!
}

type Card {
  account: Type104
  addressCity: String
  addressCountry: String
  addressLine1: String
  addressLine1Check: String
  addressLine2: String
  addressState: String
  addressZip: String
  addressZipCheck: String
  availablePayoutMethods: Array
  brand: String!
  country: String
  currency: String
  customer: Type105
  cvcCheck: String
  defaultForCurrency: Boolean
  dynamicLast4: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String!
  id: String!
  last4: String!
  metadata: Object
  name: String
  networks: Object
  object: String!
  status: String
  tokenizationMethod: String
}

type CardGeneratedFromPaymentMethodDetails {
  cardPresent: Object
  type: String!
}

type CardIssuingAccountTermsOfService {
  date: Int
  ip: String
  userAgent: String
}

type CashBalance {
  available: Object
  customer: String!
  livemode: Boolean!
  object: String!
  settings: Object!
}

type Charge {
  amount: Int!
  amountCaptured: Int!
  amountRefunded: Int!
  application: Type106
  applicationFee: Type107
  applicationFeeAmount: Int
  balanceTransaction: Type108
  billingDetails: Object!
  calculatedStatementDescriptor: String
  captured: Boolean!
  created: Int!
  currency: String!
  customer: Type109
  description: String
  disputed: Boolean!
  failureBalanceTransaction: Type110
  failureCode: String
  failureMessage: String
  fraudDetails: Type111
  id: String!
  invoice: Type112
  livemode: Boolean!
  metadata: Object!
  object: String!
  onBehalfOf: Type113
  outcome: Type114
  paid: Boolean!
  paymentIntent: Type115
  paymentMethod: String
  paymentMethodDetails: Type116
  radarOptions: Object
  receiptEmail: String
  receiptNumber: String
  receiptUrl: String
  refunded: Boolean!
  refunds: Object
  review: Type117
  shipping: Type118
  sourceTransfer: Type119
  statementDescriptor: String
  statementDescriptorSuffix: String
  status: String!
  transfer: Type120
  transferData: Type121
  transferGroup: String
}

type ChargeFraudDetails {
  stripeReport: String
  userReport: String
}

type ChargeOutcome {
  networkStatus: String
  reason: String
  riskLevel: String
  riskScore: Int
  rule: Type122
  sellerMessage: String
  type: String!
}

type ChargeTransferData {
  amount: Int
  destination: Type123!
}

type Checkout.session {
  afterExpiration: Type124
  allowPromotionCodes: Boolean
  amountSubtotal: Int
  amountTotal: Int
  automaticTax: Object!
  billingAddressCollection: String
  cancelUrl: String
  clientReferenceId: String
  clientSecret: String
  consent: Type125
  consentCollection: Type126
  created: Int!
  currency: String
  currencyConversion: Type127
  customFields: Array!
  customText: Object!
  customer: Type128
  customerCreation: String
  customerDetails: Type129
  customerEmail: String
  expiresAt: Int!
  id: String!
  invoice: Type130
  invoiceCreation: Type131
  lineItems: Object
  livemode: Boolean!
  locale: String
  metadata: Object
  mode: String!
  object: String!
  paymentIntent: Type132
  paymentLink: Type133
  paymentMethodCollection: String
  paymentMethodConfigurationDetails: Type134
  paymentMethodOptions: Type135
  paymentMethodTypes: Array!
  paymentStatus: String!
  phoneNumberCollection: Object
  recoveredFrom: String
  redirectOnCompletion: String
  returnUrl: String
  setupIntent: Type136
  shippingAddressCollection: Type137
  shippingCost: Type138
  shippingDetails: Type139
  shippingOptions: Array!
  status: String
  submitType: String
  subscription: Type140
  successUrl: String
  taxIdCollection: Object
  totalDetails: Type141
  uiMode: String
  url: String
}

type CheckoutAcssDebitMandateOptions {
  customMandateUrl: String
  defaultFor: Array
  intervalDescription: String
  paymentSchedule: String
  transactionType: String
}

type CheckoutAcssDebitPaymentMethodOptions {
  currency: String
  mandateOptions: Object
  setupFutureUsage: String
  verificationMethod: String
}

type CheckoutAffirmPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutAfterpayClearpayPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutAlipayPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutAuBecsDebitPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutBacsDebitPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutBancontactPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutBoletoPaymentMethodOptions {
  expiresAfterDays: Int!
  setupFutureUsage: String
}

type CheckoutCardInstallmentsOptions {
  enabled: Boolean
}

type CheckoutCardPaymentMethodOptions {
  installments: Object
  requestThreeDSecure: String!
  setupFutureUsage: String
  statementDescriptorSuffixKana: String
  statementDescriptorSuffixKanji: String
}

type CheckoutCashappPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutCustomerBalanceBankTransferPaymentMethodOptions {
  euBankTransfer: Object
  requestedAddressTypes: Array
  type: String
}

type CheckoutCustomerBalancePaymentMethodOptions {
  bankTransfer: Object
  fundingType: String
  setupFutureUsage: String
}

type CheckoutEpsPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutFpxPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutGiropayPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutGrabPayPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutIdealPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutKlarnaPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutKonbiniPaymentMethodOptions {
  expiresAfterDays: Int
  setupFutureUsage: String
}

type CheckoutLinkPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutOxxoPaymentMethodOptions {
  expiresAfterDays: Int!
  setupFutureUsage: String
}

type CheckoutP24PaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutPaynowPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutPaypalPaymentMethodOptions {
  captureMethod: String
  preferredLocale: String
  reference: String
  setupFutureUsage: String
}

type CheckoutPixPaymentMethodOptions {
  expiresAfterSeconds: Int
}

type CheckoutSepaDebitPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutSessionPaymentMethodOptions {
  acssDebit: Object
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  boleto: Object
  card: Object
  cashapp: Object
  customerBalance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  klarna: Object
  konbini: Object
  link: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  revolutPay: Object
  sepaDebit: Object
  sofort: Object
  swish: Object
  usBankAccount: Object
}

type CheckoutSofortPaymentMethodOptions {
  setupFutureUsage: String
}

type CheckoutSwishPaymentMethodOptions {
  reference: String
}

type CheckoutUsBankAccountPaymentMethodOptions {
  financialConnections: Object
  setupFutureUsage: String
  verificationMethod: String
}

type Climate.order {
  amountFees: Int!
  amountSubtotal: Int!
  amountTotal: Int!
  beneficiary: Object
  canceledAt: Int
  cancellationReason: String
  certificate: String
  confirmedAt: Int
  created: Int!
  currency: String!
  delayedAt: Int
  deliveredAt: Int
  deliveryDetails: Array!
  expectedDeliveryYear: Int!
  id: String!
  livemode: Boolean!
  metadata: Object!
  metricTons: String!
  object: String!
  product: Type142!
  productSubstitutedAt: Int
  status: String!
}

type Climate.product {
  created: Int!
  currentPricesPerMetricTon: Object!
  deliveryYear: Int
  id: String!
  livemode: Boolean!
  metricTonsAvailable: String!
  name: String!
  object: String!
  suppliers: Array!
}

type Climate.supplier {
  id: String!
  infoUrl: String!
  livemode: Boolean!
  locations: Array!
  name: String!
  object: String!
  removalPathway: String!
}

type ClimateRemovalsBeneficiary {
  publicName: String!
}

type ClimateRemovalsLocation {
  city: String
  country: String!
  latitude: Number
  longitude: Number
  region: String
}

type ClimateRemovalsOrderDeliveries {
  deliveredAt: Int!
  location: Type143
  metricTons: String!
  registryUrl: String
  supplier: Object!
}

type ClimateRemovalsProductsPrice {
  amountFees: Int!
  amountSubtotal: Int!
  amountTotal: Int!
}

type ConfirmationToken {
  created: Int!
  expiresAt: Int
  id: String!
  livemode: Boolean!
  mandateData: Type144
  object: String!
  paymentIntent: String
  paymentMethodPreview: Type145
  returnUrl: String
  setupFutureUsage: String
  setupIntent: String
  shipping: Type146
  useStripeSdk: Boolean!
}

type ConfirmationTokensResourceMandateData {
  customerAcceptance: Object!
}

type ConfirmationTokensResourceMandateDataResourceCustomerAcceptance {
  online: Type147
  type: String!
}

type ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline {
  ipAddress: String
  userAgent: String
}

type ConfirmationTokensResourcePaymentMethodPreview {
  acssDebit: Object
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  billingDetails: Object!
  blik: Object
  boleto: Object
  card: Object
  cardPresent: Object
  cashapp: Object
  customerBalance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  interacPresent: Object
  klarna: Object
  konbini: Object
  link: Object
  mobilepay: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  revolutPay: Object
  sepaDebit: Object
  sofort: Object
  swish: Object
  type: String!
  usBankAccount: Object
  wechatPay: Object
  zip: Object
}

type ConfirmationTokensResourceShipping {
  address: Object!
  name: String!
  phone: String
}

type ConnectAccountReference {
  account: Type148
  type: String!
}

type ConnectCollectionTransfer {
  amount: Int!
  currency: String!
  destination: Type149!
  id: String!
  livemode: Boolean!
  object: String!
}

type ConnectEmbeddedAccountConfig {
  enabled: Boolean!
  features: Object!
}

type ConnectEmbeddedAccountSessionCreateComponents {
  accountOnboarding: Object!
  documents: Object!
  paymentDetails: Object!
  payments: Object!
  payouts: Object!
}

type ConnectEmbeddedBaseConfigClaim {
  enabled: Boolean!
  features: Object!
}

type ConnectEmbeddedPaymentsConfig {
  enabled: Boolean!
  features: Object!
}

type ConnectEmbeddedPaymentsFeatures {
  capturePayments: Boolean!
  destinationOnBehalfOfChargeManagement: Boolean
  disputeManagement: Boolean!
  refundManagement: Boolean!
}

type ConnectEmbeddedPayoutsConfig {
  enabled: Boolean!
  features: Object!
}

type ConnectEmbeddedPayoutsFeatures {
  editPayoutSchedule: Boolean!
  instantPayouts: Boolean!
  standardPayouts: Boolean!
}

type CountrySpec {
  defaultCurrency: String!
  id: String!
  object: String!
  supportedBankAccountCurrencies: Object!
  supportedPaymentCurrencies: Array!
  supportedPaymentMethods: Array!
  supportedTransferCountries: Array!
  verificationFields: Object!
}

type CountrySpecVerificationFieldDetails {
  additional: Array!
  minimum: Array!
}

type CountrySpecVerificationFields {
  company: Object!
  individual: Object!
}

type Coupon {
  amountOff: Int
  appliesTo: Object
  created: Int!
  currency: String
  currencyOptions: Object
  duration: String!
  durationInMonths: Int
  id: String!
  livemode: Boolean!
  maxRedemptions: Int
  metadata: Object
  name: String
  object: String!
  percentOff: Number
  redeemBy: Int
  timesRedeemed: Int!
  valid: Boolean!
}

type CouponAppliesTo {
  products: Array!
}

type CouponCurrencyOption {
  amountOff: Int!
}

type CreditNote {
  amount: Int!
  amountShipping: Int!
  created: Int!
  currency: String!
  customer: Type150!
  customerBalanceTransaction: Type151
  discountAmount: Int!
  discountAmounts: Array!
  effectiveAt: Int
  id: String!
  invoice: Type152!
  lines: Object!
  livemode: Boolean!
  memo: String
  metadata: Object
  number: String!
  object: String!
  outOfBandAmount: Int
  pdf: String!
  reason: String
  refund: Type153
  shippingCost: Type154
  status: String!
  subtotal: Int!
  subtotalExcludingTax: Int
  taxAmounts: Array!
  total: Int!
  totalExcludingTax: Int
  type: String!
  voidedAt: Int
}

type CreditNoteLineItem {
  amount: Int!
  amountExcludingTax: Int
  description: String
  discountAmount: Int!
  discountAmounts: Array!
  id: String!
  invoiceLineItem: String
  livemode: Boolean!
  object: String!
  quantity: Int
  taxAmounts: Array!
  taxRates: Array!
  type: String!
  unitAmount: Int
  unitAmountDecimal: String
  unitAmountExcludingTax: String
}

type CreditNoteTaxAmount {
  amount: Int!
  inclusive: Boolean!
  taxRate: Type155!
  taxabilityReason: String
  taxableAmount: Int
}

type CurrencyOption {
  customUnitAmount: Type156
  taxBehavior: String
  tiers: Array
  unitAmount: Int
  unitAmountDecimal: String
}

type CustomUnitAmount {
  maximum: Int
  minimum: Int
  preset: Int
}

type Customer {
  address: Type157
  balance: Int
  cashBalance: Type158
  created: Int!
  currency: String
  defaultSource: Type159
  delinquent: Boolean
  description: String
  discount: Type160
  email: String
  id: String!
  invoiceCreditBalance: Object
  invoicePrefix: String
  invoiceSettings: Object
  livemode: Boolean!
  metadata: Object
  name: String
  nextInvoiceSequence: Int
  object: String!
  phone: String
  preferredLocales: Array
  shipping: Type161
  sources: Object
  subscriptions: Object
  tax: Object
  taxExempt: String
  taxIds: Object
  testClock: Type162
}

type CustomerAcceptance {
  acceptedAt: Int
  offline: Object
  online: Object
  type: String!
}

type CustomerBalanceCustomerBalanceSettings {
  reconciliationMode: String!
  usingMerchantDefault: Boolean!
}

type CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft {
  balanceTransaction: Type163!
  linkedTransaction: Type164!
}

type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
  paymentIntent: Type165!
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
  bankTransfer: Object!
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
  euBankTransfer: Object
  gbBankTransfer: Object
  jpBankTransfer: Object
  reference: String
  type: String!
  usBankTransfer: Object
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
  bic: String
  ibanLast4: String
  senderName: String
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer {
  accountNumberLast4: String
  senderName: String
  sortCode: String
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer {
  senderBank: String
  senderBranch: String
  senderName: String
}

type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer {
  network: String
  senderName: String
}

type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
  refund: Type166!
}

type CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance {
  balanceTransaction: Type167!
}

type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
  paymentIntent: Type168!
}

type CustomerBalanceTransaction {
  amount: Int!
  created: Int!
  creditNote: Type169
  currency: String!
  customer: Type170!
  description: String
  endingBalance: Int!
  id: String!
  invoice: Type171
  livemode: Boolean!
  metadata: Object
  object: String!
  type: String!
}

type CustomerCashBalanceTransaction {
  adjustedForOverdraft: Object
  appliedToPayment: Object
  created: Int!
  currency: String!
  customer: Type172!
  endingBalance: Int!
  funded: Object
  id: String!
  livemode: Boolean!
  netAmount: Int!
  object: String!
  refundedFromPayment: Object
  transferredToBalance: Object
  type: String!
  unappliedFromPayment: Object
}

type CustomerSession {
  clientSecret: String!
  components: Object
  created: Int!
  customer: Type173!
  expiresAt: Int!
  livemode: Boolean!
  object: String!
}

type CustomerSessionResourceComponents {
  buyButton: Object!
  pricingTable: Object!
}

type CustomerSessionResourceComponentsResourceBuyButton {
  enabled: Boolean!
}

type CustomerSessionResourceComponentsResourcePricingTable {
  enabled: Boolean!
}

type CustomerTax {
  automaticTax: String!
  ipAddress: String
  location: Type174
}

type CustomerTaxLocation {
  country: String!
  source: String!
  state: String
}

type DeletedAccount {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedApplePayDomain {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedApplication {
  deleted: Boolean!
  id: String!
  name: String
  object: String!
}

type DeletedBankAccount {
  currency: String
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedCard {
  currency: String
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedCoupon {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedCustomer {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedDiscount {
  checkoutSession: String
  coupon: Object!
  customer: Type175
  deleted: Boolean!
  id: String!
  invoice: String
  invoiceItem: String
  object: String!
  promotionCode: Type176
  start: Int!
  subscription: String
}

type DeletedInvoice {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedInvoiceitem {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedPerson {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedPlan {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedPrice {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedProduct {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedRadar.valueList {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedRadar.valueListItem {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedSubscriptionItem {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedTaxId {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedTerminal.configuration {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedTerminal.location {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedTerminal.reader {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedTestHelpers.testClock {
  deleted: Boolean!
  id: String!
  object: String!
}

type DeletedWebhookEndpoint {
  deleted: Boolean!
  id: String!
  object: String!
}

type Discount {
  checkoutSession: String
  coupon: Object!
  customer: Type177
  end: Int
  id: String!
  invoice: String
  invoiceItem: String
  object: String!
  promotionCode: Type178
  start: Int!
  subscription: String
}

type DiscountsResourceDiscountAmount {
  amount: Int!
  discount: Type179!
}

type Dispute {
  amount: Int!
  balanceTransactions: Array!
  charge: Type180!
  created: Int!
  currency: String!
  evidence: Object!
  evidenceDetails: Object!
  id: String!
  isChargeRefundable: Boolean!
  livemode: Boolean!
  metadata: Object!
  object: String!
  paymentIntent: Type181
  paymentMethodDetails: Object
  reason: String!
  status: String!
}

type DisputeEvidence {
  accessActivityLog: String
  billingAddress: String
  cancellationPolicy: Type182
  cancellationPolicyDisclosure: String
  cancellationRebuttal: String
  customerCommunication: Type183
  customerEmailAddress: String
  customerName: String
  customerPurchaseIp: String
  customerSignature: Type184
  duplicateChargeDocumentation: Type185
  duplicateChargeExplanation: String
  duplicateChargeId: String
  productDescription: String
  receipt: Type186
  refundPolicy: Type187
  refundPolicyDisclosure: String
  refundRefusalExplanation: String
  serviceDate: String
  serviceDocumentation: Type188
  shippingAddress: String
  shippingCarrier: String
  shippingDate: String
  shippingDocumentation: Type189
  shippingTrackingNumber: String
  uncategorizedFile: Type190
  uncategorizedText: String
}

type DisputeEvidenceDetails {
  dueBy: Int
  hasEvidence: Boolean!
  pastDue: Boolean!
  submissionCount: Int!
}

type DisputePaymentMethodDetails {
  card: Type191
  type: String!
}

type DisputePaymentMethodDetailsCard {
  brand: String!
  networkReasonCode: String
}

type EmailSent {
  emailSentAt: Int!
  emailSentTo: String!
}

type EphemeralKey {
  created: Int!
  expires: Int!
  id: String!
  livemode: Boolean!
  object: String!
  secret: String
}

type Error {
  error: Object!
}

type Event {
  account: String
  apiVersion: String
  created: Int!
  data: Object!
  id: String!
  livemode: Boolean!
  object: String!
  pendingWebhooks: Int!
  request: Type192
  type: String!
}

type ExchangeRate {
  id: String!
  object: String!
  rates: Object!
}

type ExternalAccountRequirements {
  currentlyDue: Array
  errors: Array
  pastDue: Array
  pendingVerification: Array
}

type Fee {
  amount: Int!
  application: String
  currency: String!
  description: String
  type: String!
}

type FeeRefund {
  amount: Int!
  balanceTransaction: Type193
  created: Int!
  currency: String!
  fee: Type194!
  id: String!
  metadata: Object
  object: String!
}

type File {
  created: Int!
  expiresAt: Int
  filename: String
  id: String!
  links: Object
  object: String!
  purpose: String!
  size: Int!
  title: String
  type: String
  url: String
}

type FileLink {
  created: Int!
  expired: Boolean!
  expiresAt: Int
  file: Type195!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  url: String
}

type FinancialConnections.account {
  accountHolder: Type196
  balance: Type197
  balanceRefresh: Type198
  category: String!
  created: Int!
  displayName: String
  id: String!
  institutionName: String!
  last4: String
  livemode: Boolean!
  object: String!
  ownership: Type199
  ownershipRefresh: Type200
  permissions: Array
  status: String!
  subcategory: String!
  subscriptions: Array
  supportedPaymentMethodTypes: Array!
  transactionRefresh: Type201
}

type FinancialConnections.accountOwner {
  email: String
  id: String!
  name: String!
  object: String!
  ownership: String!
  phone: String
  rawAddress: String
  refreshedAt: Int
}

type FinancialConnections.accountOwnership {
  created: Int!
  id: String!
  object: String!
  owners: Object!
}

type FinancialConnections.session {
  accountHolder: Type202
  accounts: Object!
  clientSecret: String!
  filters: Object
  id: String!
  livemode: Boolean!
  object: String!
  permissions: Array!
  prefetch: Array
  returnUrl: String
}

type FinancialConnections.transaction {
  account: String!
  amount: Int!
  currency: String!
  description: String!
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  statusTransitions: Object!
  transactedAt: Int!
  transactionRefresh: String!
  updated: Int!
}

type FinancialReportingFinanceReportRunRunParameters {
  columns: Array
  connectedAccount: String
  currency: String
  intervalEnd: Int
  intervalStart: Int
  payout: String
  reportingCategory: String
  timezone: String
}

type ForwardedRequestContext {
  destinationDuration: Int!
  destinationIpAddress: String!
}

type ForwardedRequestDetails {
  body: String!
  headers: Array!
  httpMethod: String!
}

type ForwardedRequestHeader {
  name: String!
  value: String!
}

type ForwardedResponseDetails {
  body: String!
  headers: Array!
  status: Int!
}

type Forwarding.request {
  config: String!
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  paymentMethod: String!
  replacements: Array!
  requestContext: Type203
  requestDetails: Type204
  responseDetails: Type205
  url: String
}

type FundingInstructions {
  bankTransfer: Object!
  currency: String!
  fundingType: String!
  livemode: Boolean!
  object: String!
}

type FundingInstructionsBankTransfer {
  country: String!
  financialAddresses: Array!
  type: String!
}

type FundingInstructionsBankTransferAbaRecord {
  accountNumber: String!
  bankName: String!
  routingNumber: String!
}

type FundingInstructionsBankTransferFinancialAddress {
  aba: Object
  iban: Object
  sortCode: Object
  spei: Object
  supportedNetworks: Array
  swift: Object
  type: String!
  zengin: Object
}

type FundingInstructionsBankTransferIbanRecord {
  accountHolderName: String!
  bic: String!
  country: String!
  iban: String!
}

type FundingInstructionsBankTransferSortCodeRecord {
  accountHolderName: String!
  accountNumber: String!
  sortCode: String!
}

type FundingInstructionsBankTransferSpeiRecord {
  bankCode: String!
  bankName: String!
  clabe: String!
}

type FundingInstructionsBankTransferSwiftRecord {
  accountNumber: String!
  bankName: String!
  swiftCode: String!
}

type FundingInstructionsBankTransferZenginRecord {
  accountHolderName: String
  accountNumber: String
  accountType: String
  bankCode: String
  bankName: String
  branchCode: String
  branchName: String
}

type GelatoDataDocumentReportDateOfBirth {
  day: Int
  month: Int
  year: Int
}

type GelatoDataDocumentReportExpirationDate {
  day: Int
  month: Int
  year: Int
}

type GelatoDataDocumentReportIssuedDate {
  day: Int
  month: Int
  year: Int
}

type GelatoDataIdNumberReportDate {
  day: Int
  month: Int
  year: Int
}

type GelatoDataVerifiedOutputsDate {
  day: Int
  month: Int
  year: Int
}

type GelatoDocumentReport {
  address: Type206
  dob: Type207
  error: Type208
  expirationDate: Type209
  files: Array
  firstName: String
  issuedDate: Type210
  issuingCountry: String
  lastName: String
  number: String
  status: String!
  type: String
}

type GelatoDocumentReportError {
  code: String
  reason: String
}

type GelatoIdNumberReport {
  dob: Type211
  error: Type212
  firstName: String
  idNumber: String
  idNumberType: String
  lastName: String
  status: String!
}

type GelatoIdNumberReportError {
  code: String
  reason: String
}

type GelatoReportDocumentOptions {
  allowedTypes: Array
  requireIdNumber: Boolean
  requireLiveCapture: Boolean
  requireMatchingSelfie: Boolean
}

type GelatoSelfieReport {
  document: String
  error: Type213
  selfie: String
  status: String!
}

type GelatoSelfieReportError {
  code: String
  reason: String
}

type GelatoSessionDocumentOptions {
  allowedTypes: Array
  requireIdNumber: Boolean
  requireLiveCapture: Boolean
  requireMatchingSelfie: Boolean
}

type GelatoSessionLastError {
  code: String
  reason: String
}

type GelatoVerificationReportOptions {
  document: Object
  idNumber: Object
}

type GelatoVerificationSessionOptions {
  document: Object
  idNumber: Object
}

type GelatoVerifiedOutputs {
  address: Type214
  dob: Type215
  firstName: String
  idNumber: String
  idNumberType: String
  lastName: String
}

type Identity.verificationReport {
  clientReferenceId: String
  created: Int!
  document: Object
  id: String!
  idNumber: Object
  livemode: Boolean!
  object: String!
  options: Object
  selfie: Object
  type: String!
  verificationSession: String
}

type Identity.verificationSession {
  clientReferenceId: String
  clientSecret: String
  created: Int!
  id: String!
  lastError: Type216
  lastVerificationReport: Type217
  livemode: Boolean!
  metadata: Object!
  object: String!
  options: Type218
  redaction: Type219
  status: String!
  type: String!
  url: String
  verifiedOutputs: Type220
}

type InboundTransfers {
  billingDetails: Object!
  type: String!
  usBankAccount: Object
}

type InboundTransfersPaymentMethodDetailsUsBankAccount {
  accountHolderType: String
  accountType: String
  bankName: String
  fingerprint: String
  last4: String
  mandate: Type221
  network: String!
  routingNumber: String
}

type InternalCard {
  brand: String
  country: String
  expMonth: Int
  expYear: Int
  last4: String
}

type Invoice {
  accountCountry: String
  accountName: String
  accountTaxIds: Array
  amountDue: Int!
  amountPaid: Int!
  amountRemaining: Int!
  amountShipping: Int!
  application: Type222
  applicationFeeAmount: Int
  attemptCount: Int!
  attempted: Boolean!
  autoAdvance: Boolean
  automaticTax: Object!
  billingReason: String
  charge: Type223
  collectionMethod: String!
  created: Int!
  currency: String!
  customFields: Array
  customer: Type224
  customerAddress: Type225
  customerEmail: String
  customerName: String
  customerPhone: String
  customerShipping: Type226
  customerTaxExempt: String
  customerTaxIds: Array
  defaultPaymentMethod: Type227
  defaultSource: Type228
  defaultTaxRates: Array!
  description: String
  discount: Type229
  discounts: Array
  dueDate: Int
  effectiveAt: Int
  endingBalance: Int
  footer: String
  fromInvoice: Type230
  hostedInvoiceUrl: String
  id: String
  invoicePdf: String
  issuer: Object!
  lastFinalizationError: Type231
  latestRevision: Type232
  lines: Object!
  livemode: Boolean!
  metadata: Object
  nextPaymentAttempt: Int
  number: String
  object: String!
  onBehalfOf: Type233
  paid: Boolean!
  paidOutOfBand: Boolean!
  paymentIntent: Type234
  paymentSettings: Object!
  periodEnd: Int!
  periodStart: Int!
  postPaymentCreditNotesAmount: Int!
  prePaymentCreditNotesAmount: Int!
  quote: Type235
  receiptNumber: String
  rendering: Type236
  shippingCost: Type237
  shippingDetails: Type238
  startingBalance: Int!
  statementDescriptor: String
  status: String
  statusTransitions: Object!
  subscription: Type239
  subscriptionDetails: Type240
  subscriptionProrationDate: Int
  subtotal: Int!
  subtotalExcludingTax: Int
  tax: Int
  testClock: Type241
  thresholdReason: Object
  total: Int!
  totalDiscountAmounts: Array
  totalExcludingTax: Int
  totalTaxAmounts: Array!
  transferData: Type242
  webhooksDeliveredAt: Int
}

type InvoiceInstallmentsCard {
  enabled: Boolean
}

type InvoiceItemThresholdReason {
  lineItemIds: Array!
  usageGte: Int!
}

type InvoiceLineItemPeriod {
  end: Int!
  start: Int!
}

type InvoiceMandateOptionsCard {
  amount: Int
  amountType: String
  description: String
}

type InvoicePaymentMethodOptionsAcssDebit {
  mandateOptions: Object
  verificationMethod: String
}

type InvoicePaymentMethodOptionsAcssDebitMandateOptions {
  transactionType: String
}

type InvoicePaymentMethodOptionsBancontact {
  preferredLanguage: String!
}

type InvoicePaymentMethodOptionsCard {
  installments: Object
  requestThreeDSecure: String
}

type InvoicePaymentMethodOptionsCustomerBalance {
  bankTransfer: Object
  fundingType: String
}

type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
  euBankTransfer: Object
  type: String
}

type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
  country: String!
}

type InvoicePaymentMethodOptionsUsBankAccount {
  financialConnections: Object
  verificationMethod: String
}

type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
  permissions: Array
  prefetch: Array
}

type InvoiceRenderingPdf {
  pageSize: String
}

type InvoiceSettingCustomField {
  name: String!
  value: String!
}

type InvoiceSettingCustomerSetting {
  customFields: Array
  defaultPaymentMethod: Type243
  footer: String
  renderingOptions: Type244
}

type InvoiceSettingQuoteSetting {
  daysUntilDue: Int
  issuer: Object!
}

type InvoiceSettingRenderingOptions {
  amountTaxDisplay: String
}

type InvoiceSettingSubscriptionSchedulePhaseSetting {
  accountTaxIds: Array
  daysUntilDue: Int
  issuer: Type245
}

type InvoiceSettingSubscriptionScheduleSetting {
  accountTaxIds: Array
  daysUntilDue: Int
  issuer: Object!
}

type InvoiceTaxAmount {
  amount: Int!
  inclusive: Boolean!
  taxRate: Type246!
  taxabilityReason: String
  taxableAmount: Int
}

type InvoiceThresholdReason {
  amountGte: Int
  itemReasons: Array!
}

type InvoiceTransferData {
  amount: Int
  destination: Type247!
}

type Invoiceitem {
  amount: Int!
  currency: String!
  customer: Type248!
  date: Int!
  description: String
  discountable: Boolean!
  discounts: Array
  id: String!
  invoice: Type249
  livemode: Boolean!
  metadata: Object
  object: String!
  period: Object!
  price: Type250
  proration: Boolean!
  quantity: Int!
  subscription: Type251
  subscriptionItem: String
  taxRates: Array
  testClock: Type252
  unitAmount: Int
  unitAmountDecimal: String
}

type InvoicesPaymentMethodOptions {
  acssDebit: Type253
  bancontact: Type254
  card: Type255
  customerBalance: Type256
  konbini: Type257
  sepaDebit: Type258
  usBankAccount: Type259
}

type InvoicesPaymentSettings {
  defaultMandate: String
  paymentMethodOptions: Type260
  paymentMethodTypes: Array
}

type InvoicesResourceFromInvoice {
  action: String!
  invoice: Type261!
}

type InvoicesResourceInvoiceRendering {
  amountTaxDisplay: String
  pdf: Type262
}

type InvoicesResourceInvoiceTaxId {
  type: String!
  value: String
}

type InvoicesResourceLineItemsCreditedItems {
  invoice: String!
  invoiceLineItems: Array!
}

type InvoicesResourceLineItemsProrationDetails {
  creditedItems: Type263
}

type InvoicesResourceShippingCost {
  amountSubtotal: Int!
  amountTax: Int!
  amountTotal: Int!
  shippingRate: Type264
  taxes: Array
}

type InvoicesResourceStatusTransitions {
  finalizedAt: Int
  markedUncollectibleAt: Int
  paidAt: Int
  voidedAt: Int
}

type Issuing.authorization {
  amount: Int!
  amountDetails: Type265
  approved: Boolean!
  authorizationMethod: String!
  balanceTransactions: Array!
  card: Object!
  cardholder: Type266
  created: Int!
  currency: String!
  id: String!
  livemode: Boolean!
  merchantAmount: Int!
  merchantCurrency: String!
  merchantData: Object!
  metadata: Object!
  networkData: Type267
  object: String!
  pendingRequest: Type268
  requestHistory: Array!
  status: String!
  token: Type269
  transactions: Array!
  treasury: Type270
  verificationData: Object!
  wallet: String
}

type Issuing.card {
  brand: String!
  cancellationReason: String
  cardholder: Object!
  created: Int!
  currency: String!
  cvc: String
  expMonth: Int!
  expYear: Int!
  financialAccount: String
  id: String!
  last4: String!
  livemode: Boolean!
  metadata: Object!
  number: String
  object: String!
  personalizationDesign: Type271
  replacedBy: Type272
  replacementFor: Type273
  replacementReason: String
  shipping: Type274
  spendingControls: Object!
  status: String!
  type: String!
  wallets: Type275
}

type Issuing.cardholder {
  billing: Object!
  company: Type276
  created: Int!
  email: String
  id: String!
  individual: Type277
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
  phoneNumber: String
  preferredLocales: Array
  requirements: Object!
  spendingControls: Type278
  status: String!
  type: String!
}

type Issuing.dispute {
  amount: Int!
  balanceTransactions: Array
  created: Int!
  currency: String!
  evidence: Object!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  status: String!
  transaction: Type279!
  treasury: Type280
}

type Issuing.personalizationDesign {
  cardLogo: Type281
  carrierText: Type282
  created: Int!
  id: String!
  livemode: Boolean!
  lookupKey: String
  metadata: Object!
  name: String
  object: String!
  physicalBundle: Type283!
  preferences: Object!
  rejectionReasons: Object!
  status: String!
}

type Issuing.physicalBundle {
  features: Object
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  status: String!
  type: String!
}

type Issuing.settlement {
  bin: String!
  clearingDate: Int!
  created: Int!
  currency: String!
  id: String!
  interchangeFees: Int!
  livemode: Boolean!
  metadata: Object!
  netTotal: Int!
  network: String!
  networkFees: Int!
  networkSettlementIdentifier: String!
  object: String!
  settlementService: String!
  transactionCount: Int!
  transactionVolume: Int!
}

type Issuing.token {
  card: Type284!
  created: Int!
  deviceFingerprint: String
  id: String!
  last4: String
  livemode: Boolean!
  network: String!
  networkData: Object
  networkUpdatedAt: Int!
  object: String!
  status: String!
  walletProvider: String
}

type Issuing.transaction {
  amount: Int!
  amountDetails: Type285
  authorization: Type286
  balanceTransaction: Type287
  card: Type288!
  cardholder: Type289
  created: Int!
  currency: String!
  dispute: Type290
  id: String!
  livemode: Boolean!
  merchantAmount: Int!
  merchantCurrency: String!
  merchantData: Object!
  metadata: Object!
  networkData: Type291
  object: String!
  purchaseDetails: Type292
  token: Type293
  treasury: Type294
  type: String!
  wallet: String
}

type IssuingAuthorizationAmountDetails {
  atmFee: Int
  cashbackAmount: Int
}

type IssuingAuthorizationAuthenticationExemption {
  claimedBy: String!
  type: String!
}

type IssuingAuthorizationMerchantData {
  category: String!
  categoryCode: String!
  city: String
  country: String
  name: String
  networkId: String!
  postalCode: String
  state: String
  terminalId: String
  url: String
}

type IssuingAuthorizationNetworkData {
  acquiringInstitutionId: String
  systemTraceAuditNumber: String
  transactionId: String
}

type IssuingAuthorizationPendingRequest {
  amount: Int!
  amountDetails: Type295
  currency: String!
  isAmountControllable: Boolean!
  merchantAmount: Int!
  merchantCurrency: String!
  networkRiskScore: Int
}

type IssuingAuthorizationRequest {
  amount: Int!
  amountDetails: Type296
  approved: Boolean!
  authorizationCode: String
  created: Int!
  currency: String!
  merchantAmount: Int!
  merchantCurrency: String!
  networkRiskScore: Int
  reason: String!
  reasonMessage: String
  requestedAt: Int
}

type IssuingAuthorizationThreeDSecure {
  result: String!
}

type IssuingAuthorizationTreasury {
  receivedCredits: Array!
  receivedDebits: Array!
  transaction: String
}

type IssuingAuthorizationVerificationData {
  addressLine1Check: String!
  addressPostalCodeCheck: String!
  authenticationExemption: Type297
  cvcCheck: String!
  expiryCheck: String!
  postalCode: String
  threeDSecure: Type298
}

type IssuingCardApplePay {
  eligible: Boolean!
  ineligibleReason: String
}

type IssuingCardAuthorizationControls {
  allowedCategories: Array
  blockedCategories: Array
  spendingLimits: Array
  spendingLimitsCurrency: String
}

type IssuingCardGooglePay {
  eligible: Boolean!
  ineligibleReason: String
}

type IssuingCardShipping {
  address: Object!
  carrier: String
  customs: Type299
  eta: Int
  name: String!
  phoneNumber: String
  requireSignature: Boolean
  service: String!
  status: String
  trackingNumber: String
  trackingUrl: String
  type: String!
}

type IssuingCardShippingCustoms {
  eoriNumber: String
}

type IssuingCardSpendingLimit {
  amount: Int!
  categories: Array
  interval: String!
}

type IssuingCardWallets {
  applePay: Object!
  googlePay: Object!
  primaryAccountIdentifier: String
}

type IssuingCardholderAddress {
  address: Object!
}

type IssuingCardholderAuthorizationControls {
  allowedCategories: Array
  blockedCategories: Array
  spendingLimits: Array
  spendingLimitsCurrency: String
}

type IssuingCardholderCardIssuing {
  userTermsAcceptance: Type300
}

type IssuingCardholderCompany {
  taxIdProvided: Boolean!
}

type IssuingCardholderIdDocument {
  back: Type301
  front: Type302
}

type IssuingCardholderIndividual {
  cardIssuing: Type303
  dob: Type304
  firstName: String
  lastName: String
  verification: Type305
}

type IssuingCardholderIndividualDob {
  day: Int
  month: Int
  year: Int
}

type IssuingCardholderRequirements {
  disabledReason: String
  pastDue: Array
}

type IssuingCardholderSpendingLimit {
  amount: Int!
  categories: Array
  interval: String!
}

type IssuingCardholderUserTermsAcceptance {
  date: Int
  ip: String
  userAgent: String
}

type IssuingCardholderVerification {
  document: Type306
}

type IssuingDisputeCanceledEvidence {
  additionalDocumentation: Type307
  canceledAt: Int
  cancellationPolicyProvided: Boolean
  cancellationReason: String
  expectedAt: Int
  explanation: String
  productDescription: String
  productType: String
  returnStatus: String
  returnedAt: Int
}

type IssuingDisputeDuplicateEvidence {
  additionalDocumentation: Type308
  cardStatement: Type309
  cashReceipt: Type310
  checkImage: Type311
  explanation: String
  originalTransaction: String
}

type IssuingDisputeEvidence {
  canceled: Object
  duplicate: Object
  fraudulent: Object
  merchandiseNotAsDescribed: Object
  notReceived: Object
  other: Object
  reason: String!
  serviceNotAsDescribed: Object
}

type IssuingDisputeFraudulentEvidence {
  additionalDocumentation: Type312
  explanation: String
}

type IssuingDisputeMerchandiseNotAsDescribedEvidence {
  additionalDocumentation: Type313
  explanation: String
  receivedAt: Int
  returnDescription: String
  returnStatus: String
  returnedAt: Int
}

type IssuingDisputeNotReceivedEvidence {
  additionalDocumentation: Type314
  expectedAt: Int
  explanation: String
  productDescription: String
  productType: String
}

type IssuingDisputeOtherEvidence {
  additionalDocumentation: Type315
  explanation: String
  productDescription: String
  productType: String
}

type IssuingDisputeServiceNotAsDescribedEvidence {
  additionalDocumentation: Type316
  canceledAt: Int
  cancellationReason: String
  explanation: String
  receivedAt: Int
}

type IssuingDisputeTreasury {
  debitReversal: String
  receivedDebit: String!
}

type IssuingNetworkTokenAddress {
  line1: String!
  postalCode: String!
}

type IssuingNetworkTokenDevice {
  deviceFingerprint: String
  ipAddress: String
  location: String
  name: String
  phoneNumber: String
  type: String
}

type IssuingNetworkTokenMastercard {
  cardReferenceId: String
  tokenReferenceId: String!
  tokenRequestorId: String!
  tokenRequestorName: String
}

type IssuingNetworkTokenNetworkData {
  device: Object
  mastercard: Object
  type: String!
  visa: Object
  walletProvider: Object
}

type IssuingNetworkTokenVisa {
  cardReferenceId: String!
  tokenReferenceId: String!
  tokenRequestorId: String!
  tokenRiskScore: String
}

type IssuingNetworkTokenWalletProvider {
  accountId: String
  accountTrustScore: Int
  cardNumberSource: String
  cardholderAddress: Object
  cardholderName: String
  deviceTrustScore: Int
  hashedAccountEmailAddress: String
  reasonCodes: Array
  suggestedDecision: String
  suggestedDecisionVersion: String
}

type IssuingPersonalizationDesignCarrierText {
  footerBody: String
  footerTitle: String
  headerBody: String
  headerTitle: String
}

type IssuingPersonalizationDesignPreferences {
  isDefault: Boolean!
  isPlatformDefault: Boolean
}

type IssuingPersonalizationDesignRejectionReasons {
  cardLogo: Array
  carrierText: Array
}

type IssuingPhysicalBundleFeatures {
  cardLogo: String!
  carrierText: String!
  secondLine: String!
}

type IssuingTransactionAmountDetails {
  atmFee: Int
  cashbackAmount: Int
}

type IssuingTransactionFlightData {
  departureAt: Int
  passengerName: String
  refundable: Boolean
  segments: Array
  travelAgency: String
}

type IssuingTransactionFlightDataLeg {
  arrivalAirportCode: String
  carrier: String
  departureAirportCode: String
  flightNumber: String
  serviceClass: String
  stopoverAllowed: Boolean
}

type IssuingTransactionFuelData {
  type: String!
  unit: String!
  unitCostDecimal: String!
  volumeDecimal: String
}

type IssuingTransactionLodgingData {
  checkInAt: Int
  nights: Int
}

type IssuingTransactionNetworkData {
  authorizationCode: String
  processingDate: String
  transactionId: String
}

type IssuingTransactionPurchaseDetails {
  flight: Type317
  fuel: Type318
  lodging: Type319
  receipt: Array
  reference: String
}

type IssuingTransactionReceiptData {
  description: String
  quantity: Number
  total: Int
  unitCost: Int
}

type IssuingTransactionTreasury {
  receivedCredit: String
  receivedDebit: String
}

type Item {
  amountDiscount: Int!
  amountSubtotal: Int!
  amountTax: Int!
  amountTotal: Int!
  currency: String!
  description: String!
  discounts: Array
  id: String!
  object: String!
  price: Type320
  quantity: Int
  taxes: Array
}

type LegalEntityCompany {
  address: Object
  addressKana: Type321
  addressKanji: Type322
  directorsProvided: Boolean
  executivesProvided: Boolean
  exportLicenseId: String
  exportPurposeCode: String
  name: String
  nameKana: String
  nameKanji: String
  ownersProvided: Boolean
  ownershipDeclaration: Type323
  phone: String
  structure: String
  taxIdProvided: Boolean
  taxIdRegistrar: String
  vatIdProvided: Boolean
  verification: Type324
}

type LegalEntityCompanyVerification {
  document: Object!
}

type LegalEntityCompanyVerificationDocument {
  back: Type325
  details: String
  detailsCode: String
  front: Type326
}

type LegalEntityDob {
  day: Int
  month: Int
  year: Int
}

type LegalEntityJapanAddress {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
  town: String
}

type LegalEntityPersonVerification {
  additionalDocument: Type327
  details: String
  detailsCode: String
  document: Object
  status: String!
}

type LegalEntityPersonVerificationDocument {
  back: Type328
  details: String
  detailsCode: String
  front: Type329
}

type LegalEntityUboDeclaration {
  date: Int
  ip: String
  userAgent: String
}

type LineItem {
  amount: Int!
  amountExcludingTax: Int
  currency: String!
  description: String
  discountAmounts: Array
  discountable: Boolean!
  discounts: Array
  id: String!
  invoice: String
  invoiceItem: Type330
  livemode: Boolean!
  metadata: Object!
  object: String!
  period: Object!
  price: Type331
  proration: Boolean!
  prorationDetails: Type332
  quantity: Int
  subscription: Type333
  subscriptionItem: Type334
  taxAmounts: Array
  taxRates: Array
  type: String!
  unitAmountExcludingTax: String
}

type LineItemsDiscountAmount {
  amount: Int!
  discount: Object!
}

type LineItemsTaxAmount {
  amount: Int!
  rate: Object!
  taxabilityReason: String
  taxableAmount: Int
}

type LinkedAccountOptionsUsBankAccount {
  permissions: Array
  prefetch: Array
  returnUrl: String
}

type LoginLink {
  created: Int!
  object: String!
  url: String!
}

type Mandate {
  customerAcceptance: Object!
  id: String!
  livemode: Boolean!
  multiUse: Object
  object: String!
  onBehalfOf: String
  paymentMethod: Type335!
  paymentMethodDetails: Object!
  singleUse: Object
  status: String!
  type: String!
}

type MandateAcssDebit {
  defaultFor: Array
  intervalDescription: String
  paymentSchedule: String!
  transactionType: String!
}

type MandateAuBecsDebit {
  url: String!
}

type MandateBacsDebit {
  networkStatus: String!
  reference: String!
  revocationReason: String
  url: String!
}

type MandatePaymentMethodDetails {
  acssDebit: Object
  auBecsDebit: Object
  bacsDebit: Object
  card: Object
  cashapp: Object
  link: Object
  paypal: Object
  sepaDebit: Object
  type: String!
  usBankAccount: Object
}

type MandatePaypal {
  billingAgreementId: String
  payerId: String
}

type MandateSepaDebit {
  reference: String!
  url: String!
}

type MandateSingleUse {
  amount: Int!
  currency: String!
}

type MandateUsBankAccount {
  collectionMethod: String
}

type Networks {
  available: Array!
  preferred: String
}

type NotificationEventData {
  object: Object!
  previousAttributes: Object
}

type NotificationEventRequest {
  id: String
  idempotencyKey: String
}

type OnlineAcceptance {
  ipAddress: String
  userAgent: String
}

type OutboundPaymentsPaymentMethodDetails {
  billingDetails: Object!
  financialAccount: Object
  type: String!
  usBankAccount: Object
}

type OutboundPaymentsPaymentMethodDetailsFinancialAccount {
  id: String!
  network: String!
}

type OutboundPaymentsPaymentMethodDetailsUsBankAccount {
  accountHolderType: String
  accountType: String
  bankName: String
  fingerprint: String
  last4: String
  mandate: Type336
  network: String!
  routingNumber: String
}

type OutboundTransfersPaymentMethodDetails {
  billingDetails: Object!
  type: String!
  usBankAccount: Object
}

type OutboundTransfersPaymentMethodDetailsUsBankAccount {
  accountHolderType: String
  accountType: String
  bankName: String
  fingerprint: String
  last4: String
  mandate: Type337
  network: String!
  routingNumber: String
}

type PackageDimensions {
  height: Number!
  length: Number!
  weight: Number!
  width: Number!
}

type PaymentFlowsAmountDetails {
  tip: Object
}

type PaymentFlowsAmountDetailsResourceTip {
  amount: Int
}

type PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
  allowRedirects: String
  enabled: Boolean!
}

type PaymentFlowsAutomaticPaymentMethodsSetupIntent {
  allowRedirects: String
  enabled: Boolean
}

type PaymentFlowsInstallmentOptions {
  enabled: Boolean!
  plan: Object
}

type PaymentFlowsPrivatePaymentMethodsAlipayDetails {
  buyerId: String
  fingerprint: String
  transactionId: String
}

type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization {
  status: String!
}

type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization {
  status: String!
}

type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture {
  maximumAmountCapturable: Int!
  status: String!
}

type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture {
  status: String!
}

type PaymentFlowsPrivatePaymentMethodsKlarnaDob {
  day: Int
  month: Int
  year: Int
}

type PaymentIntent {
  amount: Int!
  amountCapturable: Int
  amountDetails: Object
  amountReceived: Int
  application: Type338
  applicationFeeAmount: Int
  automaticPaymentMethods: Type339
  canceledAt: Int
  cancellationReason: String
  captureMethod: String!
  clientSecret: String
  confirmationMethod: String!
  created: Int!
  currency: String!
  customer: Type340
  description: String
  id: String!
  invoice: Type341
  lastPaymentError: Type342
  latestCharge: Type343
  livemode: Boolean!
  metadata: Object
  nextAction: Type344
  object: String!
  onBehalfOf: Type345
  paymentMethod: Type346
  paymentMethodConfigurationDetails: Type347
  paymentMethodOptions: Type348
  paymentMethodTypes: Array!
  processing: Type349
  receiptEmail: String
  review: Type350
  setupFutureUsage: String
  shipping: Type351
  statementDescriptor: String
  statementDescriptorSuffix: String
  status: String!
  transferData: Type352
  transferGroup: String
}

type PaymentIntentCardProcessing {
  customerNotification: Object
}

type PaymentIntentNextAction {
  alipayHandleRedirect: Object
  boletoDisplayDetails: Object
  cardAwaitNotification: Object
  cashappHandleRedirectOrDisplayQrCode: Object
  displayBankTransferInstructions: Object
  konbiniDisplayDetails: Object
  oxxoDisplayDetails: Object
  paynowDisplayQrCode: Object
  pixDisplayQrCode: Object
  promptpayDisplayQrCode: Object
  redirectToUrl: Object
  swishHandleRedirectOrDisplayQrCode: Object
  type: String!
  useStripeSdk: Object
  verifyWithMicrodeposits: Object
  wechatPayDisplayQrCode: Object
  wechatPayRedirectToAndroidApp: Object
  wechatPayRedirectToIosApp: Object
}

type PaymentIntentNextActionAlipayHandleRedirect {
  nativeData: String
  nativeUrl: String
  returnUrl: String
  url: String
}

type PaymentIntentNextActionBoleto {
  expiresAt: Int
  hostedVoucherUrl: String
  number: String
  pdf: String
}

type PaymentIntentNextActionCardAwaitNotification {
  chargeAttemptAt: Int
  customerApprovalRequired: Boolean
}

type PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode {
  hostedInstructionsUrl: String!
  mobileAuthUrl: String!
  qrCode: Object!
}

type PaymentIntentNextActionCashappQrCode {
  expiresAt: Int!
  imageUrlPng: String!
  imageUrlSvg: String!
}

type PaymentIntentNextActionDisplayBankTransferInstructions {
  amountRemaining: Int
  currency: String
  financialAddresses: Array
  hostedInstructionsUrl: String
  reference: String
  type: String!
}

type PaymentIntentNextActionDisplayOxxoDetails {
  expiresAfter: Int
  hostedVoucherUrl: String
  number: String
}

type PaymentIntentNextActionKonbini {
  expiresAt: Int!
  hostedVoucherUrl: String
  stores: Object!
}

type PaymentIntentNextActionKonbiniFamilymart {
  confirmationNumber: String
  paymentCode: String!
}

type PaymentIntentNextActionKonbiniLawson {
  confirmationNumber: String
  paymentCode: String!
}

type PaymentIntentNextActionKonbiniMinistop {
  confirmationNumber: String
  paymentCode: String!
}

type PaymentIntentNextActionKonbiniSeicomart {
  confirmationNumber: String
  paymentCode: String!
}

type PaymentIntentNextActionKonbiniStores {
  familymart: Type353
  lawson: Type354
  ministop: Type355
  seicomart: Type356
}

type PaymentIntentNextActionPaynowDisplayQrCode {
  data: String!
  hostedInstructionsUrl: String
  imageUrlPng: String!
  imageUrlSvg: String!
}

type PaymentIntentNextActionPixDisplayQrCode {
  data: String
  expiresAt: Int
  hostedInstructionsUrl: String
  imageUrlPng: String
  imageUrlSvg: String
}

type PaymentIntentNextActionPromptpayDisplayQrCode {
  data: String!
  hostedInstructionsUrl: String!
  imageUrlPng: String!
  imageUrlSvg: String!
}

type PaymentIntentNextActionRedirectToUrl {
  returnUrl: String
  url: String
}

type PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode {
  hostedInstructionsUrl: String
  qrCode: Object
}

type PaymentIntentNextActionSwishQrCode {
  data: String
  imageUrlPng: String
  imageUrlSvg: String
}

type PaymentIntentNextActionVerifyWithMicrodeposits {
  arrivalDate: Int!
  hostedVerificationUrl: String!
  microdepositType: String
}

type PaymentIntentNextActionWechatPayDisplayQrCode {
  data: String!
  hostedInstructionsUrl: String!
  imageDataUrl: String!
  imageUrlPng: String!
  imageUrlSvg: String!
}

type PaymentIntentNextActionWechatPayRedirectToAndroidApp {
  appId: String!
  nonceStr: String!
  package: String!
  partnerId: String!
  prepayId: String!
  sign: String!
  timestamp: String!
}

type PaymentIntentNextActionWechatPayRedirectToIosApp {
  nativeUrl: String!
}

type PaymentIntentPaymentMethodOptions {
  acssDebit: Type357
  affirm: Type358
  afterpayClearpay: Type359
  alipay: Type360
  auBecsDebit: Type361
  bacsDebit: Type362
  bancontact: Type363
  blik: Type364
  boleto: Type365
  card: Type366
  cardPresent: Type367
  cashapp: Type368
  customerBalance: Type369
  eps: Type370
  fpx: Type371
  giropay: Type372
  grabpay: Type373
  ideal: Type374
  interacPresent: Type375
  klarna: Type376
  konbini: Type377
  link: Type378
  mobilepay: Type379
  oxxo: Type380
  p24: Type381
  paynow: Type382
  paypal: Type383
  pix: Type384
  promptpay: Type385
  revolutPay: Type386
  sepaDebit: Type387
  sofort: Type388
  swish: Type389
  usBankAccount: Type390
  wechatPay: Type391
  zip: Type392
}

type PaymentIntentPaymentMethodOptionsAcssDebit {
  mandateOptions: Object
  setupFutureUsage: String
  verificationMethod: String
}

type PaymentIntentPaymentMethodOptionsAuBecsDebit {
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsBlik {
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsCard {
  captureMethod: String
  installments: Type393
  mandateOptions: Type394
  network: String
  requestExtendedAuthorization: String
  requestIncrementalAuthorization: String
  requestMulticapture: String
  requestOvercapture: String
  requestThreeDSecure: String
  requireCvcRecollection: Boolean
  setupFutureUsage: String
  statementDescriptorSuffixKana: String
  statementDescriptorSuffixKanji: String
}

type PaymentIntentPaymentMethodOptionsEps {
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsLink {
  captureMethod: String
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  customMandateUrl: String
  intervalDescription: String
  paymentSchedule: String
  transactionType: String
}

type PaymentIntentPaymentMethodOptionsMobilepay {
  captureMethod: String
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsSepaDebit {
  mandateOptions: Object
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsSwish {
  reference: String
  setupFutureUsage: String
}

type PaymentIntentPaymentMethodOptionsUsBankAccount {
  financialConnections: Object
  mandateOptions: Object
  preferredSettlementSpeed: String
  setupFutureUsage: String
  verificationMethod: String
}

type PaymentIntentProcessing {
  card: Object
  type: String!
}

type PaymentIntentProcessingCustomerNotification {
  approvalRequested: Boolean
  completesAt: Int
}

type PaymentIntentTypeSpecificPaymentMethodOptionsClient {
  captureMethod: String
  installments: Object
  requireCvcRecollection: Boolean
  setupFutureUsage: String
  verificationMethod: String
}

type PaymentLink {
  active: Boolean!
  afterCompletion: Object!
  allowPromotionCodes: Boolean!
  application: Type395
  applicationFeeAmount: Int
  applicationFeePercent: Number
  automaticTax: Object!
  billingAddressCollection: String!
  consentCollection: Type396
  currency: String!
  customFields: Array!
  customText: Object!
  customerCreation: String!
  id: String!
  inactiveMessage: String
  invoiceCreation: Type397
  lineItems: Object
  livemode: Boolean!
  metadata: Object!
  object: String!
  onBehalfOf: Type398
  paymentIntentData: Type399
  paymentMethodCollection: String!
  paymentMethodTypes: Array
  phoneNumberCollection: Object!
  restrictions: Type400
  shippingAddressCollection: Type401
  shippingOptions: Array!
  submitType: String!
  subscriptionData: Type402
  taxIdCollection: Object!
  transferData: Type403
  url: String!
}

type PaymentLinksResourceAfterCompletion {
  hostedConfirmation: Object
  redirect: Object
  type: String!
}

type PaymentLinksResourceAutomaticTax {
  enabled: Boolean!
  liability: Type404
}

type PaymentLinksResourceCompletedSessions {
  count: Int!
  limit: Int!
}

type PaymentLinksResourceCompletionBehaviorConfirmationPage {
  customMessage: String
}

type PaymentLinksResourceCompletionBehaviorRedirect {
  url: String!
}

type PaymentLinksResourceConsentCollection {
  paymentMethodReuseAgreement: Type405
  promotions: String
  termsOfService: String
}

type PaymentLinksResourceCustomFields {
  dropdown: Object
  key: String!
  label: Object!
  numeric: Object
  optional: Boolean!
  text: Object
  type: String!
}

type PaymentLinksResourceCustomFieldsDropdown {
  options: Array!
}

type PaymentLinksResourceCustomFieldsDropdownOption {
  label: String!
  value: String!
}

type PaymentLinksResourceCustomFieldsLabel {
  custom: String
  type: String!
}

type PaymentLinksResourceCustomFieldsNumeric {
  maximumLength: Int
  minimumLength: Int
}

type PaymentLinksResourceCustomFieldsText {
  maximumLength: Int
  minimumLength: Int
}

type PaymentLinksResourceCustomText {
  afterSubmit: Type406
  shippingAddress: Type407
  submit: Type408
  termsOfServiceAcceptance: Type409
}

type PaymentLinksResourceCustomTextPosition {
  message: String!
}

type PaymentLinksResourceInvoiceCreation {
  enabled: Boolean!
  invoiceData: Type410
}

type PaymentLinksResourceInvoiceSettings {
  accountTaxIds: Array
  customFields: Array
  description: String
  footer: String
  issuer: Type411
  metadata: Object
  renderingOptions: Type412
}

type PaymentLinksResourcePaymentIntentData {
  captureMethod: String
  description: String
  metadata: Object!
  setupFutureUsage: String
  statementDescriptor: String
  statementDescriptorSuffix: String
  transferGroup: String
}

type PaymentLinksResourcePaymentMethodReuseAgreement {
  position: String!
}

type PaymentLinksResourcePhoneNumberCollection {
  enabled: Boolean!
}

type PaymentLinksResourceRestrictions {
  completedSessions: Object!
}

type PaymentLinksResourceShippingAddressCollection {
  allowedCountries: Array!
}

type PaymentLinksResourceShippingOption {
  shippingAmount: Int!
  shippingRate: Type413!
}

type PaymentLinksResourceSubscriptionData {
  description: String
  invoiceSettings: Object!
  metadata: Object!
  trialPeriodDays: Int
  trialSettings: Type414
}

type PaymentLinksResourceSubscriptionDataInvoiceSettings {
  issuer: Object!
}

type PaymentLinksResourceTaxIdCollection {
  enabled: Boolean!
}

type PaymentLinksResourceTransferData {
  amount: Int
  destination: Type415!
}

type PaymentMethod {
  acssDebit: Object
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  billingDetails: Object!
  blik: Object
  boleto: Object
  card: Object
  cardPresent: Object
  cashapp: Object
  created: Int!
  customer: Type416
  customerBalance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  id: String!
  ideal: Object
  interacPresent: Object
  klarna: Object
  konbini: Object
  link: Object
  livemode: Boolean!
  metadata: Object
  mobilepay: Object
  object: String!
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  radarOptions: Object
  revolutPay: Object
  sepaDebit: Object
  sofort: Object
  swish: Object
  type: String!
  usBankAccount: Object
  wechatPay: Object
  zip: Object
}

type PaymentMethodAcssDebit {
  bankName: String
  fingerprint: String
  institutionNumber: String
  last4: String
  transitNumber: String
}

type PaymentMethodAuBecsDebit {
  bsbNumber: String
  fingerprint: String
  last4: String
}

type PaymentMethodBacsDebit {
  fingerprint: String
  last4: String
  sortCode: String
}

type PaymentMethodBoleto {
  taxId: String!
}

type PaymentMethodCard {
  brand: String!
  checks: Type417
  country: String
  displayBrand: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String!
  generatedFrom: Type418
  last4: String!
  networks: Type419
  threeDSecureUsage: Type420
  wallet: Type421
}

type PaymentMethodCardChecks {
  addressLine1Check: String
  addressPostalCodeCheck: String
  cvcCheck: String
}

type PaymentMethodCardGeneratedCard {
  charge: String
  paymentMethodDetails: Type422
  setupAttempt: Type423
}

type PaymentMethodCardPresent {
  brand: String
  cardholderName: String
  country: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String
  last4: String
  networks: Type424
  readMethod: String
}

type PaymentMethodCardPresentNetworks {
  available: Array!
  preferred: String
}

type PaymentMethodCardWallet {
  amexExpressCheckout: Object
  applePay: Object
  dynamicLast4: String
  googlePay: Object
  link: Object
  masterpass: Object
  samsungPay: Object
  type: String!
  visaCheckout: Object
}

type PaymentMethodCardWalletMasterpass {
  billingAddress: Type425
  email: String
  name: String
  shippingAddress: Type426
}

type PaymentMethodCardWalletVisaCheckout {
  billingAddress: Type427
  email: String
  name: String
  shippingAddress: Type428
}

type PaymentMethodCashapp {
  buyerId: String
  cashtag: String
}

type PaymentMethodConfigBizPaymentMethodConfigurationDetails {
  id: String!
  parent: String
}

type PaymentMethodConfigResourceDisplayPreference {
  overridable: Boolean
  preference: String!
  value: String!
}

type PaymentMethodConfigResourcePaymentMethodProperties {
  available: Boolean!
  displayPreference: Object!
}

type PaymentMethodConfiguration {
  acssDebit: Object
  active: Boolean!
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  applePay: Object
  application: String
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  blik: Object
  boleto: Object
  card: Object
  cartesBancaires: Object
  cashapp: Object
  customerBalance: Object
  eps: Object
  fpx: Object
  giropay: Object
  googlePay: Object
  grabpay: Object
  id: String!
  ideal: Object
  isDefault: Boolean!
  jcb: Object
  klarna: Object
  konbini: Object
  link: Object
  livemode: Boolean!
  name: String!
  object: String!
  oxxo: Object
  p24: Object
  parent: String
  paynow: Object
  paypal: Object
  promptpay: Object
  revolutPay: Object
  sepaDebit: Object
  sofort: Object
  usBankAccount: Object
  wechatPay: Object
}

type PaymentMethodDetails {
  achCreditTransfer: Object
  achDebit: Object
  acssDebit: Object
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  blik: Object
  boleto: Object
  card: Object
  cardPresent: Object
  cashapp: Object
  customerBalance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  interacPresent: Object
  klarna: Object
  konbini: Object
  link: Object
  mobilepay: Object
  multibanco: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  revolutPay: Object
  sepaDebit: Object
  sofort: Object
  stripeAccount: Object
  swish: Object
  type: String!
  usBankAccount: Object
  wechat: Object
  wechatPay: Object
  zip: Object
}

type PaymentMethodDetailsAchCreditTransfer {
  accountNumber: String
  bankName: String
  routingNumber: String
  swiftCode: String
}

type PaymentMethodDetailsAchDebit {
  accountHolderType: String
  bankName: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
}

type PaymentMethodDetailsAcssDebit {
  bankName: String
  fingerprint: String
  institutionNumber: String
  last4: String
  mandate: String
  transitNumber: String
}

type PaymentMethodDetailsAfterpayClearpay {
  orderId: String
  reference: String
}

type PaymentMethodDetailsAuBecsDebit {
  bsbNumber: String
  fingerprint: String
  last4: String
  mandate: String
}

type PaymentMethodDetailsBacsDebit {
  fingerprint: String
  last4: String
  mandate: String
  sortCode: String
}

type PaymentMethodDetailsBancontact {
  bankCode: String
  bankName: String
  bic: String
  generatedSepaDebit: Type429
  generatedSepaDebitMandate: Type430
  ibanLast4: String
  preferredLanguage: String
  verifiedName: String
}

type PaymentMethodDetailsBoleto {
  taxId: String!
}

type PaymentMethodDetailsCard {
  amountAuthorized: Int
  brand: String
  captureBefore: Int
  checks: Type431
  country: String
  expMonth: Int!
  expYear: Int!
  extendedAuthorization: Object
  fingerprint: String
  funding: String
  incrementalAuthorization: Object
  installments: Type432
  last4: String
  mandate: String
  multicapture: Object
  network: String
  networkToken: Type433
  overcapture: Object
  threeDSecure: Type434
  wallet: Type435
}

type PaymentMethodDetailsCardChecks {
  addressLine1Check: String
  addressPostalCodeCheck: String
  cvcCheck: String
}

type PaymentMethodDetailsCardInstallments {
  plan: Type436
}

type PaymentMethodDetailsCardInstallmentsPlan {
  count: Int
  interval: String
  type: String!
}

type PaymentMethodDetailsCardNetworkToken {
  used: Boolean!
}

type PaymentMethodDetailsCardPresent {
  amountAuthorized: Int
  brand: String
  captureBefore: Int
  cardholderName: String
  country: String
  emvAuthData: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String
  generatedCard: String
  incrementalAuthorizationSupported: Boolean!
  last4: String
  network: String
  offline: Type437
  overcaptureSupported: Boolean!
  readMethod: String
  receipt: Type438
}

type PaymentMethodDetailsCardPresentOffline {
  storedAt: Int
}

type PaymentMethodDetailsCardPresentReceipt {
  accountType: String
  applicationCryptogram: String
  applicationPreferredName: String
  authorizationCode: String
  authorizationResponseCode: String
  cardholderVerificationMethod: String
  dedicatedFileName: String
  terminalVerificationResults: String
  transactionStatusInformation: String
}

type PaymentMethodDetailsCardWallet {
  amexExpressCheckout: Object
  applePay: Object
  dynamicLast4: String
  googlePay: Object
  link: Object
  masterpass: Object
  samsungPay: Object
  type: String!
  visaCheckout: Object
}

type PaymentMethodDetailsCardWalletMasterpass {
  billingAddress: Type439
  email: String
  name: String
  shippingAddress: Type440
}

type PaymentMethodDetailsCardWalletVisaCheckout {
  billingAddress: Type441
  email: String
  name: String
  shippingAddress: Type442
}

type PaymentMethodDetailsCashapp {
  buyerId: String
  cashtag: String
}

type PaymentMethodDetailsEps {
  bank: String
  verifiedName: String
}

type PaymentMethodDetailsFpx {
  bank: String!
  transactionId: String
}

type PaymentMethodDetailsGiropay {
  bankCode: String
  bankName: String
  bic: String
  verifiedName: String
}

type PaymentMethodDetailsGrabpay {
  transactionId: String
}

type PaymentMethodDetailsIdeal {
  bank: String
  bic: String
  generatedSepaDebit: Type443
  generatedSepaDebitMandate: Type444
  ibanLast4: String
  verifiedName: String
}

type PaymentMethodDetailsInteracPresent {
  brand: String
  cardholderName: String
  country: String
  emvAuthData: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String
  generatedCard: String
  last4: String
  network: String
  preferredLocales: Array
  readMethod: String
  receipt: Type445
}

type PaymentMethodDetailsInteracPresentReceipt {
  accountType: String
  applicationCryptogram: String
  applicationPreferredName: String
  authorizationCode: String
  authorizationResponseCode: String
  cardholderVerificationMethod: String
  dedicatedFileName: String
  terminalVerificationResults: String
  transactionStatusInformation: String
}

type PaymentMethodDetailsKlarna {
  paymentMethodCategory: String
  preferredLocale: String
}

type PaymentMethodDetailsKonbini {
  store: Type446
}

type PaymentMethodDetailsKonbiniStore {
  chain: String
}

type PaymentMethodDetailsLink {
  country: String
}

type PaymentMethodDetailsMobilepay {
  card: Type447
}

type PaymentMethodDetailsMultibanco {
  entity: String
  reference: String
}

type PaymentMethodDetailsOxxo {
  number: String
}

type PaymentMethodDetailsP24 {
  bank: String
  reference: String
  verifiedName: String
}

type PaymentMethodDetailsPaynow {
  reference: String
}

type PaymentMethodDetailsPaypal {
  payerEmail: String
  payerId: String
  payerName: String
  sellerProtection: Type448
  transactionId: String
}

type PaymentMethodDetailsPix {
  bankTransactionId: String
}

type PaymentMethodDetailsPromptpay {
  reference: String
}

type PaymentMethodDetailsSepaDebit {
  bankCode: String
  branchCode: String
  country: String
  fingerprint: String
  last4: String
  mandate: String
}

type PaymentMethodDetailsSofort {
  bankCode: String
  bankName: String
  bic: String
  country: String
  generatedSepaDebit: Type449
  generatedSepaDebitMandate: Type450
  ibanLast4: String
  preferredLanguage: String
  verifiedName: String
}

type PaymentMethodDetailsSwish {
  fingerprint: String
  paymentReference: String
  verifiedPhoneLast4: String
}

type PaymentMethodDetailsUsBankAccount {
  accountHolderType: String
  accountType: String
  bankName: String
  fingerprint: String
  last4: String
  mandate: Type451
  paymentReference: String
  routingNumber: String
}

type PaymentMethodDetailsWechatPay {
  fingerprint: String
  transactionId: String
}

type PaymentMethodDomain {
  applePay: Object!
  created: Int!
  domainName: String!
  enabled: Boolean!
  googlePay: Object!
  id: String!
  link: Object!
  livemode: Boolean!
  object: String!
  paypal: Object!
}

type PaymentMethodDomainResourcePaymentMethodStatus {
  status: String!
  statusDetails: Object
}

type PaymentMethodDomainResourcePaymentMethodStatusDetails {
  errorMessage: String!
}

type PaymentMethodEps {
  bank: String
}

type PaymentMethodFpx {
  bank: String!
}

type PaymentMethodIdeal {
  bank: String
  bic: String
}

type PaymentMethodInteracPresent {
  brand: String
  cardholderName: String
  country: String
  expMonth: Int!
  expYear: Int!
  fingerprint: String
  funding: String
  last4: String
  networks: Type452
  preferredLocales: Array
  readMethod: String
}

type PaymentMethodKlarna {
  dob: Type453
}

type PaymentMethodLink {
  email: String
}

type PaymentMethodOptionsAffirm {
  captureMethod: String
  preferredLocale: String
  setupFutureUsage: String
}

type PaymentMethodOptionsAfterpayClearpay {
  captureMethod: String
  reference: String
  setupFutureUsage: String
}

type PaymentMethodOptionsAlipay {
  setupFutureUsage: String
}

type PaymentMethodOptionsBacsDebit {
  setupFutureUsage: String
}

type PaymentMethodOptionsBancontact {
  preferredLanguage: String!
  setupFutureUsage: String
}

type PaymentMethodOptionsBoleto {
  expiresAfterDays: Int!
  setupFutureUsage: String
}

type PaymentMethodOptionsCardInstallments {
  availablePlans: Array
  enabled: Boolean!
  plan: Type454
}

type PaymentMethodOptionsCardMandateOptions {
  amount: Int!
  amountType: String!
  description: String
  endDate: Int
  interval: String!
  intervalCount: Int
  reference: String!
  startDate: Int!
  supportedTypes: Array
}

type PaymentMethodOptionsCardPresent {
  requestExtendedAuthorization: Boolean
  requestIncrementalAuthorizationSupport: Boolean
}

type PaymentMethodOptionsCashapp {
  captureMethod: String
  setupFutureUsage: String
}

type PaymentMethodOptionsCustomerBalance {
  bankTransfer: Object
  fundingType: String
  setupFutureUsage: String
}

type PaymentMethodOptionsCustomerBalanceBankTransfer {
  euBankTransfer: Object
  requestedAddressTypes: Array
  type: String
}

type PaymentMethodOptionsCustomerBalanceEuBankAccount {
  country: String!
}

type PaymentMethodOptionsFpx {
  setupFutureUsage: String
}

type PaymentMethodOptionsGiropay {
  setupFutureUsage: String
}

type PaymentMethodOptionsGrabpay {
  setupFutureUsage: String
}

type PaymentMethodOptionsIdeal {
  setupFutureUsage: String
}

type PaymentMethodOptionsKlarna {
  captureMethod: String
  preferredLocale: String
  setupFutureUsage: String
}

type PaymentMethodOptionsKonbini {
  confirmationNumber: String
  expiresAfterDays: Int
  expiresAt: Int
  productDescription: String
  setupFutureUsage: String
}

type PaymentMethodOptionsOxxo {
  expiresAfterDays: Int!
  setupFutureUsage: String
}

type PaymentMethodOptionsP24 {
  setupFutureUsage: String
}

type PaymentMethodOptionsPaynow {
  setupFutureUsage: String
}

type PaymentMethodOptionsPaypal {
  captureMethod: String
  preferredLocale: String
  reference: String
  setupFutureUsage: String
}

type PaymentMethodOptionsPix {
  expiresAfterSeconds: Int
  expiresAt: Int
  setupFutureUsage: String
}

type PaymentMethodOptionsPromptpay {
  setupFutureUsage: String
}

type PaymentMethodOptionsSofort {
  preferredLanguage: String
  setupFutureUsage: String
}

type PaymentMethodOptionsUsBankAccountMandateOptions {
  collectionMethod: String
}

type PaymentMethodOptionsWechatPay {
  appId: String
  client: String
  setupFutureUsage: String
}

type PaymentMethodOptionsZip {
  setupFutureUsage: String
}

type PaymentMethodP24 {
  bank: String
}

type PaymentMethodPaypal {
  payerEmail: String
  payerId: String
}

type PaymentMethodSepaDebit {
  bankCode: String
  branchCode: String
  country: String
  fingerprint: String
  generatedFrom: Type455
  last4: String
}

type PaymentMethodSofort {
  country: String
}

type PaymentMethodUsBankAccount {
  accountHolderType: String
  accountType: String
  bankName: String
  financialConnectionsAccount: String
  fingerprint: String
  last4: String
  networks: Type456
  routingNumber: String
  statusDetails: Type457
}

type PaymentMethodUsBankAccountBlocked {
  networkCode: String
  reason: String
}

type PaymentMethodUsBankAccountStatusDetails {
  blocked: Object
}

type PaymentPagesCheckoutSessionAfterExpiration {
  recovery: Type458
}

type PaymentPagesCheckoutSessionAfterExpirationRecovery {
  allowPromotionCodes: Boolean!
  enabled: Boolean!
  expiresAt: Int
  url: String
}

type PaymentPagesCheckoutSessionAutomaticTax {
  enabled: Boolean!
  liability: Type459
  status: String
}

type PaymentPagesCheckoutSessionConsent {
  promotions: String
  termsOfService: String
}

type PaymentPagesCheckoutSessionConsentCollection {
  paymentMethodReuseAgreement: Type460
  promotions: String
  termsOfService: String
}

type PaymentPagesCheckoutSessionCurrencyConversion {
  amountSubtotal: Int!
  amountTotal: Int!
  fxRate: String!
  sourceCurrency: String!
}

type PaymentPagesCheckoutSessionCustomFields {
  dropdown: Object
  key: String!
  label: Object!
  numeric: Object
  optional: Boolean!
  text: Object
  type: String!
}

type PaymentPagesCheckoutSessionCustomFieldsDropdown {
  options: Array!
  value: String
}

type PaymentPagesCheckoutSessionCustomFieldsLabel {
  custom: String
  type: String!
}

type PaymentPagesCheckoutSessionCustomFieldsNumeric {
  maximumLength: Int
  minimumLength: Int
  value: String
}

type PaymentPagesCheckoutSessionCustomFieldsOption {
  label: String!
  value: String!
}

type PaymentPagesCheckoutSessionCustomFieldsText {
  maximumLength: Int
  minimumLength: Int
  value: String
}

type PaymentPagesCheckoutSessionCustomText {
  afterSubmit: Type461
  shippingAddress: Type462
  submit: Type463
  termsOfServiceAcceptance: Type464
}

type PaymentPagesCheckoutSessionCustomTextPosition {
  message: String!
}

type PaymentPagesCheckoutSessionCustomerDetails {
  address: Type465
  email: String
  name: String
  phone: String
  taxExempt: String
  taxIds: Array
}

type PaymentPagesCheckoutSessionInvoiceCreation {
  enabled: Boolean!
  invoiceData: Object!
}

type PaymentPagesCheckoutSessionInvoiceSettings {
  accountTaxIds: Array
  customFields: Array
  description: String
  footer: String
  issuer: Type466
  metadata: Object
  renderingOptions: Type467
}

type PaymentPagesCheckoutSessionPaymentMethodReuseAgreement {
  position: String!
}

type PaymentPagesCheckoutSessionPhoneNumberCollection {
  enabled: Boolean!
}

type PaymentPagesCheckoutSessionShippingAddressCollection {
  allowedCountries: Array!
}

type PaymentPagesCheckoutSessionShippingCost {
  amountSubtotal: Int!
  amountTax: Int!
  amountTotal: Int!
  shippingRate: Type468
  taxes: Array
}

type PaymentPagesCheckoutSessionShippingOption {
  shippingAmount: Int!
  shippingRate: Type469!
}

type PaymentPagesCheckoutSessionTaxId {
  type: String!
  value: String
}

type PaymentPagesCheckoutSessionTaxIdCollection {
  enabled: Boolean!
}

type PaymentPagesCheckoutSessionTotalDetails {
  amountDiscount: Int!
  amountShipping: Int
  amountTax: Int!
  breakdown: Object
}

type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
  discounts: Array!
  taxes: Array!
}

type Payout {
  amount: Int!
  arrivalDate: Int!
  automatic: Boolean!
  balanceTransaction: Type470
  created: Int!
  currency: String!
  description: String
  destination: Type471
  failureBalanceTransaction: Type472
  failureCode: String
  failureMessage: String
  id: String!
  livemode: Boolean!
  metadata: Object
  method: String!
  object: String!
  originalPayout: Type473
  reconciliationStatus: String!
  reversedBy: Type474
  sourceType: String!
  statementDescriptor: String
  status: String!
  type: String!
}

type PaypalSellerProtection {
  disputeCategories: Array
  status: String!
}

type Period {
  end: Int
  start: Int
}

type Person {
  account: String!
  additionalTosAcceptances: Object
  address: Object
  addressKana: Type475
  addressKanji: Type476
  created: Int!
  dob: Object
  email: String
  firstName: String
  firstNameKana: String
  firstNameKanji: String
  fullNameAliases: Array
  futureRequirements: Type477
  gender: String
  id: String!
  idNumberProvided: Boolean
  idNumberSecondaryProvided: Boolean
  lastName: String
  lastNameKana: String
  lastNameKanji: String
  maidenName: String
  metadata: Object
  nationality: String
  object: String!
  phone: String
  politicalExposure: String
  registeredAddress: Object
  relationship: Object
  requirements: Type478
  ssnLast4Provided: Boolean
  verification: Object
}

type PersonAdditionalTosAcceptance {
  date: Int
  ip: String
  userAgent: String
}

type PersonAdditionalTosAcceptances {
  account: Object!
}

type PersonFutureRequirements {
  alternatives: Array
  currentlyDue: Array!
  errors: Array!
  eventuallyDue: Array!
  pastDue: Array!
  pendingVerification: Array!
}

type PersonRelationship {
  director: Boolean
  executive: Boolean
  legalGuardian: Boolean
  owner: Boolean
  percentOwnership: Number
  representative: Boolean
  title: String
}

type PersonRequirements {
  alternatives: Array
  currentlyDue: Array!
  errors: Array!
  eventuallyDue: Array!
  pastDue: Array!
  pendingVerification: Array!
}

type Plan {
  active: Boolean!
  aggregateUsage: String
  amount: Int
  amountDecimal: String
  billingScheme: String!
  created: Int!
  currency: String!
  id: String!
  interval: String!
  intervalCount: Int!
  livemode: Boolean!
  metadata: Object
  meter: String
  nickname: String
  object: String!
  product: Type479
  tiers: Array
  tiersMode: String
  transformUsage: Type480
  trialPeriodDays: Int
  usageType: String!
}

type PlanTier {
  flatAmount: Int
  flatAmountDecimal: String
  unitAmount: Int
  unitAmountDecimal: String
  upTo: Int
}

type PlatformTaxFee {
  account: String!
  id: String!
  object: String!
  sourceTransaction: String!
  type: String!
}

type PortalBusinessProfile {
  headline: String
  privacyPolicyUrl: String
  termsOfServiceUrl: String
}

type PortalCustomerUpdate {
  allowedUpdates: Array!
  enabled: Boolean!
}

type PortalFeatures {
  customerUpdate: Object!
  invoiceHistory: Object!
  paymentMethodUpdate: Object!
  subscriptionCancel: Object!
  subscriptionPause: Object!
  subscriptionUpdate: Object!
}

type PortalFlowsAfterCompletionHostedConfirmation {
  customMessage: String
}

type PortalFlowsAfterCompletionRedirect {
  returnUrl: String!
}

type PortalFlowsCouponOffer {
  coupon: String!
}

type PortalFlowsFlow {
  afterCompletion: Object!
  subscriptionCancel: Type481
  subscriptionUpdate: Type482
  subscriptionUpdateConfirm: Type483
  type: String!
}

type PortalFlowsFlowAfterCompletion {
  hostedConfirmation: Type484
  redirect: Type485
  type: String!
}

type PortalFlowsFlowSubscriptionCancel {
  retention: Type486
  subscription: String!
}

type PortalFlowsFlowSubscriptionUpdate {
  subscription: String!
}

type PortalFlowsFlowSubscriptionUpdateConfirm {
  discounts: Array
  items: Array!
  subscription: String!
}

type PortalFlowsRetention {
  couponOffer: Type487
  type: String!
}

type PortalFlowsSubscriptionUpdateConfirmDiscount {
  coupon: String
  promotionCode: String
}

type PortalFlowsSubscriptionUpdateConfirmItem {
  id: String
  price: String
  quantity: Int
}

type PortalInvoiceList {
  enabled: Boolean!
}

type PortalLoginPage {
  enabled: Boolean!
  url: String
}

type PortalPaymentMethodUpdate {
  enabled: Boolean!
}

type PortalSubscriptionCancel {
  cancellationReason: Object!
  enabled: Boolean!
  mode: String!
  prorationBehavior: String!
}

type PortalSubscriptionCancellationReason {
  enabled: Boolean!
  options: Array!
}

type PortalSubscriptionPause {
  enabled: Boolean!
}

type PortalSubscriptionUpdate {
  defaultAllowedUpdates: Array!
  enabled: Boolean!
  products: Array
  prorationBehavior: String!
}

type PortalSubscriptionUpdateProduct {
  prices: Array!
  product: String!
}

type Price {
  active: Boolean!
  billingScheme: String!
  created: Int!
  currency: String!
  currencyOptions: Object
  customUnitAmount: Type488
  id: String!
  livemode: Boolean!
  lookupKey: String
  metadata: Object!
  nickname: String
  object: String!
  product: Type489!
  recurring: Type490
  taxBehavior: String
  tiers: Array
  tiersMode: String
  transformQuantity: Type491
  type: String!
  unitAmount: Int
  unitAmountDecimal: String
}

type PriceTier {
  flatAmount: Int
  flatAmountDecimal: String
  unitAmount: Int
  unitAmountDecimal: String
  upTo: Int
}

type Product {
  active: Boolean!
  created: Int!
  defaultPrice: Type492
  description: String
  features: Array!
  id: String!
  images: Array!
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
  packageDimensions: Type493
  shippable: Boolean
  statementDescriptor: String
  taxCode: Type494
  unitLabel: String
  updated: Int!
  url: String
}

type ProductMarketingFeature {
  name: String
}

type PromotionCode {
  active: Boolean!
  code: String!
  coupon: Object!
  created: Int!
  customer: Type495
  expiresAt: Int
  id: String!
  livemode: Boolean!
  maxRedemptions: Int
  metadata: Object
  object: String!
  restrictions: Object!
  timesRedeemed: Int!
}

type PromotionCodeCurrencyOption {
  minimumAmount: Int!
}

type PromotionCodesResourceRestrictions {
  currencyOptions: Object
  firstTimeTransaction: Boolean!
  minimumAmount: Int
  minimumAmountCurrency: String
}

type Query {
  deleteEphemeralKeysKey(key: String!): EphemeralKey @http(method: "DELETE", path: "/v1/ephemeral_keys/{{args.key}}")
  deleteSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!): DeletedDiscount @http(method: "DELETE", path: "/v1/subscriptions/{{args.subscription_exposed_id}}/discount")
  getAccount(expand: [String]): Account @http(path: "/v1/account")
  getAccounts(created: Type0, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/accounts")
  getAccountsAccount(account: String!, expand: [String]): Account @http(path: "/v1/accounts/{{args.account}}")
  getAccountsAccountBankAccountsId(account: String!, expand: [String], id: String!): Type2 @http(path: "/v1/accounts/{{args.account}}/bank_accounts/{{args.id}}")
  getAccountsAccountCapabilities(account: String!, expand: [String]): Object @http(path: "/v1/accounts/{{args.account}}/capabilities")
  getAccountsAccountCapabilitiesCapability(account: String!, capability: String!, expand: [String]): Capability @http(path: "/v1/accounts/{{args.account}}/capabilities/{{args.capability}}")
  getAccountsAccountExternalAccounts(account: String!, endingBefore: String, expand: [String], limit: Int, object: String, startingAfter: String): Object @http(path: "/v1/accounts/{{args.account}}/external_accounts")
  getAccountsAccountExternalAccountsId(account: String!, expand: [String], id: String!): Type3 @http(path: "/v1/accounts/{{args.account}}/external_accounts/{{args.id}}")
  getAccountsAccountPeople(account: String!, endingBefore: String, expand: [String], limit: Int, relationship: Object, startingAfter: String): Object @http(path: "/v1/accounts/{{args.account}}/people")
  getAccountsAccountPeoplePerson(account: String!, expand: [String], person: String!): Person @http(path: "/v1/accounts/{{args.account}}/people/{{args.person}}")
  getAccountsAccountPersons(account: String!, endingBefore: String, expand: [String], limit: Int, relationship: Object, startingAfter: String): Object @http(path: "/v1/accounts/{{args.account}}/persons")
  getAccountsAccountPersonsPerson(account: String!, expand: [String], person: String!): Person @http(path: "/v1/accounts/{{args.account}}/persons/{{args.person}}")
  getApplePayDomains(domainName: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/apple_pay/domains")
  getApplePayDomainsDomain(domain: String!, expand: [String]): ApplePayDomain @http(path: "/v1/apple_pay/domains/{{args.domain}}")
  getApplicationFees(charge: String, created: Type4, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/application_fees")
  getApplicationFeesFeeRefundsId(expand: [String], fee: String!, id: String!): FeeRefund @http(path: "/v1/application_fees/{{args.fee}}/refunds/{{args.id}}")
  getApplicationFeesId(expand: [String], id: String!): ApplicationFee @http(path: "/v1/application_fees/{{args.id}}")
  getApplicationFeesIdRefunds(endingBefore: String, expand: [String], id: String!, limit: Int, startingAfter: String): Object @http(path: "/v1/application_fees/{{args.id}}/refunds")
  getAppsSecrets(endingBefore: String, expand: [String], limit: Int, scope: Object!, startingAfter: String): Object @http(path: "/v1/apps/secrets")
  getAppsSecretsFind(expand: [String], name: String!, scope: Object!): Apps.secret @http(path: "/v1/apps/secrets/find")
  getBalance(expand: [String]): Balance @http(path: "/v1/balance")
  getBalanceHistory(created: Type5, currency: String, endingBefore: String, expand: [String], limit: Int, payout: String, source: String, startingAfter: String, type: String): Object @http(path: "/v1/balance/history")
  getBalanceHistoryId(expand: [String], id: String!): BalanceTransaction @http(path: "/v1/balance/history/{{args.id}}")
  getBalanceTransactions(created: Type6, currency: String, endingBefore: String, expand: [String], limit: Int, payout: String, source: String, startingAfter: String, type: String): Object @http(path: "/v1/balance_transactions")
  getBalanceTransactionsId(expand: [String], id: String!): BalanceTransaction @http(path: "/v1/balance_transactions/{{args.id}}")
  getBillingMeters(endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/billing/meters")
  getBillingMetersId(expand: [String], id: String!): Billing.meter @http(path: "/v1/billing/meters/{{args.id}}")
  getBillingMetersIdEventSummaries(customer: String!, endTime: Int!, endingBefore: String, expand: [String], id: String!, limit: Int, startTime: Int!, startingAfter: String, valueGroupingWindow: String): Object @http(path: "/v1/billing/meters/{{args.id}}/event_summaries")
  getBillingPortalConfigurations(active: Boolean, endingBefore: String, expand: [String], isDefault: Boolean, limit: Int, startingAfter: String): Object @http(path: "/v1/billing_portal/configurations")
  getBillingPortalConfigurationsConfiguration(configuration: String!, expand: [String]): BillingPortal.configuration @http(path: "/v1/billing_portal/configurations/{{args.configuration}}")
  getCharges(created: Type7, customer: String, endingBefore: String, expand: [String], limit: Int, paymentIntent: String, startingAfter: String, transferGroup: String): Object @http(path: "/v1/charges")
  getChargesCharge(charge: String!, expand: [String]): Charge @http(path: "/v1/charges/{{args.charge}}")
  getChargesChargeDispute(charge: String!, expand: [String]): Dispute @http(path: "/v1/charges/{{args.charge}}/dispute")
  getChargesChargeRefunds(charge: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/charges/{{args.charge}}/refunds")
  getChargesChargeRefundsRefund(charge: String!, expand: [String], refund: String!): Refund @http(path: "/v1/charges/{{args.charge}}/refunds/{{args.refund}}")
  getChargesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/charges/search")
  getCheckoutSessions(created: Type8, customer: String, customerDetails: Object, endingBefore: String, expand: [String], limit: Int, paymentIntent: String, paymentLink: String, startingAfter: String, status: String, subscription: String): Object @http(path: "/v1/checkout/sessions")
  getCheckoutSessionsSession(expand: [String], session: String!): Checkout.session @http(path: "/v1/checkout/sessions/{{args.session}}")
  getCheckoutSessionsSessionLineItems(endingBefore: String, expand: [String], limit: Int, session: String!, startingAfter: String): Object @http(path: "/v1/checkout/sessions/{{args.session}}/line_items")
  getClimateOrders(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/climate/orders")
  getClimateOrdersOrder(expand: [String], order: String!): Climate.order @http(path: "/v1/climate/orders/{{args.order}}")
  getClimateProducts(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/climate/products")
  getClimateProductsProduct(expand: [String], product: String!): Climate.product @http(path: "/v1/climate/products/{{args.product}}")
  getClimateSuppliers(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/climate/suppliers")
  getClimateSuppliersSupplier(expand: [String], supplier: String!): Climate.supplier @http(path: "/v1/climate/suppliers/{{args.supplier}}")
  getConfirmationTokensConfirmationToken(confirmationToken: String!, expand: [String]): ConfirmationToken @http(path: "/v1/confirmation_tokens/{{args.confirmation_token}}")
  getCountrySpecs(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/country_specs")
  getCountrySpecsCountry(country: String!, expand: [String]): CountrySpec @http(path: "/v1/country_specs/{{args.country}}")
  getCoupons(created: Type9, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/coupons")
  getCouponsCoupon(coupon: String!, expand: [String]): Coupon @http(path: "/v1/coupons/{{args.coupon}}")
  getCreditNotes(created: Type10, customer: String, endingBefore: String, expand: [String], invoice: String, limit: Int, startingAfter: String): Object @http(path: "/v1/credit_notes")
  getCreditNotesCreditNoteLines(creditNote: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/credit_notes/{{args.credit_note}}/lines")
  getCreditNotesId(expand: [String], id: String!): CreditNote @http(path: "/v1/credit_notes/{{args.id}}")
  getCreditNotesPreview(amount: Int, creditAmount: Int, effectiveAt: Int, expand: [String], invoice: String!, lines: [Object], memo: String, metadata: Object, outOfBandAmount: Int, reason: String, refund: String, refundAmount: Int, shippingCost: Object): CreditNote @http(path: "/v1/credit_notes/preview")
  getCreditNotesPreviewLines(amount: Int, creditAmount: Int, effectiveAt: Int, endingBefore: String, expand: [String], invoice: String!, limit: Int, lines: [Object], memo: String, metadata: Object, outOfBandAmount: Int, reason: String, refund: String, refundAmount: Int, shippingCost: Object, startingAfter: String): Object @http(path: "/v1/credit_notes/preview/lines")
  getCustomers(created: Type11, email: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String, testClock: String): Object @http(path: "/v1/customers")
  getCustomersCustomer(customer: String!, expand: [String]): Type12 @http(path: "/v1/customers/{{args.customer}}")
  getCustomersCustomerBalanceTransactions(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/balance_transactions")
  getCustomersCustomerBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): CustomerBalanceTransaction @http(path: "/v1/customers/{{args.customer}}/balance_transactions/{{args.transaction}}")
  getCustomersCustomerBankAccounts(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/bank_accounts")
  getCustomersCustomerBankAccountsId(customer: String!, expand: [String], id: String!): BankAccount @http(path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}")
  getCustomersCustomerCards(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/cards")
  getCustomersCustomerCardsId(customer: String!, expand: [String], id: String!): Card @http(path: "/v1/customers/{{args.customer}}/cards/{{args.id}}")
  getCustomersCustomerCashBalance(customer: String!, expand: [String]): CashBalance @http(path: "/v1/customers/{{args.customer}}/cash_balance")
  getCustomersCustomerCashBalanceTransactions(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions")
  getCustomersCustomerCashBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): CustomerCashBalanceTransaction @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions/{{args.transaction}}")
  getCustomersCustomerDiscount(customer: String!, expand: [String]): Discount @http(path: "/v1/customers/{{args.customer}}/discount")
  getCustomersCustomerPaymentMethods(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String, type: String): Object @http(path: "/v1/customers/{{args.customer}}/payment_methods")
  getCustomersCustomerPaymentMethodsPaymentMethod(customer: String!, expand: [String], paymentMethod: String!): PaymentMethod @http(path: "/v1/customers/{{args.customer}}/payment_methods/{{args.payment_method}}")
  getCustomersCustomerSources(customer: String!, endingBefore: String, expand: [String], limit: Int, object: String, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/sources")
  getCustomersCustomerSourcesId(customer: String!, expand: [String], id: String!): Type13 @http(path: "/v1/customers/{{args.customer}}/sources/{{args.id}}")
  getCustomersCustomerSubscriptions(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/subscriptions")
  getCustomersCustomerSubscriptionsSubscriptionExposedId(customer: String!, expand: [String], subscriptionExposedId: String!): Subscription @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}")
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(customer: String!, expand: [String], subscriptionExposedId: String!): Discount @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}/discount")
  getCustomersCustomerTaxIds(customer: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/customers/{{args.customer}}/tax_ids")
  getCustomersCustomerTaxIdsId(customer: String!, expand: [String], id: String!): TaxId @http(path: "/v1/customers/{{args.customer}}/tax_ids/{{args.id}}")
  getCustomersSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/customers/search")
  getDisputes(charge: String, created: Type14, endingBefore: String, expand: [String], limit: Int, paymentIntent: String, startingAfter: String): Object @http(path: "/v1/disputes")
  getDisputesDispute(dispute: String!, expand: [String]): Dispute @http(path: "/v1/disputes/{{args.dispute}}")
  getEvents(created: Type15, deliverySuccess: Boolean, endingBefore: String, expand: [String], limit: Int, startingAfter: String, type: String, types: [String]): Object @http(path: "/v1/events")
  getEventsId(expand: [String], id: String!): Event @http(path: "/v1/events/{{args.id}}")
  getExchangeRates(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/exchange_rates")
  getExchangeRatesRateId(expand: [String], rateId: String!): ExchangeRate @http(path: "/v1/exchange_rates/{{args.rate_id}}")
  getFileLinks(created: Type16, endingBefore: String, expand: [String], expired: Boolean, file: String, limit: Int, startingAfter: String): Object @http(path: "/v1/file_links")
  getFileLinksLink(expand: [String], link: String!): FileLink @http(path: "/v1/file_links/{{args.link}}")
  getFiles(created: Type17, endingBefore: String, expand: [String], limit: Int, purpose: String, startingAfter: String): Object @http(path: "/v1/files")
  getFilesFile(expand: [String], file: String!): File @http(path: "/v1/files/{{args.file}}")
  getFinancialConnectionsAccounts(accountHolder: Object, endingBefore: String, expand: [String], limit: Int, session: String, startingAfter: String): Object @http(path: "/v1/financial_connections/accounts")
  getFinancialConnectionsAccountsAccount(account: String!, expand: [String]): FinancialConnections.account @http(path: "/v1/financial_connections/accounts/{{args.account}}")
  getFinancialConnectionsAccountsAccountOwners(account: String!, endingBefore: String, expand: [String], limit: Int, ownership: String!, startingAfter: String): Object @http(path: "/v1/financial_connections/accounts/{{args.account}}/owners")
  getFinancialConnectionsSessionsSession(expand: [String], session: String!): FinancialConnections.session @http(path: "/v1/financial_connections/sessions/{{args.session}}")
  getFinancialConnectionsTransactions(account: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String, transactedAt: Type18, transactionRefresh: Object): Object @http(path: "/v1/financial_connections/transactions")
  getFinancialConnectionsTransactionsTransaction(expand: [String], transaction: String!): FinancialConnections.transaction @http(path: "/v1/financial_connections/transactions/{{args.transaction}}")
  getForwardingRequests(created: Object, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/forwarding/requests")
  getForwardingRequestsId(expand: [String], id: String!): Forwarding.request @http(path: "/v1/forwarding/requests/{{args.id}}")
  getIdentityVerificationReports(clientReferenceId: String, created: Type19, endingBefore: String, expand: [String], limit: Int, startingAfter: String, type: String, verificationSession: String): Object @http(path: "/v1/identity/verification_reports")
  getIdentityVerificationReportsReport(expand: [String], report: String!): Identity.verificationReport @http(path: "/v1/identity/verification_reports/{{args.report}}")
  getIdentityVerificationSessions(clientReferenceId: String, created: Type20, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/identity/verification_sessions")
  getIdentityVerificationSessionsSession(expand: [String], session: String!): Identity.verificationSession @http(path: "/v1/identity/verification_sessions/{{args.session}}")
  getInvoiceitems(created: Type21, customer: String, endingBefore: String, expand: [String], invoice: String, limit: Int, pending: Boolean, startingAfter: String): Object @http(path: "/v1/invoiceitems")
  getInvoiceitemsInvoiceitem(expand: [String], invoiceitem: String!): Invoiceitem @http(path: "/v1/invoiceitems/{{args.invoiceitem}}")
  getInvoices(collectionMethod: String, created: Type22, customer: String, dueDate: Type23, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String, subscription: String): Object @http(path: "/v1/invoices")
  getInvoicesInvoice(expand: [String], invoice: String!): Invoice @http(path: "/v1/invoices/{{args.invoice}}")
  getInvoicesInvoiceLines(endingBefore: String, expand: [String], invoice: String!, limit: Int, startingAfter: String): Object @http(path: "/v1/invoices/{{args.invoice}}/lines")
  getInvoicesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/invoices/search")
  getInvoicesUpcoming(automaticTax: Object, coupon: String, currency: String, customer: String, customerDetails: Object, discounts: Type24, expand: [String], invoiceItems: [Object], issuer: Object, onBehalfOf: Type25, schedule: String, subscription: String, subscriptionBillingCycleAnchor: Type26, subscriptionCancelAt: Type27, subscriptionCancelAtPeriodEnd: Boolean, subscriptionCancelNow: Boolean, subscriptionDefaultTaxRates: Type28, subscriptionItems: [Object], subscriptionProrationBehavior: String, subscriptionProrationDate: Int, subscriptionResumeAt: String, subscriptionStartDate: Int, subscriptionTrialEnd: Type29, subscriptionTrialFromPlan: Boolean): Invoice @http(path: "/v1/invoices/upcoming")
  getInvoicesUpcomingLines(automaticTax: Object, coupon: String, currency: String, customer: String, customerDetails: Object, discounts: Type30, endingBefore: String, expand: [String], invoiceItems: [Object], issuer: Object, limit: Int, onBehalfOf: Type31, schedule: String, startingAfter: String, subscription: String, subscriptionBillingCycleAnchor: Type32, subscriptionCancelAt: Type33, subscriptionCancelAtPeriodEnd: Boolean, subscriptionCancelNow: Boolean, subscriptionDefaultTaxRates: Type34, subscriptionItems: [Object], subscriptionProrationBehavior: String, subscriptionProrationDate: Int, subscriptionResumeAt: String, subscriptionStartDate: Int, subscriptionTrialEnd: Type35, subscriptionTrialFromPlan: Boolean): Object @http(path: "/v1/invoices/upcoming/lines")
  getIssuingAuthorizations(card: String, cardholder: String, created: Type36, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/issuing/authorizations")
  getIssuingAuthorizationsAuthorization(authorization: String!, expand: [String]): Issuing.authorization @http(path: "/v1/issuing/authorizations/{{args.authorization}}")
  getIssuingCardholders(created: Type37, email: String, endingBefore: String, expand: [String], limit: Int, phoneNumber: String, startingAfter: String, status: String, type: String): Object @http(path: "/v1/issuing/cardholders")
  getIssuingCardholdersCardholder(cardholder: String!, expand: [String]): Issuing.cardholder @http(path: "/v1/issuing/cardholders/{{args.cardholder}}")
  getIssuingCards(cardholder: String, created: Type38, endingBefore: String, expMonth: Int, expYear: Int, expand: [String], last4: String, limit: Int, personalizationDesign: String, startingAfter: String, status: String, type: String): Object @http(path: "/v1/issuing/cards")
  getIssuingCardsCard(card: String!, expand: [String]): Issuing.card @http(path: "/v1/issuing/cards/{{args.card}}")
  getIssuingDisputes(created: Type39, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String, transaction: String): Object @http(path: "/v1/issuing/disputes")
  getIssuingDisputesDispute(dispute: String!, expand: [String]): Issuing.dispute @http(path: "/v1/issuing/disputes/{{args.dispute}}")
  getIssuingPersonalizationDesigns(endingBefore: String, expand: [String], limit: Int, lookupKeys: [String], preferences: Object, startingAfter: String, status: String): Object @http(path: "/v1/issuing/personalization_designs")
  getIssuingPersonalizationDesignsPersonalizationDesign(expand: [String], personalizationDesign: String!): Issuing.personalizationDesign @http(path: "/v1/issuing/personalization_designs/{{args.personalization_design}}")
  getIssuingPhysicalBundles(endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String, type: String): Object @http(path: "/v1/issuing/physical_bundles")
  getIssuingPhysicalBundlesPhysicalBundle(expand: [String], physicalBundle: String!): Issuing.physicalBundle @http(path: "/v1/issuing/physical_bundles/{{args.physical_bundle}}")
  getIssuingSettlements(created: Type40, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/issuing/settlements")
  getIssuingSettlementsSettlement(expand: [String], settlement: String!): Issuing.settlement @http(path: "/v1/issuing/settlements/{{args.settlement}}")
  getIssuingTokens(card: String!, created: Type41, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/issuing/tokens")
  getIssuingTokensToken(expand: [String], token: String!): Issuing.token @http(path: "/v1/issuing/tokens/{{args.token}}")
  getIssuingTransactions(card: String, cardholder: String, created: Type42, endingBefore: String, expand: [String], limit: Int, startingAfter: String, type: String): Object @http(path: "/v1/issuing/transactions")
  getIssuingTransactionsTransaction(expand: [String], transaction: String!): Issuing.transaction @http(path: "/v1/issuing/transactions/{{args.transaction}}")
  getLinkAccountSessionsSession(expand: [String], session: String!): FinancialConnections.session @http(path: "/v1/link_account_sessions/{{args.session}}")
  getLinkedAccounts(accountHolder: Object, endingBefore: String, expand: [String], limit: Int, session: String, startingAfter: String): Object @http(path: "/v1/linked_accounts")
  getLinkedAccountsAccount(account: String!, expand: [String]): FinancialConnections.account @http(path: "/v1/linked_accounts/{{args.account}}")
  getLinkedAccountsAccountOwners(account: String!, endingBefore: String, expand: [String], limit: Int, ownership: String!, startingAfter: String): Object @http(path: "/v1/linked_accounts/{{args.account}}/owners")
  getMandatesMandate(expand: [String], mandate: String!): Mandate @http(path: "/v1/mandates/{{args.mandate}}")
  getPaymentIntents(created: Type43, customer: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/payment_intents")
  getPaymentIntentsIntent(clientSecret: String, expand: [String], intent: String!): PaymentIntent @http(path: "/v1/payment_intents/{{args.intent}}")
  getPaymentIntentsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/payment_intents/search")
  getPaymentLinks(active: Boolean, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/payment_links")
  getPaymentLinksPaymentLink(expand: [String], paymentLink: String!): PaymentLink @http(path: "/v1/payment_links/{{args.payment_link}}")
  getPaymentLinksPaymentLinkLineItems(endingBefore: String, expand: [String], limit: Int, paymentLink: String!, startingAfter: String): Object @http(path: "/v1/payment_links/{{args.payment_link}}/line_items")
  getPaymentMethodConfigurations(application: Type44, expand: [String]): Object @http(path: "/v1/payment_method_configurations")
  getPaymentMethodConfigurationsConfiguration(configuration: String!, expand: [String]): PaymentMethodConfiguration @http(path: "/v1/payment_method_configurations/{{args.configuration}}")
  getPaymentMethodDomains(domainName: String, enabled: Boolean, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/payment_method_domains")
  getPaymentMethodDomainsPaymentMethodDomain(expand: [String], paymentMethodDomain: String!): PaymentMethodDomain @http(path: "/v1/payment_method_domains/{{args.payment_method_domain}}")
  getPaymentMethods(customer: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String, type: String): Object @http(path: "/v1/payment_methods")
  getPaymentMethodsPaymentMethod(expand: [String], paymentMethod: String!): PaymentMethod @http(path: "/v1/payment_methods/{{args.payment_method}}")
  getPayouts(arrivalDate: Type45, created: Type46, destination: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/payouts")
  getPayoutsPayout(expand: [String], payout: String!): Payout @http(path: "/v1/payouts/{{args.payout}}")
  getPlans(active: Boolean, created: Type47, endingBefore: String, expand: [String], limit: Int, product: String, startingAfter: String): Object @http(path: "/v1/plans")
  getPlansPlan(expand: [String], plan: String!): Plan @http(path: "/v1/plans/{{args.plan}}")
  getPrices(active: Boolean, created: Type48, currency: String, endingBefore: String, expand: [String], limit: Int, lookupKeys: [String], product: String, recurring: Object, startingAfter: String, type: String): Object @http(path: "/v1/prices")
  getPricesPrice(expand: [String], price: String!): Price @http(path: "/v1/prices/{{args.price}}")
  getPricesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/prices/search")
  getProducts(active: Boolean, created: Type49, endingBefore: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, startingAfter: String, url: String): Object @http(path: "/v1/products")
  getProductsId(expand: [String], id: String!): Product @http(path: "/v1/products/{{args.id}}")
  getProductsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/products/search")
  getPromotionCodes(active: Boolean, code: String, coupon: String, created: Type50, customer: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/promotion_codes")
  getPromotionCodesPromotionCode(expand: [String], promotionCode: String!): PromotionCode @http(path: "/v1/promotion_codes/{{args.promotion_code}}")
  getQuotes(customer: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String, testClock: String): Object @http(path: "/v1/quotes")
  getQuotesQuote(expand: [String], quote: String!): Quote @http(path: "/v1/quotes/{{args.quote}}")
  getQuotesQuoteComputedUpfrontLineItems(endingBefore: String, expand: [String], limit: Int, quote: String!, startingAfter: String): Object @http(path: "/v1/quotes/{{args.quote}}/computed_upfront_line_items")
  getQuotesQuoteLineItems(endingBefore: String, expand: [String], limit: Int, quote: String!, startingAfter: String): Object @http(path: "/v1/quotes/{{args.quote}}/line_items")
  getQuotesQuotePdf(expand: [String], quote: String!): String @http(path: "/v1/quotes/{{args.quote}}/pdf")
  getRadarEarlyFraudWarnings(charge: String, created: Type51, endingBefore: String, expand: [String], limit: Int, paymentIntent: String, startingAfter: String): Object @http(path: "/v1/radar/early_fraud_warnings")
  getRadarEarlyFraudWarningsEarlyFraudWarning(earlyFraudWarning: String!, expand: [String]): Radar.earlyFraudWarning @http(path: "/v1/radar/early_fraud_warnings/{{args.early_fraud_warning}}")
  getRadarValueListItems(created: Type52, endingBefore: String, expand: [String], limit: Int, startingAfter: String, value: String, valueList: String!): Object @http(path: "/v1/radar/value_list_items")
  getRadarValueListItemsItem(expand: [String], item: String!): Radar.valueListItem @http(path: "/v1/radar/value_list_items/{{args.item}}")
  getRadarValueLists(alias: String, contains: String, created: Type53, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/radar/value_lists")
  getRadarValueListsValueList(expand: [String], valueList: String!): Radar.valueList @http(path: "/v1/radar/value_lists/{{args.value_list}}")
  getRefunds(charge: String, created: Type54, endingBefore: String, expand: [String], limit: Int, paymentIntent: String, startingAfter: String): Object @http(path: "/v1/refunds")
  getRefundsRefund(expand: [String], refund: String!): Refund @http(path: "/v1/refunds/{{args.refund}}")
  getReportingReportRuns(created: Type55, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/reporting/report_runs")
  getReportingReportRunsReportRun(expand: [String], reportRun: String!): Reporting.reportRun @http(path: "/v1/reporting/report_runs/{{args.report_run}}")
  getReportingReportTypes(expand: [String]): Object @http(path: "/v1/reporting/report_types")
  getReportingReportTypesReportType(expand: [String], reportType: String!): Reporting.reportType @http(path: "/v1/reporting/report_types/{{args.report_type}}")
  getReviews(created: Type56, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/reviews")
  getReviewsReview(expand: [String], review: String!): Review @http(path: "/v1/reviews/{{args.review}}")
  getSetupAttempts(created: Type57, endingBefore: String, expand: [String], limit: Int, setupIntent: String!, startingAfter: String): Object @http(path: "/v1/setup_attempts")
  getSetupIntents(attachToSelf: Boolean, created: Type58, customer: String, endingBefore: String, expand: [String], limit: Int, paymentMethod: String, startingAfter: String): Object @http(path: "/v1/setup_intents")
  getSetupIntentsIntent(clientSecret: String, expand: [String], intent: String!): SetupIntent @http(path: "/v1/setup_intents/{{args.intent}}")
  getShippingRates(active: Boolean, created: Type59, currency: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/shipping_rates")
  getShippingRatesShippingRateToken(expand: [String], shippingRateToken: String!): ShippingRate @http(path: "/v1/shipping_rates/{{args.shipping_rate_token}}")
  getSigmaScheduledQueryRuns(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/sigma/scheduled_query_runs")
  getSigmaScheduledQueryRunsScheduledQueryRun(expand: [String], scheduledQueryRun: String!): ScheduledQueryRun @http(path: "/v1/sigma/scheduled_query_runs/{{args.scheduled_query_run}}")
  getSourcesSource(clientSecret: String, expand: [String], source: String!): Source @http(path: "/v1/sources/{{args.source}}")
  getSourcesSourceMandateNotificationsMandateNotification(expand: [String], mandateNotification: String!, source: String!): SourceMandateNotification @http(path: "/v1/sources/{{args.source}}/mandate_notifications/{{args.mandate_notification}}")
  getSourcesSourceSourceTransactions(endingBefore: String, expand: [String], limit: Int, source: String!, startingAfter: String): Object @http(path: "/v1/sources/{{args.source}}/source_transactions")
  getSourcesSourceSourceTransactionsSourceTransaction(expand: [String], source: String!, sourceTransaction: String!): SourceTransaction @http(path: "/v1/sources/{{args.source}}/source_transactions/{{args.source_transaction}}")
  getSubscriptionItems(endingBefore: String, expand: [String], limit: Int, startingAfter: String, subscription: String!): Object @http(path: "/v1/subscription_items")
  getSubscriptionItemsItem(expand: [String], item: String!): SubscriptionItem @http(path: "/v1/subscription_items/{{args.item}}")
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries(endingBefore: String, expand: [String], limit: Int, startingAfter: String, subscriptionItem: String!): Object @http(path: "/v1/subscription_items/{{args.subscription_item}}/usage_record_summaries")
  getSubscriptionSchedules(canceledAt: Type60, completedAt: Type61, created: Type62, customer: String, endingBefore: String, expand: [String], limit: Int, releasedAt: Type63, scheduled: Boolean, startingAfter: String): Object @http(path: "/v1/subscription_schedules")
  getSubscriptionSchedulesSchedule(expand: [String], schedule: String!): SubscriptionSchedule @http(path: "/v1/subscription_schedules/{{args.schedule}}")
  getSubscriptions(automaticTax: Object, collectionMethod: String, created: Type64, currentPeriodEnd: Type65, currentPeriodStart: Type66, customer: String, endingBefore: String, expand: [String], limit: Int, price: String, startingAfter: String, status: String, testClock: String): Object @http(path: "/v1/subscriptions")
  getSubscriptionsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/subscriptions/search")
  getSubscriptionsSubscriptionExposedId(expand: [String], subscriptionExposedId: String!): Subscription @http(path: "/v1/subscriptions/{{args.subscription_exposed_id}}")
  getTaxCalculationsCalculationLineItems(calculation: String!, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/tax/calculations/{{args.calculation}}/line_items")
  getTaxCodes(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/tax_codes")
  getTaxCodesId(expand: [String], id: String!): TaxCode @http(path: "/v1/tax_codes/{{args.id}}")
  getTaxIds(endingBefore: String, expand: [String], limit: Int, owner: Object, startingAfter: String): Object @http(path: "/v1/tax_ids")
  getTaxIdsId(expand: [String], id: String!): TaxId @http(path: "/v1/tax_ids/{{args.id}}")
  getTaxRates(active: Boolean, created: Type67, endingBefore: String, expand: [String], inclusive: Boolean, limit: Int, startingAfter: String): Object @http(path: "/v1/tax_rates")
  getTaxRatesTaxRate(expand: [String], taxRate: String!): TaxRate @http(path: "/v1/tax_rates/{{args.tax_rate}}")
  getTaxRegistrations(endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/tax/registrations")
  getTaxRegistrationsId(expand: [String], id: String!): Tax.registration @http(path: "/v1/tax/registrations/{{args.id}}")
  getTaxSettings(expand: [String]): Tax.settings @http(path: "/v1/tax/settings")
  getTaxTransactionsTransaction(expand: [String], transaction: String!): Tax.transaction @http(path: "/v1/tax/transactions/{{args.transaction}}")
  getTaxTransactionsTransactionLineItems(endingBefore: String, expand: [String], limit: Int, startingAfter: String, transaction: String!): Object @http(path: "/v1/tax/transactions/{{args.transaction}}/line_items")
  getTerminalConfigurations(endingBefore: String, expand: [String], isAccountDefault: Boolean, limit: Int, startingAfter: String): Object @http(path: "/v1/terminal/configurations")
  getTerminalConfigurationsConfiguration(configuration: String!, expand: [String]): Type68 @http(path: "/v1/terminal/configurations/{{args.configuration}}")
  getTerminalLocations(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/terminal/locations")
  getTerminalLocationsLocation(expand: [String], location: String!): Type69 @http(path: "/v1/terminal/locations/{{args.location}}")
  getTerminalReaders(deviceType: String, endingBefore: String, expand: [String], limit: Int, location: String, serialNumber: String, startingAfter: String, status: String): Object @http(path: "/v1/terminal/readers")
  getTerminalReadersReader(expand: [String], reader: String!): Type70 @http(path: "/v1/terminal/readers/{{args.reader}}")
  getTestHelpersTestClocks(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/test_helpers/test_clocks")
  getTestHelpersTestClocksTestClock(expand: [String], testClock: String!): TestHelpers.testClock @http(path: "/v1/test_helpers/test_clocks/{{args.test_clock}}")
  getTokensToken(expand: [String], token: String!): Token @http(path: "/v1/tokens/{{args.token}}")
  getTopups(amount: Type71, created: Type72, endingBefore: String, expand: [String], limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/topups")
  getTopupsTopup(expand: [String], topup: String!): Topup @http(path: "/v1/topups/{{args.topup}}")
  getTransfers(created: Type73, destination: String, endingBefore: String, expand: [String], limit: Int, startingAfter: String, transferGroup: String): Object @http(path: "/v1/transfers")
  getTransfersIdReversals(endingBefore: String, expand: [String], id: String!, limit: Int, startingAfter: String): Object @http(path: "/v1/transfers/{{args.id}}/reversals")
  getTransfersTransfer(expand: [String], transfer: String!): Transfer @http(path: "/v1/transfers/{{args.transfer}}")
  getTransfersTransferReversalsId(expand: [String], id: String!, transfer: String!): TransferReversal @http(path: "/v1/transfers/{{args.transfer}}/reversals/{{args.id}}")
  getTreasuryCreditReversals(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, receivedCredit: String, startingAfter: String, status: String): Object @http(path: "/v1/treasury/credit_reversals")
  getTreasuryCreditReversalsCreditReversal(creditReversal: String!, expand: [String]): Treasury.creditReversal @http(path: "/v1/treasury/credit_reversals/{{args.credit_reversal}}")
  getTreasuryDebitReversals(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, receivedDebit: String, resolution: String, startingAfter: String, status: String): Object @http(path: "/v1/treasury/debit_reversals")
  getTreasuryDebitReversalsDebitReversal(debitReversal: String!, expand: [String]): Treasury.debitReversal @http(path: "/v1/treasury/debit_reversals/{{args.debit_reversal}}")
  getTreasuryFinancialAccounts(created: Type74, endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/treasury/financial_accounts")
  getTreasuryFinancialAccountsFinancialAccount(expand: [String], financialAccount: String!): Treasury.financialAccount @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}")
  getTreasuryFinancialAccountsFinancialAccountFeatures(expand: [String], financialAccount: String!): Treasury.financialAccountFeatures @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}/features")
  getTreasuryInboundTransfers(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/treasury/inbound_transfers")
  getTreasuryInboundTransfersId(expand: [String], id: String!): Treasury.inboundTransfer @http(path: "/v1/treasury/inbound_transfers/{{args.id}}")
  getTreasuryOutboundPayments(created: Type75, customer: String, endingBefore: String, expand: [String], financialAccount: String!, limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/treasury/outbound_payments")
  getTreasuryOutboundPaymentsId(expand: [String], id: String!): Treasury.outboundPayment @http(path: "/v1/treasury/outbound_payments/{{args.id}}")
  getTreasuryOutboundTransfers(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/treasury/outbound_transfers")
  getTreasuryOutboundTransfersOutboundTransfer(expand: [String], outboundTransfer: String!): Treasury.outboundTransfer @http(path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}")
  getTreasuryReceivedCredits(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, linkedFlows: Object, startingAfter: String, status: String): Object @http(path: "/v1/treasury/received_credits")
  getTreasuryReceivedCreditsId(expand: [String], id: String!): Treasury.receivedCredit @http(path: "/v1/treasury/received_credits/{{args.id}}")
  getTreasuryReceivedDebits(endingBefore: String, expand: [String], financialAccount: String!, limit: Int, startingAfter: String, status: String): Object @http(path: "/v1/treasury/received_debits")
  getTreasuryReceivedDebitsId(expand: [String], id: String!): Treasury.receivedDebit @http(path: "/v1/treasury/received_debits/{{args.id}}")
  getTreasuryTransactionEntries(created: Type76, effectiveAt: Type77, endingBefore: String, expand: [String], financialAccount: String!, limit: Int, orderBy: String, startingAfter: String, transaction: String): Object @http(path: "/v1/treasury/transaction_entries")
  getTreasuryTransactionEntriesId(expand: [String], id: String!): Treasury.transactionEntry @http(path: "/v1/treasury/transaction_entries/{{args.id}}")
  getTreasuryTransactions(created: Type78, endingBefore: String, expand: [String], financialAccount: String!, limit: Int, orderBy: String, startingAfter: String, status: String, statusTransitions: Object): Object @http(path: "/v1/treasury/transactions")
  getTreasuryTransactionsId(expand: [String], id: String!): Treasury.transaction @http(path: "/v1/treasury/transactions/{{args.id}}")
  getWebhookEndpoints(endingBefore: String, expand: [String], limit: Int, startingAfter: String): Object @http(path: "/v1/webhook_endpoints")
  getWebhookEndpointsWebhookEndpoint(expand: [String], webhookEndpoint: String!): WebhookEndpoint @http(path: "/v1/webhook_endpoints/{{args.webhook_endpoint}}")
  postAccountLinks: AccountLink @http(method: "POST", path: "/v1/account_links")
  postAccountSessions: AccountSession @http(method: "POST", path: "/v1/account_sessions")
  postAccountsAccountBankAccounts(account: String!): Type1 @http(method: "POST", path: "/v1/accounts/{{args.account}}/bank_accounts")
  postAccountsAccountLoginLinks(account: String!): LoginLink @http(method: "POST", path: "/v1/accounts/{{args.account}}/login_links")
  postAccountsAccountReject(account: String!): Account @http(method: "POST", path: "/v1/accounts/{{args.account}}/reject")
  postApplicationFeesIdRefund(id: String!): ApplicationFee @http(method: "POST", path: "/v1/application_fees/{{args.id}}/refund")
  postAppsSecretsDelete: Apps.secret @http(method: "POST", path: "/v1/apps/secrets/delete")
  postBillingMeterEventAdjustments: Billing.meterEventAdjustment @http(method: "POST", path: "/v1/billing/meter_event_adjustments")
  postBillingMeterEvents: Billing.meterEvent @http(method: "POST", path: "/v1/billing/meter_events")
  postBillingMetersIdDeactivate(id: String!): Billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/deactivate")
  postBillingMetersIdReactivate(id: String!): Billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/reactivate")
  postBillingPortalSessions: BillingPortal.session @http(method: "POST", path: "/v1/billing_portal/sessions")
  postChargesChargeCapture(charge: String!): Charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/capture")
  postChargesChargeDisputeClose(charge: String!): Dispute @http(method: "POST", path: "/v1/charges/{{args.charge}}/dispute/close")
  postChargesChargeRefund(charge: String!): Charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/refund")
  postCheckoutSessionsSessionExpire(session: String!): Checkout.session @http(method: "POST", path: "/v1/checkout/sessions/{{args.session}}/expire")
  postClimateOrdersOrderCancel(order: String!): Climate.order @http(method: "POST", path: "/v1/climate/orders/{{args.order}}/cancel")
  postCreditNotesIdVoid(id: String!): CreditNote @http(method: "POST", path: "/v1/credit_notes/{{args.id}}/void")
  postCustomerSessions: CustomerSession @http(method: "POST", path: "/v1/customer_sessions")
  postCustomersCustomerBankAccountsIdVerify(customer: String!, id: String!): BankAccount @http(method: "POST", path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}/verify")
  postCustomersCustomerFundingInstructions(customer: String!): FundingInstructions @http(method: "POST", path: "/v1/customers/{{args.customer}}/funding_instructions")
  postCustomersCustomerSourcesIdVerify(customer: String!, id: String!): BankAccount @http(method: "POST", path: "/v1/customers/{{args.customer}}/sources/{{args.id}}/verify")
  postDisputesDisputeClose(dispute: String!): Dispute @http(method: "POST", path: "/v1/disputes/{{args.dispute}}/close")
  postEphemeralKeys: EphemeralKey @http(method: "POST", path: "/v1/ephemeral_keys")
  postFinancialConnectionsAccountsAccountDisconnect(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/disconnect")
  postFinancialConnectionsAccountsAccountRefresh(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/refresh")
  postFinancialConnectionsAccountsAccountSubscribe(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/subscribe")
  postFinancialConnectionsAccountsAccountUnsubscribe(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/unsubscribe")
  postFinancialConnectionsSessions: FinancialConnections.session @http(method: "POST", path: "/v1/financial_connections/sessions")
  postIdentityVerificationSessionsSessionCancel(session: String!): Identity.verificationSession @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/cancel")
  postIdentityVerificationSessionsSessionRedact(session: String!): Identity.verificationSession @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/redact")
  postInvoicesInvoiceFinalize(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/finalize")
  postInvoicesInvoiceLinesLineItemId(invoice: String!, lineItemId: String!): LineItem @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/lines/{{args.line_item_id}}")
  postInvoicesInvoiceMarkUncollectible(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/mark_uncollectible")
  postInvoicesInvoicePay(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/pay")
  postInvoicesInvoiceSend(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/send")
  postInvoicesInvoiceVoid(invoice: String!): Invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/void")
  postIssuingAuthorizationsAuthorizationApprove(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/approve")
  postIssuingAuthorizationsAuthorizationDecline(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/decline")
  postIssuingDisputesDisputeSubmit(dispute: String!): Issuing.dispute @http(method: "POST", path: "/v1/issuing/disputes/{{args.dispute}}/submit")
  postLinkAccountSessions: FinancialConnections.session @http(method: "POST", path: "/v1/link_account_sessions")
  postLinkedAccountsAccountDisconnect(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/disconnect")
  postLinkedAccountsAccountRefresh(account: String!): FinancialConnections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/refresh")
  postPaymentIntentsIntentApplyCustomerBalance(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/apply_customer_balance")
  postPaymentIntentsIntentCancel(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/cancel")
  postPaymentIntentsIntentCapture(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/capture")
  postPaymentIntentsIntentConfirm(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/confirm")
  postPaymentIntentsIntentIncrementAuthorization(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/increment_authorization")
  postPaymentIntentsIntentVerifyMicrodeposits(intent: String!): PaymentIntent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/verify_microdeposits")
  postPaymentMethodDomainsPaymentMethodDomainValidate(paymentMethodDomain: String!): PaymentMethodDomain @http(method: "POST", path: "/v1/payment_method_domains/{{args.payment_method_domain}}/validate")
  postPaymentMethodsPaymentMethodAttach(paymentMethod: String!): PaymentMethod @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/attach")
  postPaymentMethodsPaymentMethodDetach(paymentMethod: String!): PaymentMethod @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/detach")
  postPayoutsPayoutCancel(payout: String!): Payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/cancel")
  postPayoutsPayoutReverse(payout: String!): Payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/reverse")
  postQuotesQuoteAccept(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/accept")
  postQuotesQuoteCancel(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/cancel")
  postQuotesQuoteFinalize(quote: String!): Quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/finalize")
  postRefundsRefundCancel(refund: String!): Refund @http(method: "POST", path: "/v1/refunds/{{args.refund}}/cancel")
  postReviewsReviewApprove(review: String!): Review @http(method: "POST", path: "/v1/reviews/{{args.review}}/approve")
  postSetupIntentsIntentCancel(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/cancel")
  postSetupIntentsIntentConfirm(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/confirm")
  postSetupIntentsIntentVerifyMicrodeposits(intent: String!): SetupIntent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/verify_microdeposits")
  postSources: Source @http(method: "POST", path: "/v1/sources")
  postSourcesSourceVerify(source: String!): Source @http(method: "POST", path: "/v1/sources/{{args.source}}/verify")
  postSubscriptionItemsSubscriptionItemUsageRecords(subscriptionItem: String!): UsageRecord @http(method: "POST", path: "/v1/subscription_items/{{args.subscription_item}}/usage_records")
  postSubscriptionSchedulesScheduleCancel(schedule: String!): SubscriptionSchedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/cancel")
  postSubscriptionSchedulesScheduleRelease(schedule: String!): SubscriptionSchedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/release")
  postSubscriptionsSubscriptionResume(subscription: String!): Subscription @http(method: "POST", path: "/v1/subscriptions/{{args.subscription}}/resume")
  postTaxCalculations: Tax.calculation @http(method: "POST", path: "/v1/tax/calculations")
  postTaxTransactionsCreateFromCalculation: Tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_from_calculation")
  postTaxTransactionsCreateReversal: Tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_reversal")
  postTerminalConnectionTokens: Terminal.connectionToken @http(method: "POST", path: "/v1/terminal/connection_tokens")
  postTerminalReadersReaderCancelAction(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/cancel_action")
  postTerminalReadersReaderProcessPaymentIntent(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_payment_intent")
  postTerminalReadersReaderProcessSetupIntent(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_setup_intent")
  postTerminalReadersReaderRefundPayment(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/refund_payment")
  postTerminalReadersReaderSetReaderDisplay(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/set_reader_display")
  postTestHelpersConfirmationTokens: ConfirmationToken @http(method: "POST", path: "/v1/test_helpers/confirmation_tokens")
  postTestHelpersCustomersCustomerFundCashBalance(customer: String!): CustomerCashBalanceTransaction @http(method: "POST", path: "/v1/test_helpers/customers/{{args.customer}}/fund_cash_balance")
  postTestHelpersIssuingAuthorizations: Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations")
  postTestHelpersIssuingAuthorizationsAuthorizationCapture(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/capture")
  postTestHelpersIssuingAuthorizationsAuthorizationExpire(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/expire")
  postTestHelpersIssuingAuthorizationsAuthorizationIncrement(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/increment")
  postTestHelpersIssuingAuthorizationsAuthorizationReverse(authorization: String!): Issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/reverse")
  postTestHelpersIssuingCardsCardShippingDeliver(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/deliver")
  postTestHelpersIssuingCardsCardShippingFail(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/fail")
  postTestHelpersIssuingCardsCardShippingReturn(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/return")
  postTestHelpersIssuingCardsCardShippingShip(card: String!): Issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/ship")
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(personalizationDesign: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/activate")
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(personalizationDesign: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/deactivate")
  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(personalizationDesign: String!): Issuing.personalizationDesign @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/reject")
  postTestHelpersIssuingTransactionsCreateForceCapture: Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_force_capture")
  postTestHelpersIssuingTransactionsCreateUnlinkedRefund: Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_unlinked_refund")
  postTestHelpersIssuingTransactionsTransactionRefund(transaction: String!): Issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/{{args.transaction}}/refund")
  postTestHelpersRefundsRefundExpire(refund: String!): Refund @http(method: "POST", path: "/v1/test_helpers/refunds/{{args.refund}}/expire")
  postTestHelpersTerminalReadersReaderPresentPaymentMethod(reader: String!): Terminal.reader @http(method: "POST", path: "/v1/test_helpers/terminal/readers/{{args.reader}}/present_payment_method")
  postTestHelpersTestClocksTestClockAdvance(testClock: String!): TestHelpers.testClock @http(method: "POST", path: "/v1/test_helpers/test_clocks/{{args.test_clock}}/advance")
  postTestHelpersTreasuryInboundTransfersIdFail(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/fail")
  postTestHelpersTreasuryInboundTransfersIdReturn(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/return")
  postTestHelpersTreasuryInboundTransfersIdSucceed(id: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/succeed")
  postTestHelpersTreasuryOutboundPaymentsIdFail(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/fail")
  postTestHelpersTreasuryOutboundPaymentsIdPost(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/post")
  postTestHelpersTreasuryOutboundPaymentsIdReturn(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/return")
  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(outboundTransfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/fail")
  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(outboundTransfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/post")
  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(outboundTransfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/return")
  postTestHelpersTreasuryReceivedCredits: Treasury.receivedCredit @http(method: "POST", path: "/v1/test_helpers/treasury/received_credits")
  postTestHelpersTreasuryReceivedDebits: Treasury.receivedDebit @http(method: "POST", path: "/v1/test_helpers/treasury/received_debits")
  postTokens: Token @http(method: "POST", path: "/v1/tokens")
  postTopupsTopupCancel(topup: String!): Topup @http(method: "POST", path: "/v1/topups/{{args.topup}}/cancel")
  postTreasuryInboundTransfersInboundTransferCancel(inboundTransfer: String!): Treasury.inboundTransfer @http(method: "POST", path: "/v1/treasury/inbound_transfers/{{args.inbound_transfer}}/cancel")
  postTreasuryOutboundPaymentsIdCancel(id: String!): Treasury.outboundPayment @http(method: "POST", path: "/v1/treasury/outbound_payments/{{args.id}}/cancel")
  postTreasuryOutboundTransfersOutboundTransferCancel(outboundTransfer: String!): Treasury.outboundTransfer @http(method: "POST", path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}/cancel")
}

type Quote {
  amountSubtotal: Int!
  amountTotal: Int!
  application: Type496
  applicationFeeAmount: Int
  applicationFeePercent: Number
  automaticTax: Object!
  collectionMethod: String!
  computed: Object!
  created: Int!
  currency: String
  customer: Type497
  defaultTaxRates: Array
  description: String
  discounts: Array!
  expiresAt: Int!
  footer: String
  fromQuote: Type498
  header: String
  id: String!
  invoice: Type499
  invoiceSettings: Object!
  lineItems: Object
  livemode: Boolean!
  metadata: Object!
  number: String
  object: String!
  onBehalfOf: Type500
  status: String!
  statusTransitions: Object!
  subscription: Type501
  subscriptionData: Object!
  subscriptionSchedule: Type502
  testClock: Type503
  totalDetails: Object!
  transferData: Type504
}

type QuotesResourceAutomaticTax {
  enabled: Boolean!
  liability: Type505
  status: String
}

type QuotesResourceComputed {
  recurring: Type506
  upfront: Object!
}

type QuotesResourceFromQuote {
  isRevision: Boolean!
  quote: Type507!
}

type QuotesResourceRecurring {
  amountSubtotal: Int!
  amountTotal: Int!
  interval: String!
  intervalCount: Int!
  totalDetails: Object!
}

type QuotesResourceStatusTransitions {
  acceptedAt: Int
  canceledAt: Int
  finalizedAt: Int
}

type QuotesResourceSubscriptionDataSubscriptionData {
  description: String
  effectiveDate: Int
  metadata: Object
  trialPeriodDays: Int
}

type QuotesResourceTotalDetails {
  amountDiscount: Int!
  amountShipping: Int
  amountTax: Int!
  breakdown: Object
}

type QuotesResourceTotalDetailsResourceBreakdown {
  discounts: Array!
  taxes: Array!
}

type QuotesResourceTransferData {
  amount: Int
  amountPercent: Number
  destination: Type508!
}

type QuotesResourceUpfront {
  amountSubtotal: Int!
  amountTotal: Int!
  lineItems: Object
  totalDetails: Object!
}

type Radar.earlyFraudWarning {
  actionable: Boolean!
  charge: Type509!
  created: Int!
  fraudType: String!
  id: String!
  livemode: Boolean!
  object: String!
  paymentIntent: Type510
}

type Radar.valueList {
  alias: String!
  created: Int!
  createdBy: String!
  id: String!
  itemType: String!
  listItems: Object!
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
}

type Radar.valueListItem {
  created: Int!
  createdBy: String!
  id: String!
  livemode: Boolean!
  object: String!
  value: String!
  valueList: String!
}

type RadarRadarOptions {
  session: String
}

type RadarReviewResourceLocation {
  city: String
  country: String
  latitude: Number
  longitude: Number
  region: String
}

type RadarReviewResourceSession {
  browser: String
  device: String
  platform: String
  version: String
}

type ReceivedPaymentMethodDetailsFinancialAccount {
  id: String!
  network: String!
}

type Recurring {
  aggregateUsage: String
  interval: String!
  intervalCount: Int!
  meter: String
  usageType: String!
}

type Refund {
  amount: Int!
  balanceTransaction: Type511
  charge: Type512
  created: Int!
  currency: String!
  description: String
  destinationDetails: Object
  failureBalanceTransaction: Type513
  failureReason: String
  id: String!
  instructionsEmail: String
  metadata: Object
  nextAction: Object
  object: String!
  paymentIntent: Type514
  reason: String
  receiptNumber: String
  sourceTransferReversal: Type515
  status: String
  transferReversal: Type516
}

type RefundDestinationDetails {
  affirm: Object
  afterpayClearpay: Object
  alipay: Object
  auBankTransfer: Object
  blik: Object
  brBankTransfer: Object
  card: Object
  cashapp: Object
  customerCashBalance: Object
  eps: Object
  euBankTransfer: Object
  gbBankTransfer: Object
  giropay: Object
  grabpay: Object
  jpBankTransfer: Object
  klarna: Object
  mxBankTransfer: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  revolut: Object
  sofort: Object
  swish: Object
  thBankTransfer: Object
  type: String!
  usBankTransfer: Object
  wechatPay: Object
  zip: Object
}

type RefundDestinationDetailsCard {
  reference: String
  referenceStatus: String
  referenceType: String
  type: String!
}

type RefundDestinationDetailsGeneric {
  reference: String
  referenceStatus: String
}

type RefundNextAction {
  displayDetails: Type517
  type: String!
}

type RefundNextActionDisplayDetails {
  emailSent: Object!
  expiresAt: Int!
}

type Reporting.reportRun {
  created: Int!
  error: String
  id: String!
  livemode: Boolean!
  object: String!
  parameters: Object!
  reportType: String!
  result: Type518
  status: String!
  succeededAt: Int
}

type Reporting.reportType {
  dataAvailableEnd: Int!
  dataAvailableStart: Int!
  defaultColumns: Array
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  updated: Int!
  version: Int!
}

type ReserveTransaction {
  amount: Int!
  currency: String!
  description: String
  id: String!
  object: String!
}

type Review {
  billingZip: String
  charge: Type519
  closedReason: String
  created: Int!
  id: String!
  ipAddress: String
  ipAddressLocation: Type520
  livemode: Boolean!
  object: String!
  open: Boolean!
  openedReason: String!
  paymentIntent: Type521
  reason: String!
  session: Type522
}

type Rule {
  action: String!
  id: String!
  predicate: String!
}

type ScheduledQueryRun {
  created: Int!
  dataLoadTime: Int!
  error: Object
  file: Type523
  id: String!
  livemode: Boolean!
  object: String!
  resultAvailableUntil: Int!
  sql: String!
  status: String!
  title: String!
}

type SchedulesPhaseAutomaticTax {
  enabled: Boolean!
  liability: Type524
}

type SecretServiceResourceScope {
  type: String!
  user: String
}

type SepaDebitGeneratedFrom {
  charge: Type525
  setupAttempt: Type526
}

type SetupAttempt {
  application: Type527
  attachToSelf: Boolean
  created: Int!
  customer: Type528
  flowDirections: Array
  id: String!
  livemode: Boolean!
  object: String!
  onBehalfOf: Type529
  paymentMethod: Type530!
  paymentMethodDetails: Object!
  setupError: Type531
  setupIntent: Type532!
  status: String!
  usage: String!
}

type SetupAttemptPaymentMethodDetails {
  acssDebit: Object
  auBecsDebit: Object
  bacsDebit: Object
  bancontact: Object
  boleto: Object
  card: Object
  cardPresent: Object
  cashapp: Object
  ideal: Object
  klarna: Object
  link: Object
  paypal: Object
  sepaDebit: Object
  sofort: Object
  type: String!
  usBankAccount: Object
}

type SetupAttemptPaymentMethodDetailsBancontact {
  bankCode: String
  bankName: String
  bic: String
  generatedSepaDebit: Type533
  generatedSepaDebitMandate: Type534
  ibanLast4: String
  preferredLanguage: String
  verifiedName: String
}

type SetupAttemptPaymentMethodDetailsCard {
  brand: String
  checks: Type535
  country: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  network: String
  threeDSecure: Type536
  wallet: Type537
}

type SetupAttemptPaymentMethodDetailsCardChecks {
  addressLine1Check: String
  addressPostalCodeCheck: String
  cvcCheck: String
}

type SetupAttemptPaymentMethodDetailsCardPresent {
  generatedCard: Type538
}

type SetupAttemptPaymentMethodDetailsCardWallet {
  applePay: Object
  googlePay: Object
  type: String!
}

type SetupAttemptPaymentMethodDetailsIdeal {
  bank: String
  bic: String
  generatedSepaDebit: Type539
  generatedSepaDebitMandate: Type540
  ibanLast4: String
  verifiedName: String
}

type SetupAttemptPaymentMethodDetailsSofort {
  bankCode: String
  bankName: String
  bic: String
  generatedSepaDebit: Type541
  generatedSepaDebitMandate: Type542
  ibanLast4: String
  preferredLanguage: String
  verifiedName: String
}

type SetupIntent {
  application: Type543
  attachToSelf: Boolean
  automaticPaymentMethods: Type544
  cancellationReason: String
  clientSecret: String
  created: Int!
  customer: Type545
  description: String
  flowDirections: Array
  id: String!
  lastSetupError: Type546
  latestAttempt: Type547
  livemode: Boolean!
  mandate: Type548
  metadata: Object
  nextAction: Type549
  object: String!
  onBehalfOf: Type550
  paymentMethod: Type551
  paymentMethodConfigurationDetails: Type552
  paymentMethodOptions: Type553
  paymentMethodTypes: Array!
  singleUseMandate: Type554
  status: String!
  usage: String!
}

type SetupIntentNextAction {
  cashappHandleRedirectOrDisplayQrCode: Object
  redirectToUrl: Object
  type: String!
  useStripeSdk: Object
  verifyWithMicrodeposits: Object
}

type SetupIntentNextActionRedirectToUrl {
  returnUrl: String
  url: String
}

type SetupIntentNextActionVerifyWithMicrodeposits {
  arrivalDate: Int!
  hostedVerificationUrl: String!
  microdepositType: String
}

type SetupIntentPaymentMethodOptions {
  acssDebit: Type555
  card: Object
  link: Type556
  paypal: Type557
  sepaDebit: Type558
  usBankAccount: Type559
}

type SetupIntentPaymentMethodOptionsAcssDebit {
  currency: String
  mandateOptions: Object
  verificationMethod: String
}

type SetupIntentPaymentMethodOptionsCard {
  mandateOptions: Type560
  network: String
  requestThreeDSecure: String
}

type SetupIntentPaymentMethodOptionsCardMandateOptions {
  amount: Int!
  amountType: String!
  currency: String!
  description: String
  endDate: Int
  interval: String!
  intervalCount: Int
  reference: String!
  startDate: Int!
  supportedTypes: Array
}

type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  customMandateUrl: String
  defaultFor: Array
  intervalDescription: String
  paymentSchedule: String
  transactionType: String
}

type SetupIntentPaymentMethodOptionsPaypal {
  billingAgreementId: String
}

type SetupIntentPaymentMethodOptionsSepaDebit {
  mandateOptions: Object
}

type SetupIntentPaymentMethodOptionsUsBankAccount {
  financialConnections: Object
  mandateOptions: Object
  verificationMethod: String
}

type SetupIntentTypeSpecificPaymentMethodOptionsClient {
  verificationMethod: String
}

type Shipping {
  address: Object
  carrier: String
  name: String
  phone: String
  trackingNumber: String
}

type ShippingRate {
  active: Boolean!
  created: Int!
  deliveryEstimate: Type561
  displayName: String
  fixedAmount: Object
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  taxBehavior: String
  taxCode: Type562
  type: String!
}

type ShippingRateCurrencyOption {
  amount: Int!
  taxBehavior: String!
}

type ShippingRateDeliveryEstimate {
  maximum: Type563
  minimum: Type564
}

type ShippingRateDeliveryEstimateBound {
  unit: String!
  value: Int!
}

type ShippingRateFixedAmount {
  amount: Int!
  currency: String!
  currencyOptions: Object
}

type SigmaScheduledQueryRunError {
  message: String!
}

type Source {
  achCreditTransfer: Object
  achDebit: Object
  acssDebit: Object
  alipay: Object
  amount: Int
  auBecsDebit: Object
  bancontact: Object
  card: Object
  cardPresent: Object
  clientSecret: String!
  codeVerification: Object
  created: Int!
  currency: String
  customer: String
  eps: Object
  flow: String!
  giropay: Object
  id: String!
  ideal: Object
  klarna: Object
  livemode: Boolean!
  metadata: Object
  multibanco: Object
  object: String!
  owner: Type565
  p24: Object
  receiver: Object
  redirect: Object
  sepaDebit: Object
  sofort: Object
  sourceOrder: Object
  statementDescriptor: String
  status: String!
  threeDSecure: Object
  type: String!
  usage: String
  wechat: Object
}

type SourceCodeVerificationFlow {
  attemptsRemaining: Int!
  status: String!
}

type SourceMandateNotification {
  acssDebit: Object
  amount: Int
  bacsDebit: Object
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  reason: String!
  sepaDebit: Object
  source: Object!
  status: String!
  type: String!
}

type SourceMandateNotificationAcssDebitData {
  statementDescriptor: String
}

type SourceMandateNotificationBacsDebitData {
  last4: String
}

type SourceMandateNotificationSepaDebitData {
  creditorIdentifier: String
  last4: String
  mandateReference: String
}

type SourceOrder {
  amount: Int!
  currency: String!
  email: String
  items: Array
  shipping: Object
}

type SourceOrderItem {
  amount: Int
  currency: String
  description: String
  parent: String
  quantity: Int
  type: String
}

type SourceOwner {
  address: Type566
  email: String
  name: String
  phone: String
  verifiedAddress: Type567
  verifiedEmail: String
  verifiedName: String
  verifiedPhone: String
}

type SourceReceiverFlow {
  address: String
  amountCharged: Int!
  amountReceived: Int!
  amountReturned: Int!
  refundAttributesMethod: String!
  refundAttributesStatus: String!
}

type SourceRedirectFlow {
  failureReason: String
  returnUrl: String!
  status: String!
  url: String!
}

type SourceTransaction {
  achCreditTransfer: Object
  amount: Int!
  chfCreditTransfer: Object
  created: Int!
  currency: String!
  gbpCreditTransfer: Object
  id: String!
  livemode: Boolean!
  object: String!
  paperCheck: Object
  sepaCreditTransfer: Object
  source: String!
  status: String!
  type: String!
}

type SourceTransactionAchCreditTransferData {
  customerData: String
  fingerprint: String
  last4: String
  routingNumber: String
}

type SourceTransactionChfCreditTransferData {
  reference: String
  senderAddressCountry: String
  senderAddressLine1: String
  senderIban: String
  senderName: String
}

type SourceTransactionGbpCreditTransferData {
  fingerprint: String
  fundingMethod: String
  last4: String
  reference: String
  senderAccountNumber: String
  senderName: String
  senderSortCode: String
}

type SourceTransactionPaperCheckData {
  availableAt: String
  invoices: String
}

type SourceTransactionSepaCreditTransferData {
  reference: String
  senderIban: String
  senderName: String
}

type SourceTypeAchCreditTransfer {
  accountNumber: String
  bankName: String
  fingerprint: String
  refundAccountHolderName: String
  refundAccountHolderType: String
  refundRoutingNumber: String
  routingNumber: String
  swiftCode: String
}

type SourceTypeAchDebit {
  bankName: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
  type: String
}

type SourceTypeAcssDebit {
  bankAddressCity: String
  bankAddressLine1: String
  bankAddressLine2: String
  bankAddressPostalCode: String
  bankName: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
}

type SourceTypeAlipay {
  dataString: String
  nativeUrl: String
  statementDescriptor: String
}

type SourceTypeAuBecsDebit {
  bsbNumber: String
  fingerprint: String
  last4: String
}

type SourceTypeBancontact {
  bankCode: String
  bankName: String
  bic: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type SourceTypeCard {
  addressLine1Check: String
  addressZipCheck: String
  brand: String
  country: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

type SourceTypeCardPresent {
  applicationCryptogram: String
  applicationPreferredName: String
  authorizationCode: String
  authorizationResponseCode: String
  brand: String
  country: String
  cvmType: String
  dataType: String
  dedicatedFileName: String
  emvAuthData: String
  evidenceCustomerSignature: String
  evidenceTransactionCertificate: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  posDeviceId: String
  posEntryMode: String
  readMethod: String
  reader: String
  terminalVerificationResults: String
  transactionStatusInformation: String
}

type SourceTypeEps {
  reference: String
  statementDescriptor: String
}

type SourceTypeGiropay {
  bankCode: String
  bankName: String
  bic: String
  statementDescriptor: String
}

type SourceTypeIdeal {
  bank: String
  bic: String
  ibanLast4: String
  statementDescriptor: String
}

type SourceTypeKlarna {
  backgroundImageUrl: String
  clientToken: String
  firstName: String
  lastName: String
  locale: String
  logoUrl: String
  pageTitle: String
  payLaterAssetUrlsDescriptive: String
  payLaterAssetUrlsStandard: String
  payLaterName: String
  payLaterRedirectUrl: String
  payNowAssetUrlsDescriptive: String
  payNowAssetUrlsStandard: String
  payNowName: String
  payNowRedirectUrl: String
  payOverTimeAssetUrlsDescriptive: String
  payOverTimeAssetUrlsStandard: String
  payOverTimeName: String
  payOverTimeRedirectUrl: String
  paymentMethodCategories: String
  purchaseCountry: String
  purchaseType: String
  redirectUrl: String
  shippingDelay: Int
  shippingFirstName: String
  shippingLastName: String
}

type SourceTypeMultibanco {
  entity: String
  reference: String
  refundAccountHolderAddressCity: String
  refundAccountHolderAddressCountry: String
  refundAccountHolderAddressLine1: String
  refundAccountHolderAddressLine2: String
  refundAccountHolderAddressPostalCode: String
  refundAccountHolderAddressState: String
  refundAccountHolderName: String
  refundIban: String
}

type SourceTypeP24 {
  reference: String
}

type SourceTypeSepaDebit {
  bankCode: String
  branchCode: String
  country: String
  fingerprint: String
  last4: String
  mandateReference: String
  mandateUrl: String
}

type SourceTypeSofort {
  bankCode: String
  bankName: String
  bic: String
  country: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type SourceTypeThreeDSecure {
  addressLine1Check: String
  addressZipCheck: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

type SourceTypeWechat {
  prepayId: String
  qrCodeUrl: String
  statementDescriptor: String
}

type Subscription {
  application: Type568
  applicationFeePercent: Number
  automaticTax: Object!
  billingCycleAnchor: Int!
  billingCycleAnchorConfig: Type569
  billingThresholds: Type570
  cancelAt: Int
  cancelAtPeriodEnd: Boolean!
  canceledAt: Int
  cancellationDetails: Type571
  collectionMethod: String!
  created: Int!
  currency: String!
  currentPeriodEnd: Int!
  currentPeriodStart: Int!
  customer: Type572!
  daysUntilDue: Int
  defaultPaymentMethod: Type573
  defaultSource: Type574
  defaultTaxRates: Array
  description: String
  discount: Type575
  endedAt: Int
  id: String!
  items: Object!
  latestInvoice: Type576
  livemode: Boolean!
  metadata: Object!
  nextPendingInvoiceItemInvoice: Int
  object: String!
  onBehalfOf: Type577
  pauseCollection: Type578
  paymentSettings: Type579
  pendingInvoiceItemInterval: Type580
  pendingSetupIntent: Type581
  pendingUpdate: Type582
  schedule: Type583
  startDate: Int!
  status: String!
  testClock: Type584
  transferData: Type585
  trialEnd: Int
  trialSettings: Type586
  trialStart: Int
}

type SubscriptionAutomaticTax {
  enabled: Boolean!
  liability: Type587
}

type SubscriptionBillingThresholds {
  amountGte: Int
  resetBillingCycleAnchor: Boolean
}

type SubscriptionDetailsData {
  metadata: Object
}

type SubscriptionItem {
  billingThresholds: Type588
  created: Int!
  id: String!
  metadata: Object!
  object: String!
  price: Object!
  quantity: Int
  subscription: String!
  taxRates: Array
}

type SubscriptionItemBillingThresholds {
  usageGte: Int
}

type SubscriptionPaymentMethodOptionsCard {
  mandateOptions: Object
  network: String
  requestThreeDSecure: String
}

type SubscriptionPendingInvoiceItemInterval {
  interval: String!
  intervalCount: Int!
}

type SubscriptionSchedule {
  application: Type589
  canceledAt: Int
  completedAt: Int
  created: Int!
  currentPhase: Type590
  customer: Type591!
  defaultSettings: Object!
  endBehavior: String!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  phases: Array!
  releasedAt: Int
  releasedSubscription: String
  status: String!
  subscription: Type592
  testClock: Type593
}

type SubscriptionScheduleAddInvoiceItem {
  price: Type594!
  quantity: Int
  taxRates: Array
}

type SubscriptionScheduleConfigurationItem {
  billingThresholds: Type595
  metadata: Object
  price: Type596!
  quantity: Int
  taxRates: Array
}

type SubscriptionScheduleCurrentPhase {
  endDate: Int!
  startDate: Int!
}

type SubscriptionSchedulePhaseConfiguration {
  addInvoiceItems: Array!
  applicationFeePercent: Number
  automaticTax: Object
  billingCycleAnchor: String
  billingThresholds: Type597
  collectionMethod: String
  coupon: Type598
  currency: String!
  defaultPaymentMethod: Type599
  defaultTaxRates: Array
  description: String
  endDate: Int!
  invoiceSettings: Type600
  items: Array!
  metadata: Object
  onBehalfOf: Type601
  prorationBehavior: String!
  startDate: Int!
  transferData: Type602
  trialEnd: Int
}

type SubscriptionSchedulesResourceDefaultSettings {
  applicationFeePercent: Number
  automaticTax: Object
  billingCycleAnchor: String!
  billingThresholds: Type603
  collectionMethod: String
  defaultPaymentMethod: Type604
  description: String
  invoiceSettings: Object!
  onBehalfOf: Type605
  transferData: Type606
}

type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  enabled: Boolean!
  liability: Type607
}

type SubscriptionTransferData {
  amountPercent: Number
  destination: Type608!
}

type SubscriptionsResourceBillingCycleAnchorConfig {
  dayOfMonth: Int!
  hour: Int
  minute: Int
  month: Int
  second: Int
}

type SubscriptionsResourcePauseCollection {
  behavior: String!
  resumesAt: Int
}

type SubscriptionsResourcePaymentMethodOptions {
  acssDebit: Type609
  bancontact: Type610
  card: Type611
  customerBalance: Type612
  konbini: Type613
  sepaDebit: Type614
  usBankAccount: Type615
}

type SubscriptionsResourcePaymentSettings {
  paymentMethodOptions: Type616
  paymentMethodTypes: Array
  saveDefaultPaymentMethod: String
}

type SubscriptionsResourcePendingUpdate {
  billingCycleAnchor: Int
  expiresAt: Int!
  subscriptionItems: Array
  trialEnd: Int
  trialFromPlan: Boolean
}

type SubscriptionsTrialsResourceEndBehavior {
  missingPaymentMethod: String!
}

type SubscriptionsTrialsResourceTrialSettings {
  endBehavior: Object!
}

type Tax.calculation {
  amountTotal: Int!
  currency: String!
  customer: String
  customerDetails: Object!
  expiresAt: Int
  id: String
  lineItems: Object
  livemode: Boolean!
  object: String!
  shippingCost: Type617
  taxAmountExclusive: Int!
  taxAmountInclusive: Int!
  taxBreakdown: Array!
  taxDate: Int!
}

type Tax.calculationLineItem {
  amount: Int!
  amountTax: Int!
  id: String!
  livemode: Boolean!
  object: String!
  product: String
  quantity: Int!
  reference: String
  taxBehavior: String!
  taxBreakdown: Array
  taxCode: String!
}

type Tax.registration {
  activeFrom: Int!
  country: String!
  countryOptions: Object!
  created: Int!
  expiresAt: Int
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
}

type Tax.settings {
  defaults: Object!
  headOffice: Type618
  livemode: Boolean!
  object: String!
  status: String!
  statusDetails: Object!
}

type Tax.transaction {
  created: Int!
  currency: String!
  customer: String
  customerDetails: Object!
  id: String!
  lineItems: Object
  livemode: Boolean!
  metadata: Object
  object: String!
  reference: String!
  reversal: Type619
  shippingCost: Type620
  taxDate: Int!
  type: String!
}

type Tax.transactionLineItem {
  amount: Int!
  amountTax: Int!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  product: String
  quantity: Int!
  reference: String!
  reversal: Type621
  taxBehavior: String!
  taxCode: String!
  type: String!
}

type TaxCode {
  description: String!
  id: String!
  name: String!
  object: String!
}

type TaxDeductedAtSource {
  id: String!
  object: String!
  periodEnd: Int!
  periodStart: Int!
  taxDeductionAccountNumber: String!
}

type TaxIDsOwner {
  account: Type622
  application: Type623
  customer: Type624
  type: String!
}

type TaxId {
  country: String
  created: Int!
  customer: Type625
  id: String!
  livemode: Boolean!
  object: String!
  owner: Type626
  type: String!
  value: String!
  verification: Type627
}

type TaxIdVerification {
  status: String!
  verifiedAddress: String
  verifiedName: String
}

type TaxProductRegistrationsResourceCountryOptions {
  ae: Object
  at: Object
  au: Object
  be: Object
  bg: Object
  ca: Object
  ch: Object
  cl: Object
  co: Object
  cy: Object
  cz: Object
  de: Object
  dk: Object
  ee: Object
  es: Object
  fi: Object
  fr: Object
  gb: Object
  gr: Object
  hr: Object
  hu: Object
  id: Object
  ie: Object
  is: Object
  it: Object
  jp: Object
  kr: Object
  lt: Object
  lu: Object
  lv: Object
  mt: Object
  mx: Object
  my: Object
  nl: Object
  no: Object
  nz: Object
  pl: Object
  pt: Object
  ro: Object
  sa: Object
  se: Object
  sg: Object
  si: Object
  sk: Object
  th: Object
  tr: Object
  us: Object
  vn: Object
  za: Object
}

type TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard {
  province: String!
}

type TaxProductRegistrationsResourceCountryOptionsCanada {
  provinceStandard: Object
  type: String!
}

type TaxProductRegistrationsResourceCountryOptionsDefault {
  type: String!
}

type TaxProductRegistrationsResourceCountryOptionsEuStandard {
  placeOfSupplyScheme: String!
}

type TaxProductRegistrationsResourceCountryOptionsEurope {
  standard: Object
  type: String!
}

type TaxProductRegistrationsResourceCountryOptionsSimplified {
  type: String!
}

type TaxProductRegistrationsResourceCountryOptionsUnitedStates {
  localAmusementTax: Object
  localLeaseTax: Object
  state: String!
  type: String!
}

type TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax {
  jurisdiction: String!
}

type TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax {
  jurisdiction: String!
}

type TaxProductResourceCustomerDetails {
  address: Type628
  addressSource: String
  ipAddress: String
  taxIds: Array!
  taxabilityOverride: String!
}

type TaxProductResourceCustomerDetailsResourceTaxId {
  type: String!
  value: String!
}

type TaxProductResourceJurisdiction {
  country: String!
  displayName: String!
  level: String!
  state: String
}

type TaxProductResourceLineItemTaxBreakdown {
  amount: Int!
  jurisdiction: Object!
  sourcing: String!
  taxRateDetails: Type629
  taxabilityReason: String!
  taxableAmount: Int!
}

type TaxProductResourceLineItemTaxRateDetails {
  displayName: String!
  percentageDecimal: String!
  taxType: String!
}

type TaxProductResourcePostalAddress {
  city: String
  country: String!
  line1: String
  line2: String
  postalCode: String
  state: String
}

type TaxProductResourceTaxBreakdown {
  amount: Int!
  inclusive: Boolean!
  taxRateDetails: Object!
  taxabilityReason: String!
  taxableAmount: Int!
}

type TaxProductResourceTaxCalculationShippingCost {
  amount: Int!
  amountTax: Int!
  shippingRate: String
  taxBehavior: String!
  taxBreakdown: Array
  taxCode: String!
}

type TaxProductResourceTaxRateDetails {
  country: String
  percentageDecimal: String!
  state: String
  taxType: String
}

type TaxProductResourceTaxSettingsDefaults {
  taxBehavior: String
  taxCode: String
}

type TaxProductResourceTaxSettingsHeadOffice {
  address: Object!
}

type TaxProductResourceTaxSettingsStatusDetails {
  active: Object
  pending: Object
}

type TaxProductResourceTaxSettingsStatusDetailsResourcePending {
  missingFields: Array
}

type TaxProductResourceTaxTransactionLineItemResourceReversal {
  originalLineItem: String!
}

type TaxProductResourceTaxTransactionResourceReversal {
  originalTransaction: String
}

type TaxProductResourceTaxTransactionShippingCost {
  amount: Int!
  amountTax: Int!
  shippingRate: String
  taxBehavior: String!
  taxCode: String!
}

type TaxRate {
  active: Boolean!
  country: String
  created: Int!
  description: String
  displayName: String!
  effectivePercentage: Number
  id: String!
  inclusive: Boolean!
  jurisdiction: String
  jurisdictionLevel: String
  livemode: Boolean!
  metadata: Object
  object: String!
  percentage: Number!
  state: String
  taxType: String
}

type Terminal.configuration {
  bbposWiseposE: Object
  id: String!
  isAccountDefault: Boolean
  livemode: Boolean!
  name: String
  object: String!
  offline: Object
  tipping: Object
  verifoneP400: Object
}

type Terminal.connectionToken {
  location: String
  object: String!
  secret: String!
}

type Terminal.location {
  address: Object!
  configurationOverrides: String
  displayName: String!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
}

type Terminal.reader {
  action: Type630
  deviceSwVersion: String
  deviceType: String!
  id: String!
  ipAddress: String
  label: String!
  livemode: Boolean!
  location: Type631
  metadata: Object!
  object: String!
  serialNumber: String!
  status: String
}

type TerminalConfigurationConfigurationResourceCurrencySpecificConfig {
  fixedAmounts: Array
  percentages: Array
  smartTipThreshold: Int
}

type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
  splashscreen: Type632
}

type TerminalConfigurationConfigurationResourceOfflineConfig {
  enabled: Boolean
}

type TerminalConfigurationConfigurationResourceTipping {
  aud: Object
  cad: Object
  chf: Object
  czk: Object
  dkk: Object
  eur: Object
  gbp: Object
  hkd: Object
  myr: Object
  nok: Object
  nzd: Object
  sek: Object
  sgd: Object
  usd: Object
}

type TerminalReaderReaderResourceCart {
  currency: String!
  lineItems: Array!
  tax: Int
  total: Int!
}

type TerminalReaderReaderResourceLineItem {
  amount: Int!
  description: String!
  quantity: Int!
}

type TerminalReaderReaderResourceProcessConfig {
  enableCustomerCancellation: Boolean
  skipTipping: Boolean
  tipping: Object
}

type TerminalReaderReaderResourceProcessPaymentIntentAction {
  paymentIntent: Type633!
  processConfig: Object
}

type TerminalReaderReaderResourceProcessSetupConfig {
  enableCustomerCancellation: Boolean
}

type TerminalReaderReaderResourceProcessSetupIntentAction {
  generatedCard: String
  processConfig: Object
  setupIntent: Type634!
}

type TerminalReaderReaderResourceReaderAction {
  failureCode: String
  failureMessage: String
  processPaymentIntent: Object
  processSetupIntent: Object
  refundPayment: Object
  setReaderDisplay: Object
  status: String!
  type: String!
}

type TerminalReaderReaderResourceRefundPaymentAction {
  amount: Int
  charge: Type635
  metadata: Object
  paymentIntent: Type636
  reason: String
  refund: Type637
  refundApplicationFee: Boolean
  refundPaymentConfig: Object
  reverseTransfer: Boolean
}

type TerminalReaderReaderResourceRefundPaymentConfig {
  enableCustomerCancellation: Boolean
}

type TerminalReaderReaderResourceSetReaderDisplayAction {
  cart: Type638
  type: String!
}

type TerminalReaderReaderResourceTippingConfig {
  amountEligible: Int
}

type TestHelpers.testClock {
  created: Int!
  deletesAfter: Int!
  frozenTime: Int!
  id: String!
  livemode: Boolean!
  name: String
  object: String!
  status: String!
}

type ThreeDSecureDetails {
  authenticationFlow: String
  electronicCommerceIndicator: String
  result: String
  resultReason: String
  transactionId: String
  version: String
}

type ThreeDSecureDetailsCharge {
  authenticationFlow: String
  electronicCommerceIndicator: String
  exemptionIndicator: String
  exemptionIndicatorApplied: Boolean
  result: String
  resultReason: String
  transactionId: String
  version: String
}

type ThreeDSecureUsage {
  supported: Boolean!
}

type Token {
  bankAccount: Object
  card: Object
  clientIp: String
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  type: String!
  used: Boolean!
}

type TokenCardNetworks {
  preferred: String
}

type Topup {
  amount: Int!
  balanceTransaction: Type639
  created: Int!
  currency: String!
  description: String
  expectedAvailabilityDate: Int
  failureCode: String
  failureMessage: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  source: Type640
  statementDescriptor: String
  status: String!
  transferGroup: String
}

type Transfer {
  amount: Int!
  amountReversed: Int!
  balanceTransaction: Type641
  created: Int!
  currency: String!
  description: String
  destination: Type642
  destinationPayment: Type643
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  reversals: Object!
  reversed: Boolean!
  sourceTransaction: Type644
  sourceType: String
  transferGroup: String
}

type TransferData {
  amount: Int
  destination: Type645!
}

type TransferReversal {
  amount: Int!
  balanceTransaction: Type646
  created: Int!
  currency: String!
  destinationPaymentRefund: Type647
  id: String!
  metadata: Object
  object: String!
  sourceRefund: Type648
  transfer: Type649!
}

type TransferSchedule {
  delayDays: Int!
  interval: String!
  monthlyAnchor: Int
  weeklyAnchor: String
}

type TransformQuantity {
  divideBy: Int!
  round: String!
}

type TransformUsage {
  divideBy: Int!
  round: String!
}

type Treasury.creditReversal {
  amount: Int!
  created: Int!
  currency: String!
  financialAccount: String!
  hostedRegulatoryReceiptUrl: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  network: String!
  object: String!
  receivedCredit: String!
  status: String!
  statusTransitions: Object!
  transaction: Type650
}

type Treasury.debitReversal {
  amount: Int!
  created: Int!
  currency: String!
  financialAccount: String
  hostedRegulatoryReceiptUrl: String
  id: String!
  linkedFlows: Type651
  livemode: Boolean!
  metadata: Object!
  network: String!
  object: String!
  receivedDebit: String!
  status: String!
  statusTransitions: Object!
  transaction: Type652
}

type Treasury.financialAccount {
  activeFeatures: Array
  balance: Object!
  country: String!
  created: Int!
  features: Object
  financialAddresses: Array!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  pendingFeatures: Array
  platformRestrictions: Type653
  restrictedFeatures: Array
  status: String!
  statusDetails: Object!
  supportedCurrencies: Array!
}

type Treasury.financialAccountFeatures {
  cardIssuing: Object
  depositInsurance: Object
  financialAddresses: Object
  inboundTransfers: Object
  intraStripeFlows: Object
  object: String!
  outboundPayments: Object
  outboundTransfers: Object
}

type Treasury.inboundTransfer {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  description: String
  failureDetails: Type654
  financialAccount: String!
  hostedRegulatoryReceiptUrl: String
  id: String!
  linkedFlows: Object!
  livemode: Boolean!
  metadata: Object!
  object: String!
  originPaymentMethod: String!
  originPaymentMethodDetails: Type655
  returned: Boolean
  statementDescriptor: String!
  status: String!
  statusTransitions: Object!
  transaction: Type656
}

type Treasury.outboundPayment {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  customer: String
  description: String
  destinationPaymentMethod: String
  destinationPaymentMethodDetails: Type657
  endUserDetails: Type658
  expectedArrivalDate: Int!
  financialAccount: String!
  hostedRegulatoryReceiptUrl: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  returnedDetails: Type659
  statementDescriptor: String!
  status: String!
  statusTransitions: Object!
  transaction: Type660!
}

type Treasury.outboundTransfer {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  description: String
  destinationPaymentMethod: String
  destinationPaymentMethodDetails: Object!
  expectedArrivalDate: Int!
  financialAccount: String!
  hostedRegulatoryReceiptUrl: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  returnedDetails: Type661
  statementDescriptor: String!
  status: String!
  statusTransitions: Object!
  transaction: Type662!
}

type Treasury.receivedCredit {
  amount: Int!
  created: Int!
  currency: String!
  description: String!
  failureCode: String
  financialAccount: String
  hostedRegulatoryReceiptUrl: String
  id: String!
  initiatingPaymentMethodDetails: Object!
  linkedFlows: Object!
  livemode: Boolean!
  network: String!
  object: String!
  reversalDetails: Type663
  status: String!
  transaction: Type664
}

type Treasury.receivedDebit {
  amount: Int!
  created: Int!
  currency: String!
  description: String!
  failureCode: String
  financialAccount: String
  hostedRegulatoryReceiptUrl: String
  id: String!
  initiatingPaymentMethodDetails: Object
  linkedFlows: Object!
  livemode: Boolean!
  network: String!
  object: String!
  reversalDetails: Type665
  status: String!
  transaction: Type666
}

type Treasury.transaction {
  amount: Int!
  balanceImpact: Object!
  created: Int!
  currency: String!
  description: String!
  entries: Object
  financialAccount: String!
  flow: String
  flowDetails: Type667
  flowType: String!
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  statusTransitions: Object!
}

type Treasury.transactionEntry {
  balanceImpact: Object!
  created: Int!
  currency: String!
  effectiveAt: Int!
  financialAccount: String!
  flow: String
  flowDetails: Type668
  flowType: String!
  id: String!
  livemode: Boolean!
  object: String!
  transaction: Type669!
  type: String!
}

type TreasuryFinancialAccountsResourceAbaRecord {
  accountHolderName: String!
  accountNumber: String
  accountNumberLast4: String!
  bankName: String!
  routingNumber: String!
}

type TreasuryFinancialAccountsResourceAbaToggleSettings {
  requested: Boolean!
  status: String!
  statusDetails: Array!
}

type TreasuryFinancialAccountsResourceAchToggleSettings {
  requested: Boolean!
  status: String!
  statusDetails: Array!
}

type TreasuryFinancialAccountsResourceBalance {
  cash: Object!
  inboundPending: Object!
  outboundPending: Object!
}

type TreasuryFinancialAccountsResourceClosedStatusDetails {
  reasons: Array!
}

type TreasuryFinancialAccountsResourceFinancialAddress {
  aba: Object
  supportedNetworks: Array
  type: String!
}

type TreasuryFinancialAccountsResourceFinancialAddressesFeatures {
  aba: Object
}

type TreasuryFinancialAccountsResourceInboundTransfers {
  ach: Object
}

type TreasuryFinancialAccountsResourceOutboundPayments {
  ach: Object
  usDomesticWire: Object
}

type TreasuryFinancialAccountsResourceOutboundTransfers {
  ach: Object
  usDomesticWire: Object
}

type TreasuryFinancialAccountsResourcePlatformRestrictions {
  inboundFlows: String
  outboundFlows: String
}

type TreasuryFinancialAccountsResourceStatusDetails {
  closed: Type670
}

type TreasuryFinancialAccountsResourceToggleSettings {
  requested: Boolean!
  status: String!
  statusDetails: Array!
}

type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
  code: String!
  resolution: String
  restriction: String
}

type TreasuryInboundTransfersResourceFailureDetails {
  code: String!
}

type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
  receivedDebit: String
}

type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
  canceledAt: Int
  failedAt: Int
  succeededAt: Int
}

type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
  ipAddress: String
  present: Boolean!
}

type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
  canceledAt: Int
  failedAt: Int
  postedAt: Int
  returnedAt: Int
}

type TreasuryOutboundPaymentsResourceReturnedStatus {
  code: String!
  transaction: Type671!
}

type TreasuryOutboundTransfersResourceReturnedDetails {
  code: String!
  transaction: Type672!
}

type TreasuryOutboundTransfersResourceStatusTransitions {
  canceledAt: Int
  failedAt: Int
  postedAt: Int
  returnedAt: Int
}

type TreasuryReceivedCreditsResourceLinkedFlows {
  creditReversal: String
  issuingAuthorization: String
  issuingTransaction: String
  sourceFlow: String
  sourceFlowDetails: Type673
  sourceFlowType: String
}

type TreasuryReceivedCreditsResourceReversalDetails {
  deadline: Int
  restrictedReason: String
}

type TreasuryReceivedCreditsResourceSourceFlowsDetails {
  creditReversal: Object
  outboundPayment: Object
  payout: Object
  type: String!
}

type TreasuryReceivedCreditsResourceStatusTransitions {
  postedAt: Int
}

type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
  issuingDispute: String
}

type TreasuryReceivedDebitsResourceLinkedFlows {
  debitReversal: String
  inboundTransfer: String
  issuingAuthorization: String
  issuingTransaction: String
  payout: String
}

type TreasuryReceivedDebitsResourceReversalDetails {
  deadline: Int
  restrictedReason: String
}

type TreasuryReceivedDebitsResourceStatusTransitions {
  completedAt: Int
}

type TreasurySharedResourceBillingDetails {
  address: Object!
  email: String
  name: String
}

type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
  balance: String
  billingDetails: Object!
  financialAccount: Object
  issuingCard: String
  type: String!
  usBankAccount: Object
}

type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
  bankName: String
  last4: String
  routingNumber: String
}

type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
  postedAt: Int
  voidAt: Int
}

type TreasuryTransactionsResourceBalanceImpact {
  cash: Int!
  inboundPending: Int!
  outboundPending: Int!
}

type TreasuryTransactionsResourceFlowDetails {
  creditReversal: Object
  debitReversal: Object
  inboundTransfer: Object
  issuingAuthorization: Object
  outboundPayment: Object
  outboundTransfer: Object
  receivedCredit: Object
  receivedDebit: Object
  type: String!
}

type UsBankAccountNetworks {
  preferred: String
  supported: Array!
}

type UsageRecord {
  id: String!
  livemode: Boolean!
  object: String!
  quantity: Int!
  subscriptionItem: String!
  timestamp: Int!
}

type UsageRecordSummary {
  id: String!
  invoice: String
  livemode: Boolean!
  object: String!
  period: Object!
  subscriptionItem: String!
  totalUsage: Int!
}

type VerificationSessionRedaction {
  status: String!
}

type WebhookEndpoint {
  apiVersion: String
  application: String
  created: Int!
  description: String
  enabledEvents: Array!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  secret: String
  status: String!
  url: String!
}
