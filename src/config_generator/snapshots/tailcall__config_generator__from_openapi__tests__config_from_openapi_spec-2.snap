---
source: src/config_generator/from_openapi.rs
expression: config_from_openapi_spec(content.as_str()).unwrap().to_sdl()
---
schema @server(graphiql: true) @upstream(baseURL: "https://api.stripe.com/") {
  query: Query
}

scalar card_mandate_payment_method_details

scalar checkout_revolut_pay_payment_method_options

scalar connect_embedded_account_features

scalar connect_embedded_base_features

scalar deleted_external_account

scalar deleted_payment_source

scalar destination_details_unimplemented

scalar external_account

scalar gelato_report_id_number_options

scalar gelato_session_id_number_options

scalar invoice_payment_method_options_konbini

scalar invoice_payment_method_options_sepa_debit

scalar mandate_cashapp

scalar mandate_link

scalar mandate_multi_use

scalar offline_acceptance

scalar payment_flows_private_payment_methods_alipay

scalar payment_intent_payment_method_options_mandate_options_sepa_debit

scalar payment_method_affirm

scalar payment_method_afterpay_clearpay

scalar payment_method_bancontact

scalar payment_method_blik

scalar payment_method_card_wallet_amex_express_checkout

scalar payment_method_card_wallet_apple_pay

scalar payment_method_card_wallet_google_pay

scalar payment_method_card_wallet_link

scalar payment_method_card_wallet_samsung_pay

scalar payment_method_customer_balance

scalar payment_method_details_affirm

scalar payment_method_details_blik

scalar payment_method_details_card_wallet_amex_express_checkout

scalar payment_method_details_card_wallet_apple_pay

scalar payment_method_details_card_wallet_google_pay

scalar payment_method_details_card_wallet_link

scalar payment_method_details_card_wallet_samsung_pay

scalar payment_method_details_customer_balance

scalar payment_method_details_revolut_pay

scalar payment_method_details_stripe_account

scalar payment_method_details_wechat

scalar payment_method_details_zip

scalar payment_method_giropay

scalar payment_method_grabpay

scalar payment_method_konbini

scalar payment_method_mobilepay

scalar payment_method_options_interac_present

scalar payment_method_options_revolut_pay

scalar payment_method_oxxo

scalar payment_method_paynow

scalar payment_method_pix

scalar payment_method_promptpay

scalar payment_method_revolut_pay

scalar payment_method_swish

scalar payment_method_wechat_pay

scalar payment_method_zip

scalar payment_source

scalar setup_attempt_payment_method_details_acss_debit

scalar setup_attempt_payment_method_details_au_becs_debit

scalar setup_attempt_payment_method_details_bacs_debit

scalar setup_attempt_payment_method_details_boleto

scalar setup_attempt_payment_method_details_cashapp

scalar setup_attempt_payment_method_details_klarna

scalar setup_attempt_payment_method_details_link

scalar setup_attempt_payment_method_details_paypal

scalar setup_attempt_payment_method_details_sepa_debit

scalar setup_attempt_payment_method_details_us_bank_account

scalar setup_intent_payment_method_options_link

scalar setup_intent_payment_method_options_mandate_options_sepa_debit

scalar tax_product_resource_tax_settings_status_details_resource_active

type Query {
  DeleteEphemeralKeysKey(key: String!): ephemeral_key @http(method: "DELETE", path: "/v1/ephemeral_keys/{{args.key}}")
  DeleteSubscriptionsSubscriptionExposedIdDiscount(subscription_exposed_id: String!): deleted_discount @http(method: "DELETE", path: "/v1/subscriptions/{{args.subscription_exposed_id}}/discount")
  GetAccount(expand: [String]): account @http(path: "/v1/account")
  GetAccounts(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/accounts")
  GetAccountsAccount(account: String!, expand: [String]): account @http(path: "/v1/accounts/{{args.account}}")
  GetAccountsAccountBankAccountsId(account: String!, expand: [String], id: String!): external_account @http(path: "/v1/accounts/{{args.account}}/bank_accounts/{{args.id}}")
  GetAccountsAccountCapabilities(account: String!, expand: [String]): Object @http(path: "/v1/accounts/{{args.account}}/capabilities")
  GetAccountsAccountCapabilitiesCapability(account: String!, capability: String!, expand: [String]): capability @http(path: "/v1/accounts/{{args.account}}/capabilities/{{args.capability}}")
  GetAccountsAccountExternalAccounts(account: String!, ending_before: String, expand: [String], limit: Int, object: String, starting_after: String): Object @http(path: "/v1/accounts/{{args.account}}/external_accounts")
  GetAccountsAccountExternalAccountsId(account: String!, expand: [String], id: String!): external_account @http(path: "/v1/accounts/{{args.account}}/external_accounts/{{args.id}}")
  GetAccountsAccountPeople(account: String!, ending_before: String, expand: [String], limit: Int, relationship: Object2, starting_after: String): Object @http(path: "/v1/accounts/{{args.account}}/people")
  GetAccountsAccountPeoplePerson(account: String!, expand: [String], person: String!): person @http(path: "/v1/accounts/{{args.account}}/people/{{args.person}}")
  GetAccountsAccountPersons(account: String!, ending_before: String, expand: [String], limit: Int, relationship: Object2, starting_after: String): Object @http(path: "/v1/accounts/{{args.account}}/persons")
  GetAccountsAccountPersonsPerson(account: String!, expand: [String], person: String!): person @http(path: "/v1/accounts/{{args.account}}/persons/{{args.person}}")
  GetApplePayDomains(domain_name: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/apple_pay/domains")
  GetApplePayDomainsDomain(domain: String!, expand: [String]): apple_pay_domain @http(path: "/v1/apple_pay/domains/{{args.domain}}")
  GetApplicationFees(charge: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/application_fees")
  GetApplicationFeesFeeRefundsId(expand: [String], fee: String!, id: String!): fee_refund @http(path: "/v1/application_fees/{{args.fee}}/refunds/{{args.id}}")
  GetApplicationFeesId(expand: [String], id: String!): application_fee @http(path: "/v1/application_fees/{{args.id}}")
  GetApplicationFeesIdRefunds(ending_before: String, expand: [String], id: String!, limit: Int, starting_after: String): Object @http(path: "/v1/application_fees/{{args.id}}/refunds")
  GetAppsSecrets(ending_before: String, expand: [String], limit: Int, scope: Object2!, starting_after: String): Object @http(path: "/v1/apps/secrets")
  GetAppsSecretsFind(expand: [String], name: String!, scope: Object2!): apps.secret @http(path: "/v1/apps/secrets/find")
  GetBalance(expand: [String]): balance @http(path: "/v1/balance")
  GetBalanceHistory(created: Object2, currency: String, ending_before: String, expand: [String], limit: Int, payout: String, source: String, starting_after: String, type: String): Object @http(path: "/v1/balance/history")
  GetBalanceHistoryId(expand: [String], id: String!): balance_transaction @http(path: "/v1/balance/history/{{args.id}}")
  GetBalanceTransactions(created: Object2, currency: String, ending_before: String, expand: [String], limit: Int, payout: String, source: String, starting_after: String, type: String): Object @http(path: "/v1/balance_transactions")
  GetBalanceTransactionsId(expand: [String], id: String!): balance_transaction @http(path: "/v1/balance_transactions/{{args.id}}")
  GetBillingMeters(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/billing/meters")
  GetBillingMetersId(expand: [String], id: String!): billing.meter @http(path: "/v1/billing/meters/{{args.id}}")
  GetBillingMetersIdEventSummaries(customer: String!, end_time: Int!, ending_before: String, expand: [String], id: String!, limit: Int, start_time: Int!, starting_after: String, value_grouping_window: String): Object @http(path: "/v1/billing/meters/{{args.id}}/event_summaries")
  GetBillingPortalConfigurations(active: Boolean, ending_before: String, expand: [String], is_default: Boolean, limit: Int, starting_after: String): Object @http(path: "/v1/billing_portal/configurations")
  GetBillingPortalConfigurationsConfiguration(configuration: String!, expand: [String]): billing_portal.configuration @http(path: "/v1/billing_portal/configurations/{{args.configuration}}")
  GetCharges(created: Object2, customer: String, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String, transfer_group: String): Object @http(path: "/v1/charges")
  GetChargesCharge(charge: String!, expand: [String]): charge @http(path: "/v1/charges/{{args.charge}}")
  GetChargesChargeDispute(charge: String!, expand: [String]): dispute @http(path: "/v1/charges/{{args.charge}}/dispute")
  GetChargesChargeRefunds(charge: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/charges/{{args.charge}}/refunds")
  GetChargesChargeRefundsRefund(charge: String!, expand: [String], refund: String!): refund @http(path: "/v1/charges/{{args.charge}}/refunds/{{args.refund}}")
  GetChargesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/charges/search")
  GetCheckoutSessions(created: Object2, customer: String, customer_details: Object2, ending_before: String, expand: [String], limit: Int, payment_intent: String, payment_link: String, starting_after: String, status: String, subscription: String): Object @http(path: "/v1/checkout/sessions")
  GetCheckoutSessionsSession(expand: [String], session: String!): checkout.session @http(path: "/v1/checkout/sessions/{{args.session}}")
  GetCheckoutSessionsSessionLineItems(ending_before: String, expand: [String], limit: Int, session: String!, starting_after: String): Object @http(path: "/v1/checkout/sessions/{{args.session}}/line_items")
  GetClimateOrders(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/climate/orders")
  GetClimateOrdersOrder(expand: [String], order: String!): climate.order @http(path: "/v1/climate/orders/{{args.order}}")
  GetClimateProducts(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/climate/products")
  GetClimateProductsProduct(expand: [String], product: String!): climate.product @http(path: "/v1/climate/products/{{args.product}}")
  GetClimateSuppliers(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/climate/suppliers")
  GetClimateSuppliersSupplier(expand: [String], supplier: String!): climate.supplier @http(path: "/v1/climate/suppliers/{{args.supplier}}")
  GetConfirmationTokensConfirmationToken(confirmation_token: String!, expand: [String]): confirmation_token @http(path: "/v1/confirmation_tokens/{{args.confirmation_token}}")
  GetCountrySpecs(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/country_specs")
  GetCountrySpecsCountry(country: String!, expand: [String]): country_spec @http(path: "/v1/country_specs/{{args.country}}")
  GetCoupons(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/coupons")
  GetCouponsCoupon(coupon: String!, expand: [String]): coupon @http(path: "/v1/coupons/{{args.coupon}}")
  GetCreditNotes(created: Object2, customer: String, ending_before: String, expand: [String], invoice: String, limit: Int, starting_after: String): Object @http(path: "/v1/credit_notes")
  GetCreditNotesCreditNoteLines(credit_note: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/credit_notes/{{args.credit_note}}/lines")
  GetCreditNotesId(expand: [String], id: String!): credit_note @http(path: "/v1/credit_notes/{{args.id}}")
  GetCreditNotesPreview(amount: Int, credit_amount: Int, effective_at: Int, expand: [String], invoice: String!, lines: [Object], memo: String, metadata: Object2, out_of_band_amount: Int, reason: String, refund: String, refund_amount: Int, shipping_cost: Object2): credit_note @http(path: "/v1/credit_notes/preview")
  GetCreditNotesPreviewLines(amount: Int, credit_amount: Int, effective_at: Int, ending_before: String, expand: [String], invoice: String!, limit: Int, lines: [Object], memo: String, metadata: Object2, out_of_band_amount: Int, reason: String, refund: String, refund_amount: Int, shipping_cost: Object2, starting_after: String): Object @http(path: "/v1/credit_notes/preview/lines")
  GetCustomers(created: Object2, email: String, ending_before: String, expand: [String], limit: Int, starting_after: String, test_clock: String): Object @http(path: "/v1/customers")
  GetCustomersCustomer(customer: String!, expand: [String]): Object @http(path: "/v1/customers/{{args.customer}}")
  GetCustomersCustomerBalanceTransactions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/balance_transactions")
  GetCustomersCustomerBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): customer_balance_transaction @http(path: "/v1/customers/{{args.customer}}/balance_transactions/{{args.transaction}}")
  GetCustomersCustomerBankAccounts(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/bank_accounts")
  GetCustomersCustomerBankAccountsId(customer: String!, expand: [String], id: String!): bank_account @http(path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}")
  GetCustomersCustomerCards(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/cards")
  GetCustomersCustomerCardsId(customer: String!, expand: [String], id: String!): card @http(path: "/v1/customers/{{args.customer}}/cards/{{args.id}}")
  GetCustomersCustomerCashBalance(customer: String!, expand: [String]): cash_balance @http(path: "/v1/customers/{{args.customer}}/cash_balance")
  GetCustomersCustomerCashBalanceTransactions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions")
  GetCustomersCustomerCashBalanceTransactionsTransaction(customer: String!, expand: [String], transaction: String!): customer_cash_balance_transaction @http(path: "/v1/customers/{{args.customer}}/cash_balance_transactions/{{args.transaction}}")
  GetCustomersCustomerDiscount(customer: String!, expand: [String]): discount @http(path: "/v1/customers/{{args.customer}}/discount")
  GetCustomersCustomerPaymentMethods(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Object @http(path: "/v1/customers/{{args.customer}}/payment_methods")
  GetCustomersCustomerPaymentMethodsPaymentMethod(customer: String!, expand: [String], payment_method: String!): payment_method @http(path: "/v1/customers/{{args.customer}}/payment_methods/{{args.payment_method}}")
  GetCustomersCustomerSources(customer: String!, ending_before: String, expand: [String], limit: Int, object: String, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/sources")
  GetCustomersCustomerSourcesId(customer: String!, expand: [String], id: String!): payment_source @http(path: "/v1/customers/{{args.customer}}/sources/{{args.id}}")
  GetCustomersCustomerSubscriptions(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/subscriptions")
  GetCustomersCustomerSubscriptionsSubscriptionExposedId(customer: String!, expand: [String], subscription_exposed_id: String!): subscription @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}")
  GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(customer: String!, expand: [String], subscription_exposed_id: String!): discount @http(path: "/v1/customers/{{args.customer}}/subscriptions/{{args.subscription_exposed_id}}/discount")
  GetCustomersCustomerTaxIds(customer: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/customers/{{args.customer}}/tax_ids")
  GetCustomersCustomerTaxIdsId(customer: String!, expand: [String], id: String!): tax_id @http(path: "/v1/customers/{{args.customer}}/tax_ids/{{args.id}}")
  GetCustomersSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/customers/search")
  GetDisputes(charge: String, created: Object2, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Object @http(path: "/v1/disputes")
  GetDisputesDispute(dispute: String!, expand: [String]): dispute @http(path: "/v1/disputes/{{args.dispute}}")
  GetEvents(created: Object2, delivery_success: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String, types: [String]): Object @http(path: "/v1/events")
  GetEventsId(expand: [String], id: String!): event @http(path: "/v1/events/{{args.id}}")
  GetExchangeRates(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/exchange_rates")
  GetExchangeRatesRateId(expand: [String], rate_id: String!): exchange_rate @http(path: "/v1/exchange_rates/{{args.rate_id}}")
  GetFileLinks(created: Object2, ending_before: String, expand: [String], expired: Boolean, file: String, limit: Int, starting_after: String): Object @http(path: "/v1/file_links")
  GetFileLinksLink(expand: [String], link: String!): file_link @http(path: "/v1/file_links/{{args.link}}")
  GetFiles(created: Object2, ending_before: String, expand: [String], limit: Int, purpose: String, starting_after: String): Object @http(path: "/v1/files")
  GetFilesFile(expand: [String], file: String!): file @http(path: "/v1/files/{{args.file}}")
  GetFinancialConnectionsAccounts(account_holder: Object2, ending_before: String, expand: [String], limit: Int, session: String, starting_after: String): Object @http(path: "/v1/financial_connections/accounts")
  GetFinancialConnectionsAccountsAccount(account: String!, expand: [String]): financial_connections.account @http(path: "/v1/financial_connections/accounts/{{args.account}}")
  GetFinancialConnectionsAccountsAccountOwners(account: String!, ending_before: String, expand: [String], limit: Int, ownership: String!, starting_after: String): Object @http(path: "/v1/financial_connections/accounts/{{args.account}}/owners")
  GetFinancialConnectionsSessionsSession(expand: [String], session: String!): financial_connections.session @http(path: "/v1/financial_connections/sessions/{{args.session}}")
  GetFinancialConnectionsTransactions(account: String!, ending_before: String, expand: [String], limit: Int, starting_after: String, transacted_at: Object2, transaction_refresh: Object2): Object @http(path: "/v1/financial_connections/transactions")
  GetFinancialConnectionsTransactionsTransaction(expand: [String], transaction: String!): financial_connections.transaction @http(path: "/v1/financial_connections/transactions/{{args.transaction}}")
  GetForwardingRequests(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/forwarding/requests")
  GetForwardingRequestsId(expand: [String], id: String!): forwarding.request @http(path: "/v1/forwarding/requests/{{args.id}}")
  GetIdentityVerificationReports(client_reference_id: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String, verification_session: String): Object @http(path: "/v1/identity/verification_reports")
  GetIdentityVerificationReportsReport(expand: [String], report: String!): identity.verification_report @http(path: "/v1/identity/verification_reports/{{args.report}}")
  GetIdentityVerificationSessions(client_reference_id: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/identity/verification_sessions")
  GetIdentityVerificationSessionsSession(expand: [String], session: String!): identity.verification_session @http(path: "/v1/identity/verification_sessions/{{args.session}}")
  GetInvoiceitems(created: Object2, customer: String, ending_before: String, expand: [String], invoice: String, limit: Int, pending: Boolean, starting_after: String): Object @http(path: "/v1/invoiceitems")
  GetInvoiceitemsInvoiceitem(expand: [String], invoiceitem: String!): invoiceitem @http(path: "/v1/invoiceitems/{{args.invoiceitem}}")
  GetInvoices(collection_method: String, created: Object2, customer: String, due_date: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, subscription: String): Object @http(path: "/v1/invoices")
  GetInvoicesInvoice(expand: [String], invoice: String!): invoice @http(path: "/v1/invoices/{{args.invoice}}")
  GetInvoicesInvoiceLines(ending_before: String, expand: [String], invoice: String!, limit: Int, starting_after: String): Object @http(path: "/v1/invoices/{{args.invoice}}/lines")
  GetInvoicesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/invoices/search")
  GetInvoicesUpcoming(automatic_tax: Object2, coupon: String, currency: String, customer: String, customer_details: Object2, discounts: Object2, expand: [String], invoice_items: [Object], issuer: Object2, on_behalf_of: Object2, schedule: String, subscription: String, subscription_billing_cycle_anchor: Object2, subscription_cancel_at: Object2, subscription_cancel_at_period_end: Boolean, subscription_cancel_now: Boolean, subscription_default_tax_rates: Object2, subscription_items: [Object], subscription_proration_behavior: String, subscription_proration_date: Int, subscription_resume_at: String, subscription_start_date: Int, subscription_trial_end: Object2, subscription_trial_from_plan: Boolean): invoice @http(path: "/v1/invoices/upcoming")
  GetInvoicesUpcomingLines(automatic_tax: Object2, coupon: String, currency: String, customer: String, customer_details: Object2, discounts: Object2, ending_before: String, expand: [String], invoice_items: [Object], issuer: Object2, limit: Int, on_behalf_of: Object2, schedule: String, starting_after: String, subscription: String, subscription_billing_cycle_anchor: Object2, subscription_cancel_at: Object2, subscription_cancel_at_period_end: Boolean, subscription_cancel_now: Boolean, subscription_default_tax_rates: Object2, subscription_items: [Object], subscription_proration_behavior: String, subscription_proration_date: Int, subscription_resume_at: String, subscription_start_date: Int, subscription_trial_end: Object2, subscription_trial_from_plan: Boolean): Object @http(path: "/v1/invoices/upcoming/lines")
  GetIssuingAuthorizations(card: String, cardholder: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/issuing/authorizations")
  GetIssuingAuthorizationsAuthorization(authorization: String!, expand: [String]): issuing.authorization @http(path: "/v1/issuing/authorizations/{{args.authorization}}")
  GetIssuingCardholders(created: Object2, email: String, ending_before: String, expand: [String], limit: Int, phone_number: String, starting_after: String, status: String, type: String): Object @http(path: "/v1/issuing/cardholders")
  GetIssuingCardholdersCardholder(cardholder: String!, expand: [String]): issuing.cardholder @http(path: "/v1/issuing/cardholders/{{args.cardholder}}")
  GetIssuingCards(cardholder: String, created: Object2, ending_before: String, exp_month: Int, exp_year: Int, expand: [String], last4: String, limit: Int, personalization_design: String, starting_after: String, status: String, type: String): Object @http(path: "/v1/issuing/cards")
  GetIssuingCardsCard(card: String!, expand: [String]): issuing.card @http(path: "/v1/issuing/cards/{{args.card}}")
  GetIssuingDisputes(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, transaction: String): Object @http(path: "/v1/issuing/disputes")
  GetIssuingDisputesDispute(dispute: String!, expand: [String]): issuing.dispute @http(path: "/v1/issuing/disputes/{{args.dispute}}")
  GetIssuingPersonalizationDesigns(ending_before: String, expand: [String], limit: Int, lookup_keys: [String], preferences: Object2, starting_after: String, status: String): Object @http(path: "/v1/issuing/personalization_designs")
  GetIssuingPersonalizationDesignsPersonalizationDesign(expand: [String], personalization_design: String!): issuing.personalization_design @http(path: "/v1/issuing/personalization_designs/{{args.personalization_design}}")
  GetIssuingPhysicalBundles(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, type: String): Object @http(path: "/v1/issuing/physical_bundles")
  GetIssuingPhysicalBundlesPhysicalBundle(expand: [String], physical_bundle: String!): issuing.physical_bundle @http(path: "/v1/issuing/physical_bundles/{{args.physical_bundle}}")
  GetIssuingSettlements(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/issuing/settlements")
  GetIssuingSettlementsSettlement(expand: [String], settlement: String!): issuing.settlement @http(path: "/v1/issuing/settlements/{{args.settlement}}")
  GetIssuingTokens(card: String!, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/issuing/tokens")
  GetIssuingTokensToken(expand: [String], token: String!): issuing.token @http(path: "/v1/issuing/tokens/{{args.token}}")
  GetIssuingTransactions(card: String, cardholder: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Object @http(path: "/v1/issuing/transactions")
  GetIssuingTransactionsTransaction(expand: [String], transaction: String!): issuing.transaction @http(path: "/v1/issuing/transactions/{{args.transaction}}")
  GetLinkAccountSessionsSession(expand: [String], session: String!): financial_connections.session @http(path: "/v1/link_account_sessions/{{args.session}}")
  GetLinkedAccounts(account_holder: Object2, ending_before: String, expand: [String], limit: Int, session: String, starting_after: String): Object @http(path: "/v1/linked_accounts")
  GetLinkedAccountsAccount(account: String!, expand: [String]): financial_connections.account @http(path: "/v1/linked_accounts/{{args.account}}")
  GetLinkedAccountsAccountOwners(account: String!, ending_before: String, expand: [String], limit: Int, ownership: String!, starting_after: String): Object @http(path: "/v1/linked_accounts/{{args.account}}/owners")
  GetMandatesMandate(expand: [String], mandate: String!): mandate @http(path: "/v1/mandates/{{args.mandate}}")
  GetPaymentIntents(created: Object2, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/payment_intents")
  GetPaymentIntentsIntent(client_secret: String, expand: [String], intent: String!): payment_intent @http(path: "/v1/payment_intents/{{args.intent}}")
  GetPaymentIntentsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/payment_intents/search")
  GetPaymentLinks(active: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/payment_links")
  GetPaymentLinksPaymentLink(expand: [String], payment_link: String!): payment_link @http(path: "/v1/payment_links/{{args.payment_link}}")
  GetPaymentLinksPaymentLinkLineItems(ending_before: String, expand: [String], limit: Int, payment_link: String!, starting_after: String): Object @http(path: "/v1/payment_links/{{args.payment_link}}/line_items")
  GetPaymentMethodConfigurations(application: Object2, expand: [String]): Object @http(path: "/v1/payment_method_configurations")
  GetPaymentMethodConfigurationsConfiguration(configuration: String!, expand: [String]): payment_method_configuration @http(path: "/v1/payment_method_configurations/{{args.configuration}}")
  GetPaymentMethodDomains(domain_name: String, enabled: Boolean, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/payment_method_domains")
  GetPaymentMethodDomainsPaymentMethodDomain(expand: [String], payment_method_domain: String!): payment_method_domain @http(path: "/v1/payment_method_domains/{{args.payment_method_domain}}")
  GetPaymentMethods(customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String, type: String): Object @http(path: "/v1/payment_methods")
  GetPaymentMethodsPaymentMethod(expand: [String], payment_method: String!): payment_method @http(path: "/v1/payment_methods/{{args.payment_method}}")
  GetPayouts(arrival_date: Object2, created: Object2, destination: String, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/payouts")
  GetPayoutsPayout(expand: [String], payout: String!): payout @http(path: "/v1/payouts/{{args.payout}}")
  GetPlans(active: Boolean, created: Object2, ending_before: String, expand: [String], limit: Int, product: String, starting_after: String): Object @http(path: "/v1/plans")
  GetPlansPlan(expand: [String], plan: String!): plan @http(path: "/v1/plans/{{args.plan}}")
  GetPrices(active: Boolean, created: Object2, currency: String, ending_before: String, expand: [String], limit: Int, lookup_keys: [String], product: String, recurring: Object2, starting_after: String, type: String): Object @http(path: "/v1/prices")
  GetPricesPrice(expand: [String], price: String!): price @http(path: "/v1/prices/{{args.price}}")
  GetPricesSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/prices/search")
  GetProducts(active: Boolean, created: Object2, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Object @http(path: "/v1/products")
  GetProductsId(expand: [String], id: String!): product @http(path: "/v1/products/{{args.id}}")
  GetProductsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/products/search")
  GetPromotionCodes(active: Boolean, code: String, coupon: String, created: Object2, customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/promotion_codes")
  GetPromotionCodesPromotionCode(expand: [String], promotion_code: String!): promotion_code @http(path: "/v1/promotion_codes/{{args.promotion_code}}")
  GetQuotes(customer: String, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String, test_clock: String): Object @http(path: "/v1/quotes")
  GetQuotesQuote(expand: [String], quote: String!): quote @http(path: "/v1/quotes/{{args.quote}}")
  GetQuotesQuoteComputedUpfrontLineItems(ending_before: String, expand: [String], limit: Int, quote: String!, starting_after: String): Object @http(path: "/v1/quotes/{{args.quote}}/computed_upfront_line_items")
  GetQuotesQuoteLineItems(ending_before: String, expand: [String], limit: Int, quote: String!, starting_after: String): Object @http(path: "/v1/quotes/{{args.quote}}/line_items")
  GetQuotesQuotePdf(expand: [String], quote: String!): String @http(path: "/v1/quotes/{{args.quote}}/pdf")
  GetRadarEarlyFraudWarnings(charge: String, created: Object2, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Object @http(path: "/v1/radar/early_fraud_warnings")
  GetRadarEarlyFraudWarningsEarlyFraudWarning(early_fraud_warning: String!, expand: [String]): radar.early_fraud_warning @http(path: "/v1/radar/early_fraud_warnings/{{args.early_fraud_warning}}")
  GetRadarValueListItems(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, value: String, value_list: String!): Object @http(path: "/v1/radar/value_list_items")
  GetRadarValueListItemsItem(expand: [String], item: String!): radar.value_list_item @http(path: "/v1/radar/value_list_items/{{args.item}}")
  GetRadarValueLists(alias: String, contains: String, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/radar/value_lists")
  GetRadarValueListsValueList(expand: [String], value_list: String!): radar.value_list @http(path: "/v1/radar/value_lists/{{args.value_list}}")
  GetRefunds(charge: String, created: Object2, ending_before: String, expand: [String], limit: Int, payment_intent: String, starting_after: String): Object @http(path: "/v1/refunds")
  GetRefundsRefund(expand: [String], refund: String!): refund @http(path: "/v1/refunds/{{args.refund}}")
  GetReportingReportRuns(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/reporting/report_runs")
  GetReportingReportRunsReportRun(expand: [String], report_run: String!): reporting.report_run @http(path: "/v1/reporting/report_runs/{{args.report_run}}")
  GetReportingReportTypes(expand: [String]): Object @http(path: "/v1/reporting/report_types")
  GetReportingReportTypesReportType(expand: [String], report_type: String!): reporting.report_type @http(path: "/v1/reporting/report_types/{{args.report_type}}")
  GetReviews(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/reviews")
  GetReviewsReview(expand: [String], review: String!): review @http(path: "/v1/reviews/{{args.review}}")
  GetSetupAttempts(created: Object2, ending_before: String, expand: [String], limit: Int, setup_intent: String!, starting_after: String): Object @http(path: "/v1/setup_attempts")
  GetSetupIntents(attach_to_self: Boolean, created: Object2, customer: String, ending_before: String, expand: [String], limit: Int, payment_method: String, starting_after: String): Object @http(path: "/v1/setup_intents")
  GetSetupIntentsIntent(client_secret: String, expand: [String], intent: String!): setup_intent @http(path: "/v1/setup_intents/{{args.intent}}")
  GetShippingRates(active: Boolean, created: Object2, currency: String, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/shipping_rates")
  GetShippingRatesShippingRateToken(expand: [String], shipping_rate_token: String!): shipping_rate @http(path: "/v1/shipping_rates/{{args.shipping_rate_token}}")
  GetSigmaScheduledQueryRuns(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/sigma/scheduled_query_runs")
  GetSigmaScheduledQueryRunsScheduledQueryRun(expand: [String], scheduled_query_run: String!): scheduled_query_run @http(path: "/v1/sigma/scheduled_query_runs/{{args.scheduled_query_run}}")
  GetSourcesSource(client_secret: String, expand: [String], source: String!): source @http(path: "/v1/sources/{{args.source}}")
  GetSourcesSourceMandateNotificationsMandateNotification(expand: [String], mandate_notification: String!, source: String!): source_mandate_notification @http(path: "/v1/sources/{{args.source}}/mandate_notifications/{{args.mandate_notification}}")
  GetSourcesSourceSourceTransactions(ending_before: String, expand: [String], limit: Int, source: String!, starting_after: String): Object @http(path: "/v1/sources/{{args.source}}/source_transactions")
  GetSourcesSourceSourceTransactionsSourceTransaction(expand: [String], source: String!, source_transaction: String!): source_transaction @http(path: "/v1/sources/{{args.source}}/source_transactions/{{args.source_transaction}}")
  GetSubscriptionItems(ending_before: String, expand: [String], limit: Int, starting_after: String, subscription: String!): Object @http(path: "/v1/subscription_items")
  GetSubscriptionItemsItem(expand: [String], item: String!): subscription_item @http(path: "/v1/subscription_items/{{args.item}}")
  GetSubscriptionItemsSubscriptionItemUsageRecordSummaries(ending_before: String, expand: [String], limit: Int, starting_after: String, subscription_item: String!): Object @http(path: "/v1/subscription_items/{{args.subscription_item}}/usage_record_summaries")
  GetSubscriptionSchedules(canceled_at: Object2, completed_at: Object2, created: Object2, customer: String, ending_before: String, expand: [String], limit: Int, released_at: Object2, scheduled: Boolean, starting_after: String): Object @http(path: "/v1/subscription_schedules")
  GetSubscriptionSchedulesSchedule(expand: [String], schedule: String!): subscription_schedule @http(path: "/v1/subscription_schedules/{{args.schedule}}")
  GetSubscriptions(automatic_tax: Object2, collection_method: String, created: Object2, current_period_end: Object2, current_period_start: Object2, customer: String, ending_before: String, expand: [String], limit: Int, price: String, starting_after: String, status: String, test_clock: String): Object @http(path: "/v1/subscriptions")
  GetSubscriptionsSearch(expand: [String], limit: Int, page: String, query: String!): Object @http(path: "/v1/subscriptions/search")
  GetSubscriptionsSubscriptionExposedId(expand: [String], subscription_exposed_id: String!): subscription @http(path: "/v1/subscriptions/{{args.subscription_exposed_id}}")
  GetTaxCalculationsCalculationLineItems(calculation: String!, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/tax/calculations/{{args.calculation}}/line_items")
  GetTaxCodes(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/tax_codes")
  GetTaxCodesId(expand: [String], id: String!): tax_code @http(path: "/v1/tax_codes/{{args.id}}")
  GetTaxIds(ending_before: String, expand: [String], limit: Int, owner: Object2, starting_after: String): Object @http(path: "/v1/tax_ids")
  GetTaxIdsId(expand: [String], id: String!): tax_id @http(path: "/v1/tax_ids/{{args.id}}")
  GetTaxRates(active: Boolean, created: Object2, ending_before: String, expand: [String], inclusive: Boolean, limit: Int, starting_after: String): Object @http(path: "/v1/tax_rates")
  GetTaxRatesTaxRate(expand: [String], tax_rate: String!): tax_rate @http(path: "/v1/tax_rates/{{args.tax_rate}}")
  GetTaxRegistrations(ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/tax/registrations")
  GetTaxRegistrationsId(expand: [String], id: String!): tax.registration @http(path: "/v1/tax/registrations/{{args.id}}")
  GetTaxSettings(expand: [String]): tax.settings @http(path: "/v1/tax/settings")
  GetTaxTransactionsTransaction(expand: [String], transaction: String!): tax.transaction @http(path: "/v1/tax/transactions/{{args.transaction}}")
  GetTaxTransactionsTransactionLineItems(ending_before: String, expand: [String], limit: Int, starting_after: String, transaction: String!): Object @http(path: "/v1/tax/transactions/{{args.transaction}}/line_items")
  GetTerminalConfigurations(ending_before: String, expand: [String], is_account_default: Boolean, limit: Int, starting_after: String): Object @http(path: "/v1/terminal/configurations")
  GetTerminalConfigurationsConfiguration(configuration: String!, expand: [String]): Object @http(path: "/v1/terminal/configurations/{{args.configuration}}")
  GetTerminalLocations(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/terminal/locations")
  GetTerminalLocationsLocation(expand: [String], location: String!): Object @http(path: "/v1/terminal/locations/{{args.location}}")
  GetTerminalReaders(device_type: String, ending_before: String, expand: [String], limit: Int, location: String, serial_number: String, starting_after: String, status: String): Object @http(path: "/v1/terminal/readers")
  GetTerminalReadersReader(expand: [String], reader: String!): Object @http(path: "/v1/terminal/readers/{{args.reader}}")
  GetTestHelpersTestClocks(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/test_helpers/test_clocks")
  GetTestHelpersTestClocksTestClock(expand: [String], test_clock: String!): test_helpers.test_clock @http(path: "/v1/test_helpers/test_clocks/{{args.test_clock}}")
  GetTokensToken(expand: [String], token: String!): token @http(path: "/v1/tokens/{{args.token}}")
  GetTopups(amount: Object2, created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String, status: String): Object @http(path: "/v1/topups")
  GetTopupsTopup(expand: [String], topup: String!): topup @http(path: "/v1/topups/{{args.topup}}")
  GetTransfers(created: Object2, destination: String, ending_before: String, expand: [String], limit: Int, starting_after: String, transfer_group: String): Object @http(path: "/v1/transfers")
  GetTransfersIdReversals(ending_before: String, expand: [String], id: String!, limit: Int, starting_after: String): Object @http(path: "/v1/transfers/{{args.id}}/reversals")
  GetTransfersTransfer(expand: [String], transfer: String!): transfer @http(path: "/v1/transfers/{{args.transfer}}")
  GetTransfersTransferReversalsId(expand: [String], id: String!, transfer: String!): transfer_reversal @http(path: "/v1/transfers/{{args.transfer}}/reversals/{{args.id}}")
  GetTreasuryCreditReversals(ending_before: String, expand: [String], financial_account: String!, limit: Int, received_credit: String, starting_after: String, status: String): Object @http(path: "/v1/treasury/credit_reversals")
  GetTreasuryCreditReversalsCreditReversal(credit_reversal: String!, expand: [String]): treasury.credit_reversal @http(path: "/v1/treasury/credit_reversals/{{args.credit_reversal}}")
  GetTreasuryDebitReversals(ending_before: String, expand: [String], financial_account: String!, limit: Int, received_debit: String, resolution: String, starting_after: String, status: String): Object @http(path: "/v1/treasury/debit_reversals")
  GetTreasuryDebitReversalsDebitReversal(debit_reversal: String!, expand: [String]): treasury.debit_reversal @http(path: "/v1/treasury/debit_reversals/{{args.debit_reversal}}")
  GetTreasuryFinancialAccounts(created: Object2, ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/treasury/financial_accounts")
  GetTreasuryFinancialAccountsFinancialAccount(expand: [String], financial_account: String!): treasury.financial_account @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}")
  GetTreasuryFinancialAccountsFinancialAccountFeatures(expand: [String], financial_account: String!): treasury.financial_account_features @http(path: "/v1/treasury/financial_accounts/{{args.financial_account}}/features")
  GetTreasuryInboundTransfers(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Object @http(path: "/v1/treasury/inbound_transfers")
  GetTreasuryInboundTransfersId(expand: [String], id: String!): treasury.inbound_transfer @http(path: "/v1/treasury/inbound_transfers/{{args.id}}")
  GetTreasuryOutboundPayments(created: Object2, customer: String, ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Object @http(path: "/v1/treasury/outbound_payments")
  GetTreasuryOutboundPaymentsId(expand: [String], id: String!): treasury.outbound_payment @http(path: "/v1/treasury/outbound_payments/{{args.id}}")
  GetTreasuryOutboundTransfers(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Object @http(path: "/v1/treasury/outbound_transfers")
  GetTreasuryOutboundTransfersOutboundTransfer(expand: [String], outbound_transfer: String!): treasury.outbound_transfer @http(path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}")
  GetTreasuryReceivedCredits(ending_before: String, expand: [String], financial_account: String!, limit: Int, linked_flows: Object2, starting_after: String, status: String): Object @http(path: "/v1/treasury/received_credits")
  GetTreasuryReceivedCreditsId(expand: [String], id: String!): treasury.received_credit @http(path: "/v1/treasury/received_credits/{{args.id}}")
  GetTreasuryReceivedDebits(ending_before: String, expand: [String], financial_account: String!, limit: Int, starting_after: String, status: String): Object @http(path: "/v1/treasury/received_debits")
  GetTreasuryReceivedDebitsId(expand: [String], id: String!): treasury.received_debit @http(path: "/v1/treasury/received_debits/{{args.id}}")
  GetTreasuryTransactionEntries(created: Object2, effective_at: Object2, ending_before: String, expand: [String], financial_account: String!, limit: Int, order_by: String, starting_after: String, transaction: String): Object @http(path: "/v1/treasury/transaction_entries")
  GetTreasuryTransactionEntriesId(expand: [String], id: String!): treasury.transaction_entry @http(path: "/v1/treasury/transaction_entries/{{args.id}}")
  GetTreasuryTransactions(created: Object2, ending_before: String, expand: [String], financial_account: String!, limit: Int, order_by: String, starting_after: String, status: String, status_transitions: Object2): Object @http(path: "/v1/treasury/transactions")
  GetTreasuryTransactionsId(expand: [String], id: String!): treasury.transaction @http(path: "/v1/treasury/transactions/{{args.id}}")
  GetWebhookEndpoints(ending_before: String, expand: [String], limit: Int, starting_after: String): Object @http(path: "/v1/webhook_endpoints")
  GetWebhookEndpointsWebhookEndpoint(expand: [String], webhook_endpoint: String!): webhook_endpoint @http(path: "/v1/webhook_endpoints/{{args.webhook_endpoint}}")
  PostAccountLinks: account_link @http(method: "POST", path: "/v1/account_links")
  PostAccountSessions: account_session @http(method: "POST", path: "/v1/account_sessions")
  PostAccountsAccountBankAccounts(account: String!): external_account @http(method: "POST", path: "/v1/accounts/{{args.account}}/bank_accounts")
  PostAccountsAccountLoginLinks(account: String!): login_link @http(method: "POST", path: "/v1/accounts/{{args.account}}/login_links")
  PostAccountsAccountReject(account: String!): account @http(method: "POST", path: "/v1/accounts/{{args.account}}/reject")
  PostApplicationFeesIdRefund(id: String!): application_fee @http(method: "POST", path: "/v1/application_fees/{{args.id}}/refund")
  PostAppsSecretsDelete: apps.secret @http(method: "POST", path: "/v1/apps/secrets/delete")
  PostBillingMeterEventAdjustments: billing.meter_event_adjustment @http(method: "POST", path: "/v1/billing/meter_event_adjustments")
  PostBillingMeterEvents: billing.meter_event @http(method: "POST", path: "/v1/billing/meter_events")
  PostBillingMetersIdDeactivate(id: String!): billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/deactivate")
  PostBillingMetersIdReactivate(id: String!): billing.meter @http(method: "POST", path: "/v1/billing/meters/{{args.id}}/reactivate")
  PostBillingPortalSessions: billing_portal.session @http(method: "POST", path: "/v1/billing_portal/sessions")
  PostChargesChargeCapture(charge: String!): charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/capture")
  PostChargesChargeDisputeClose(charge: String!): dispute @http(method: "POST", path: "/v1/charges/{{args.charge}}/dispute/close")
  PostChargesChargeRefund(charge: String!): charge @http(method: "POST", path: "/v1/charges/{{args.charge}}/refund")
  PostCheckoutSessionsSessionExpire(session: String!): checkout.session @http(method: "POST", path: "/v1/checkout/sessions/{{args.session}}/expire")
  PostClimateOrdersOrderCancel(order: String!): climate.order @http(method: "POST", path: "/v1/climate/orders/{{args.order}}/cancel")
  PostCreditNotesIdVoid(id: String!): credit_note @http(method: "POST", path: "/v1/credit_notes/{{args.id}}/void")
  PostCustomerSessions: customer_session @http(method: "POST", path: "/v1/customer_sessions")
  PostCustomersCustomerBankAccountsIdVerify(customer: String!, id: String!): bank_account @http(method: "POST", path: "/v1/customers/{{args.customer}}/bank_accounts/{{args.id}}/verify")
  PostCustomersCustomerFundingInstructions(customer: String!): funding_instructions @http(method: "POST", path: "/v1/customers/{{args.customer}}/funding_instructions")
  PostCustomersCustomerSourcesIdVerify(customer: String!, id: String!): bank_account @http(method: "POST", path: "/v1/customers/{{args.customer}}/sources/{{args.id}}/verify")
  PostDisputesDisputeClose(dispute: String!): dispute @http(method: "POST", path: "/v1/disputes/{{args.dispute}}/close")
  PostEphemeralKeys: ephemeral_key @http(method: "POST", path: "/v1/ephemeral_keys")
  PostFinancialConnectionsAccountsAccountDisconnect(account: String!): financial_connections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/disconnect")
  PostFinancialConnectionsAccountsAccountRefresh(account: String!): financial_connections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/refresh")
  PostFinancialConnectionsAccountsAccountSubscribe(account: String!): financial_connections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/subscribe")
  PostFinancialConnectionsAccountsAccountUnsubscribe(account: String!): financial_connections.account @http(method: "POST", path: "/v1/financial_connections/accounts/{{args.account}}/unsubscribe")
  PostFinancialConnectionsSessions: financial_connections.session @http(method: "POST", path: "/v1/financial_connections/sessions")
  PostIdentityVerificationSessionsSessionCancel(session: String!): identity.verification_session @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/cancel")
  PostIdentityVerificationSessionsSessionRedact(session: String!): identity.verification_session @http(method: "POST", path: "/v1/identity/verification_sessions/{{args.session}}/redact")
  PostInvoicesInvoiceFinalize(invoice: String!): invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/finalize")
  PostInvoicesInvoiceLinesLineItemId(invoice: String!, line_item_id: String!): line_item @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/lines/{{args.line_item_id}}")
  PostInvoicesInvoiceMarkUncollectible(invoice: String!): invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/mark_uncollectible")
  PostInvoicesInvoicePay(invoice: String!): invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/pay")
  PostInvoicesInvoiceSend(invoice: String!): invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/send")
  PostInvoicesInvoiceVoid(invoice: String!): invoice @http(method: "POST", path: "/v1/invoices/{{args.invoice}}/void")
  PostIssuingAuthorizationsAuthorizationApprove(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/approve")
  PostIssuingAuthorizationsAuthorizationDecline(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/issuing/authorizations/{{args.authorization}}/decline")
  PostIssuingDisputesDisputeSubmit(dispute: String!): issuing.dispute @http(method: "POST", path: "/v1/issuing/disputes/{{args.dispute}}/submit")
  PostLinkAccountSessions: financial_connections.session @http(method: "POST", path: "/v1/link_account_sessions")
  PostLinkedAccountsAccountDisconnect(account: String!): financial_connections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/disconnect")
  PostLinkedAccountsAccountRefresh(account: String!): financial_connections.account @http(method: "POST", path: "/v1/linked_accounts/{{args.account}}/refresh")
  PostPaymentIntentsIntentApplyCustomerBalance(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/apply_customer_balance")
  PostPaymentIntentsIntentCancel(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/cancel")
  PostPaymentIntentsIntentCapture(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/capture")
  PostPaymentIntentsIntentConfirm(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/confirm")
  PostPaymentIntentsIntentIncrementAuthorization(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/increment_authorization")
  PostPaymentIntentsIntentVerifyMicrodeposits(intent: String!): payment_intent @http(method: "POST", path: "/v1/payment_intents/{{args.intent}}/verify_microdeposits")
  PostPaymentMethodDomainsPaymentMethodDomainValidate(payment_method_domain: String!): payment_method_domain @http(method: "POST", path: "/v1/payment_method_domains/{{args.payment_method_domain}}/validate")
  PostPaymentMethodsPaymentMethodAttach(payment_method: String!): payment_method @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/attach")
  PostPaymentMethodsPaymentMethodDetach(payment_method: String!): payment_method @http(method: "POST", path: "/v1/payment_methods/{{args.payment_method}}/detach")
  PostPayoutsPayoutCancel(payout: String!): payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/cancel")
  PostPayoutsPayoutReverse(payout: String!): payout @http(method: "POST", path: "/v1/payouts/{{args.payout}}/reverse")
  PostQuotesQuoteAccept(quote: String!): quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/accept")
  PostQuotesQuoteCancel(quote: String!): quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/cancel")
  PostQuotesQuoteFinalize(quote: String!): quote @http(method: "POST", path: "/v1/quotes/{{args.quote}}/finalize")
  PostRefundsRefundCancel(refund: String!): refund @http(method: "POST", path: "/v1/refunds/{{args.refund}}/cancel")
  PostReviewsReviewApprove(review: String!): review @http(method: "POST", path: "/v1/reviews/{{args.review}}/approve")
  PostSetupIntentsIntentCancel(intent: String!): setup_intent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/cancel")
  PostSetupIntentsIntentConfirm(intent: String!): setup_intent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/confirm")
  PostSetupIntentsIntentVerifyMicrodeposits(intent: String!): setup_intent @http(method: "POST", path: "/v1/setup_intents/{{args.intent}}/verify_microdeposits")
  PostSources: source @http(method: "POST", path: "/v1/sources")
  PostSourcesSourceVerify(source: String!): source @http(method: "POST", path: "/v1/sources/{{args.source}}/verify")
  PostSubscriptionItemsSubscriptionItemUsageRecords(subscription_item: String!): usage_record @http(method: "POST", path: "/v1/subscription_items/{{args.subscription_item}}/usage_records")
  PostSubscriptionSchedulesScheduleCancel(schedule: String!): subscription_schedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/cancel")
  PostSubscriptionSchedulesScheduleRelease(schedule: String!): subscription_schedule @http(method: "POST", path: "/v1/subscription_schedules/{{args.schedule}}/release")
  PostSubscriptionsSubscriptionResume(subscription: String!): subscription @http(method: "POST", path: "/v1/subscriptions/{{args.subscription}}/resume")
  PostTaxCalculations: tax.calculation @http(method: "POST", path: "/v1/tax/calculations")
  PostTaxTransactionsCreateFromCalculation: tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_from_calculation")
  PostTaxTransactionsCreateReversal: tax.transaction @http(method: "POST", path: "/v1/tax/transactions/create_reversal")
  PostTerminalConnectionTokens: terminal.connection_token @http(method: "POST", path: "/v1/terminal/connection_tokens")
  PostTerminalReadersReaderCancelAction(reader: String!): terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/cancel_action")
  PostTerminalReadersReaderProcessPaymentIntent(reader: String!): terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_payment_intent")
  PostTerminalReadersReaderProcessSetupIntent(reader: String!): terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/process_setup_intent")
  PostTerminalReadersReaderRefundPayment(reader: String!): terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/refund_payment")
  PostTerminalReadersReaderSetReaderDisplay(reader: String!): terminal.reader @http(method: "POST", path: "/v1/terminal/readers/{{args.reader}}/set_reader_display")
  PostTestHelpersConfirmationTokens: confirmation_token @http(method: "POST", path: "/v1/test_helpers/confirmation_tokens")
  PostTestHelpersCustomersCustomerFundCashBalance(customer: String!): customer_cash_balance_transaction @http(method: "POST", path: "/v1/test_helpers/customers/{{args.customer}}/fund_cash_balance")
  PostTestHelpersIssuingAuthorizations: issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations")
  PostTestHelpersIssuingAuthorizationsAuthorizationCapture(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/capture")
  PostTestHelpersIssuingAuthorizationsAuthorizationExpire(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/expire")
  PostTestHelpersIssuingAuthorizationsAuthorizationIncrement(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/increment")
  PostTestHelpersIssuingAuthorizationsAuthorizationReverse(authorization: String!): issuing.authorization @http(method: "POST", path: "/v1/test_helpers/issuing/authorizations/{{args.authorization}}/reverse")
  PostTestHelpersIssuingCardsCardShippingDeliver(card: String!): issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/deliver")
  PostTestHelpersIssuingCardsCardShippingFail(card: String!): issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/fail")
  PostTestHelpersIssuingCardsCardShippingReturn(card: String!): issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/return")
  PostTestHelpersIssuingCardsCardShippingShip(card: String!): issuing.card @http(method: "POST", path: "/v1/test_helpers/issuing/cards/{{args.card}}/shipping/ship")
  PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(personalization_design: String!): issuing.personalization_design @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/activate")
  PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(personalization_design: String!): issuing.personalization_design @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/deactivate")
  PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(personalization_design: String!): issuing.personalization_design @http(method: "POST", path: "/v1/test_helpers/issuing/personalization_designs/{{args.personalization_design}}/reject")
  PostTestHelpersIssuingTransactionsCreateForceCapture: issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_force_capture")
  PostTestHelpersIssuingTransactionsCreateUnlinkedRefund: issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/create_unlinked_refund")
  PostTestHelpersIssuingTransactionsTransactionRefund(transaction: String!): issuing.transaction @http(method: "POST", path: "/v1/test_helpers/issuing/transactions/{{args.transaction}}/refund")
  PostTestHelpersRefundsRefundExpire(refund: String!): refund @http(method: "POST", path: "/v1/test_helpers/refunds/{{args.refund}}/expire")
  PostTestHelpersTerminalReadersReaderPresentPaymentMethod(reader: String!): terminal.reader @http(method: "POST", path: "/v1/test_helpers/terminal/readers/{{args.reader}}/present_payment_method")
  PostTestHelpersTestClocksTestClockAdvance(test_clock: String!): test_helpers.test_clock @http(method: "POST", path: "/v1/test_helpers/test_clocks/{{args.test_clock}}/advance")
  PostTestHelpersTreasuryInboundTransfersIdFail(id: String!): treasury.inbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/fail")
  PostTestHelpersTreasuryInboundTransfersIdReturn(id: String!): treasury.inbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/return")
  PostTestHelpersTreasuryInboundTransfersIdSucceed(id: String!): treasury.inbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/inbound_transfers/{{args.id}}/succeed")
  PostTestHelpersTreasuryOutboundPaymentsIdFail(id: String!): treasury.outbound_payment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/fail")
  PostTestHelpersTreasuryOutboundPaymentsIdPost(id: String!): treasury.outbound_payment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/post")
  PostTestHelpersTreasuryOutboundPaymentsIdReturn(id: String!): treasury.outbound_payment @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_payments/{{args.id}}/return")
  PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail(outbound_transfer: String!): treasury.outbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/fail")
  PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost(outbound_transfer: String!): treasury.outbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/post")
  PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(outbound_transfer: String!): treasury.outbound_transfer @http(method: "POST", path: "/v1/test_helpers/treasury/outbound_transfers/{{args.outbound_transfer}}/return")
  PostTestHelpersTreasuryReceivedCredits: treasury.received_credit @http(method: "POST", path: "/v1/test_helpers/treasury/received_credits")
  PostTestHelpersTreasuryReceivedDebits: treasury.received_debit @http(method: "POST", path: "/v1/test_helpers/treasury/received_debits")
  PostTokens: token @http(method: "POST", path: "/v1/tokens")
  PostTopupsTopupCancel(topup: String!): topup @http(method: "POST", path: "/v1/topups/{{args.topup}}/cancel")
  PostTreasuryInboundTransfersInboundTransferCancel(inbound_transfer: String!): treasury.inbound_transfer @http(method: "POST", path: "/v1/treasury/inbound_transfers/{{args.inbound_transfer}}/cancel")
  PostTreasuryOutboundPaymentsIdCancel(id: String!): treasury.outbound_payment @http(method: "POST", path: "/v1/treasury/outbound_payments/{{args.id}}/cancel")
  PostTreasuryOutboundTransfersOutboundTransferCancel(outbound_transfer: String!): treasury.outbound_transfer @http(method: "POST", path: "/v1/treasury/outbound_transfers/{{args.outbound_transfer}}/cancel")
}

type account {
  business_profile: Object
  business_type: String
  capabilities: Object
  charges_enabled: Boolean
  company: Object
  controller: Object
  country: String
  created: Int
  default_currency: String
  details_submitted: Boolean
  email: String
  external_accounts: Object
  future_requirements: Object
  id: String!
  individual: Object
  metadata: Object
  object: String!
  payouts_enabled: Boolean
  requirements: Object
  settings: Object
  tos_acceptance: Object
  type: String
}

type account_annual_revenue {
  amount: Int
  currency: String
  fiscal_year_end: String
}

type account_bacs_debit_payments_settings {
  display_name: String
  service_user_number: String
}

type account_branding_settings {
  icon: Object
  logo: Object
  primary_color: String
  secondary_color: String
}

type account_business_profile {
  annual_revenue: Object
  estimated_worker_count: Int
  mcc: String
  monthly_estimated_revenue: Object
  name: String
  product_description: String
  support_address: Object
  support_email: String
  support_phone: String
  support_url: String
  url: String
}

type account_capabilities {
  acss_debit_payments: String
  affirm_payments: String
  afterpay_clearpay_payments: String
  amazon_pay_payments: String
  au_becs_debit_payments: String
  bacs_debit_payments: String
  bancontact_payments: String
  bank_transfer_payments: String
  blik_payments: String
  boleto_payments: String
  card_issuing: String
  card_payments: String
  cartes_bancaires_payments: String
  cashapp_payments: String
  eps_payments: String
  fpx_payments: String
  giropay_payments: String
  grabpay_payments: String
  ideal_payments: String
  india_international_payments: String
  jcb_payments: String
  klarna_payments: String
  konbini_payments: String
  legacy_payments: String
  link_payments: String
  mobilepay_payments: String
  oxxo_payments: String
  p24_payments: String
  paynow_payments: String
  promptpay_payments: String
  revolut_pay_payments: String
  sepa_debit_payments: String
  sofort_payments: String
  swish_payments: String
  tax_reporting_us_1099_k: String
  tax_reporting_us_1099_misc: String
  transfers: String
  treasury: String
  us_bank_account_ach_payments: String
  zip_payments: String
}

type account_capability_future_requirements {
  alternatives: Array
  current_deadline: Int
  currently_due: Array!
  disabled_reason: String
  errors: Array!
  eventually_due: Array!
  past_due: Array!
  pending_verification: Array!
}

type account_capability_requirements {
  alternatives: Array
  current_deadline: Int
  currently_due: Array!
  disabled_reason: String
  errors: Array!
  eventually_due: Array!
  past_due: Array!
  pending_verification: Array!
}

type account_card_issuing_settings {
  tos_acceptance: Object
}

type account_card_payments_settings {
  decline_on: Object
  statement_descriptor_prefix: String
  statement_descriptor_prefix_kana: String
  statement_descriptor_prefix_kanji: String
}

type account_dashboard_settings {
  display_name: String
  timezone: String
}

type account_decline_charge_on {
  avs_failure: Boolean!
  cvc_failure: Boolean!
}

type account_future_requirements {
  alternatives: Array
  current_deadline: Int
  currently_due: Array
  disabled_reason: String
  errors: Array
  eventually_due: Array
  past_due: Array
  pending_verification: Array
}

type account_invoices_settings {
  default_account_tax_ids: Array
}

type account_link {
  created: Int!
  expires_at: Int!
  object: String!
  url: String!
}

type account_monthly_estimated_revenue {
  amount: Int!
  currency: String!
}

type account_payments_settings {
  statement_descriptor: String
  statement_descriptor_kana: String
  statement_descriptor_kanji: String
  statement_descriptor_prefix_kana: String
  statement_descriptor_prefix_kanji: String
}

type account_payout_settings {
  debit_negative_balances: Boolean!
  schedule: Object!
  statement_descriptor: String
}

type account_requirements {
  alternatives: Array
  current_deadline: Int
  currently_due: Array
  disabled_reason: String
  errors: Array
  eventually_due: Array
  past_due: Array
  pending_verification: Array
}

type account_requirements_alternative {
  alternative_fields_due: Array!
  original_fields_due: Array!
}

type account_requirements_error {
  code: String!
  reason: String!
  requirement: String!
}

type account_sepa_debit_payments_settings {
  creditor_id: String
}

type account_session {
  account: String!
  client_secret: String!
  components: Object!
  expires_at: Int!
  livemode: Boolean!
  object: String!
}

type account_settings {
  bacs_debit_payments: Object
  branding: Object!
  card_issuing: Object
  card_payments: Object!
  dashboard: Object!
  invoices: Object
  payments: Object!
  payouts: Object
  sepa_debit_payments: Object
  treasury: Object
}

type account_terms_of_service {
  date: Int
  ip: String
  user_agent: String
}

type account_tos_acceptance {
  date: Int
  ip: String
  service_agreement: String
  user_agent: String
}

type account_treasury_settings {
  tos_acceptance: Object
}

type account_unification_account_controller {
  is_controller: Boolean
  type: String!
}

type address {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type api_errors {
  charge: String
  code: String
  decline_code: String
  doc_url: String
  message: String
  param: String
  payment_intent: Object
  payment_method: Object
  payment_method_type: String
  request_log_url: String
  setup_intent: Object
  source: Object
  type: String!
}

type apple_pay_domain {
  created: Int!
  domain_name: String!
  id: String!
  livemode: Boolean!
  object: String!
}

type application {
  id: String!
  name: String
  object: String!
}

type application_fee {
  account: Object!
  amount: Int!
  amount_refunded: Int!
  application: Object!
  balance_transaction: Object
  charge: Object!
  created: Int!
  currency: String!
  id: String!
  livemode: Boolean!
  object: String!
  originating_transaction: Object
  refunded: Boolean!
  refunds: Object!
}

type apps.secret {
  created: Int!
  deleted: Boolean
  expires_at: Int
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  payload: String
  scope: Object!
}

type automatic_tax {
  enabled: Boolean!
  liability: Object
  status: String
}

type balance {
  available: Array!
  connect_reserved: Array
  instant_available: Array
  issuing: Object
  livemode: Boolean!
  object: String!
  pending: Array!
}

type balance_amount {
  amount: Int!
  currency: String!
  source_types: Object
}

type balance_amount_by_source_type {
  bank_account: Int
  card: Int
  fpx: Int
}

type balance_amount_net {
  amount: Int!
  currency: String!
  source_types: Object
}

type balance_detail {
  available: Array!
}

type balance_transaction {
  amount: Int!
  available_on: Int!
  created: Int!
  currency: String!
  description: String
  exchange_rate: Number
  fee: Int!
  fee_details: Array!
  id: String!
  net: Int!
  object: String!
  reporting_category: String!
  source: Object
  status: String!
  type: String!
}

type bank_account {
  account: Object
  account_holder_name: String
  account_holder_type: String
  account_type: String
  available_payout_methods: Array
  bank_name: String
  country: String!
  currency: String!
  customer: Object
  default_for_currency: Boolean
  fingerprint: String
  future_requirements: Object
  id: String!
  last4: String!
  metadata: Object
  object: String!
  requirements: Object
  routing_number: String
  status: String!
}

type bank_connections_resource_accountholder {
  account: Object
  customer: Object
  type: String!
}

type bank_connections_resource_balance {
  as_of: Int!
  cash: Object
  credit: Object
  current: Object!
  type: String!
}

type bank_connections_resource_balance_api_resource_cash_balance {
  available: Object
}

type bank_connections_resource_balance_api_resource_credit_balance {
  used: Object
}

type bank_connections_resource_balance_refresh {
  last_attempted_at: Int!
  next_refresh_available_at: Int
  status: String!
}

type bank_connections_resource_link_account_session_filters {
  countries: Array
}

type bank_connections_resource_ownership_refresh {
  last_attempted_at: Int!
  status: String!
}

type bank_connections_resource_transaction_refresh {
  id: String!
  last_attempted_at: Int!
  next_refresh_available_at: Int
  status: String!
}

type bank_connections_resource_transaction_resource_status_transitions {
  posted_at: Int
  void_at: Int
}

type billing.meter {
  created: Int!
  customer_mapping: Object!
  default_aggregation: Object!
  display_name: String!
  event_name: String!
  event_time_window: String
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  status_transitions: Object!
  updated: Int!
  value_settings: Object!
}

type billing.meter_event {
  created: Int!
  event_name: String!
  identifier: String!
  livemode: Boolean!
  object: String!
  payload: Object!
  timestamp: Int!
}

type billing.meter_event_adjustment {
  livemode: Boolean!
  object: String!
  status: String!
}

type billing.meter_event_summary {
  aggregated_value: Number!
  end_time: Int!
  id: String!
  livemode: Boolean!
  meter: String!
  object: String!
  start_time: Int!
}

type billing_details {
  address: Object
  email: String
  name: String
  phone: String
}

type billing_meter_resource_aggregation_settings {
  formula: String!
}

type billing_meter_resource_billing_meter_status_transitions {
  deactivated_at: Int
}

type billing_meter_resource_billing_meter_value {
  event_payload_key: String!
}

type billing_meter_resource_customer_mapping_settings {
  event_payload_key: String!
  type: String!
}

type billing_portal.configuration {
  active: Boolean!
  application: Object
  business_profile: Object!
  created: Int!
  default_return_url: String
  features: Object!
  id: String!
  is_default: Boolean!
  livemode: Boolean!
  login_page: Object!
  metadata: Object
  object: String!
  updated: Int!
}

type billing_portal.session {
  configuration: Object!
  created: Int!
  customer: String!
  flow: Object
  id: String!
  livemode: Boolean!
  locale: String
  object: String!
  on_behalf_of: String
  return_url: String
  url: String!
}

type cancellation_details {
  comment: String
  feedback: String
  reason: String
}

type capability {
  account: Object!
  future_requirements: Object
  id: String!
  object: String!
  requested: Boolean!
  requested_at: Int
  requirements: Object
  status: String!
}

type card {
  account: Object
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  available_payout_methods: Array
  brand: String!
  country: String
  currency: String
  customer: Object
  cvc_check: String
  default_for_currency: Boolean
  dynamic_last4: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String!
  id: String!
  last4: String!
  metadata: Object
  name: String
  networks: Object
  object: String!
  status: String
  tokenization_method: String
}

type card_generated_from_payment_method_details {
  card_present: Object
  type: String!
}

type card_issuing_account_terms_of_service {
  date: Int
  ip: String
  user_agent: String
}

type cash_balance {
  available: Object
  customer: String!
  livemode: Boolean!
  object: String!
  settings: Object!
}

type charge {
  amount: Int!
  amount_captured: Int!
  amount_refunded: Int!
  application: Object
  application_fee: Object
  application_fee_amount: Int
  balance_transaction: Object
  billing_details: Object!
  calculated_statement_descriptor: String
  captured: Boolean!
  created: Int!
  currency: String!
  customer: Object
  description: String
  disputed: Boolean!
  failure_balance_transaction: Object
  failure_code: String
  failure_message: String
  fraud_details: Object
  id: String!
  invoice: Object
  livemode: Boolean!
  metadata: Object!
  object: String!
  on_behalf_of: Object
  outcome: Object
  paid: Boolean!
  payment_intent: Object
  payment_method: String
  payment_method_details: Object
  radar_options: Object
  receipt_email: String
  receipt_number: String
  receipt_url: String
  refunded: Boolean!
  refunds: Object
  review: Object
  shipping: Object
  source_transfer: Object
  statement_descriptor: String
  statement_descriptor_suffix: String
  status: String!
  transfer: Object
  transfer_data: Object
  transfer_group: String
}

type charge_fraud_details {
  stripe_report: String
  user_report: String
}

type charge_outcome {
  network_status: String
  reason: String
  risk_level: String
  risk_score: Int
  rule: Object
  seller_message: String
  type: String!
}

type charge_transfer_data {
  amount: Int
  destination: Object!
}

type checkout.session {
  after_expiration: Object
  allow_promotion_codes: Boolean
  amount_subtotal: Int
  amount_total: Int
  automatic_tax: Object!
  billing_address_collection: String
  cancel_url: String
  client_reference_id: String
  client_secret: String
  consent: Object
  consent_collection: Object
  created: Int!
  currency: String
  currency_conversion: Object
  custom_fields: Array!
  custom_text: Object!
  customer: Object
  customer_creation: String
  customer_details: Object
  customer_email: String
  expires_at: Int!
  id: String!
  invoice: Object
  invoice_creation: Object
  line_items: Object
  livemode: Boolean!
  locale: String
  metadata: Object
  mode: String!
  object: String!
  payment_intent: Object
  payment_link: Object
  payment_method_collection: String
  payment_method_configuration_details: Object
  payment_method_options: Object
  payment_method_types: Array!
  payment_status: String!
  phone_number_collection: Object
  recovered_from: String
  redirect_on_completion: String
  return_url: String
  setup_intent: Object
  shipping_address_collection: Object
  shipping_cost: Object
  shipping_details: Object
  shipping_options: Array!
  status: String
  submit_type: String
  subscription: Object
  success_url: String
  tax_id_collection: Object
  total_details: Object
  ui_mode: String
  url: String
}

type checkout_acss_debit_mandate_options {
  custom_mandate_url: String
  default_for: Array
  interval_description: String
  payment_schedule: String
  transaction_type: String
}

type checkout_acss_debit_payment_method_options {
  currency: String
  mandate_options: Object
  setup_future_usage: String
  verification_method: String
}

type checkout_affirm_payment_method_options {
  setup_future_usage: String
}

type checkout_afterpay_clearpay_payment_method_options {
  setup_future_usage: String
}

type checkout_alipay_payment_method_options {
  setup_future_usage: String
}

type checkout_au_becs_debit_payment_method_options {
  setup_future_usage: String
}

type checkout_bacs_debit_payment_method_options {
  setup_future_usage: String
}

type checkout_bancontact_payment_method_options {
  setup_future_usage: String
}

type checkout_boleto_payment_method_options {
  expires_after_days: Int!
  setup_future_usage: String
}

type checkout_card_installments_options {
  enabled: Boolean
}

type checkout_card_payment_method_options {
  installments: Object
  request_three_d_secure: String!
  setup_future_usage: String
  statement_descriptor_suffix_kana: String
  statement_descriptor_suffix_kanji: String
}

type checkout_cashapp_payment_method_options {
  setup_future_usage: String
}

type checkout_customer_balance_bank_transfer_payment_method_options {
  eu_bank_transfer: Object
  requested_address_types: Array
  type: String
}

type checkout_customer_balance_payment_method_options {
  bank_transfer: Object
  funding_type: String
  setup_future_usage: String
}

type checkout_eps_payment_method_options {
  setup_future_usage: String
}

type checkout_fpx_payment_method_options {
  setup_future_usage: String
}

type checkout_giropay_payment_method_options {
  setup_future_usage: String
}

type checkout_grab_pay_payment_method_options {
  setup_future_usage: String
}

type checkout_ideal_payment_method_options {
  setup_future_usage: String
}

type checkout_klarna_payment_method_options {
  setup_future_usage: String
}

type checkout_konbini_payment_method_options {
  expires_after_days: Int
  setup_future_usage: String
}

type checkout_link_payment_method_options {
  setup_future_usage: String
}

type checkout_oxxo_payment_method_options {
  expires_after_days: Int!
  setup_future_usage: String
}

type checkout_p24_payment_method_options {
  setup_future_usage: String
}

type checkout_paynow_payment_method_options {
  setup_future_usage: String
}

type checkout_paypal_payment_method_options {
  capture_method: String
  preferred_locale: String
  reference: String
  setup_future_usage: String
}

type checkout_pix_payment_method_options {
  expires_after_seconds: Int
}

type checkout_sepa_debit_payment_method_options {
  setup_future_usage: String
}

type checkout_session_payment_method_options {
  acss_debit: Object
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  boleto: Object
  card: Object
  cashapp: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  klarna: Object
  konbini: Object
  link: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  swish: Object
  us_bank_account: Object
}

type checkout_sofort_payment_method_options {
  setup_future_usage: String
}

type checkout_swish_payment_method_options {
  reference: String
}

type checkout_us_bank_account_payment_method_options {
  financial_connections: Object
  setup_future_usage: String
  verification_method: String
}

type climate.order {
  amount_fees: Int!
  amount_subtotal: Int!
  amount_total: Int!
  beneficiary: Object
  canceled_at: Int
  cancellation_reason: String
  certificate: String
  confirmed_at: Int
  created: Int!
  currency: String!
  delayed_at: Int
  delivered_at: Int
  delivery_details: Array!
  expected_delivery_year: Int!
  id: String!
  livemode: Boolean!
  metadata: Object!
  metric_tons: String!
  object: String!
  product: Object!
  product_substituted_at: Int
  status: String!
}

type climate.product {
  created: Int!
  current_prices_per_metric_ton: Object!
  delivery_year: Int
  id: String!
  livemode: Boolean!
  metric_tons_available: String!
  name: String!
  object: String!
  suppliers: Array!
}

type climate.supplier {
  id: String!
  info_url: String!
  livemode: Boolean!
  locations: Array!
  name: String!
  object: String!
  removal_pathway: String!
}

type climate_removals_beneficiary {
  public_name: String!
}

type climate_removals_location {
  city: String
  country: String!
  latitude: Number
  longitude: Number
  region: String
}

type climate_removals_order_deliveries {
  delivered_at: Int!
  location: Object
  metric_tons: String!
  registry_url: String
  supplier: Object!
}

type climate_removals_products_price {
  amount_fees: Int!
  amount_subtotal: Int!
  amount_total: Int!
}

type confirmation_token {
  created: Int!
  expires_at: Int
  id: String!
  livemode: Boolean!
  mandate_data: Object
  object: String!
  payment_intent: String
  payment_method_preview: Object
  return_url: String
  setup_future_usage: String
  setup_intent: String
  shipping: Object
  use_stripe_sdk: Boolean!
}

type confirmation_tokens_resource_mandate_data {
  customer_acceptance: Object!
}

type confirmation_tokens_resource_mandate_data_resource_customer_acceptance {
  online: Object
  type: String!
}

type confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online {
  ip_address: String
  user_agent: String
}

type confirmation_tokens_resource_payment_method_preview {
  acss_debit: Object
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  billing_details: Object!
  blik: Object
  boleto: Object
  card: Object
  card_present: Object
  cashapp: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  interac_present: Object
  klarna: Object
  konbini: Object
  link: Object
  mobilepay: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  swish: Object
  type: String!
  us_bank_account: Object
  wechat_pay: Object
  zip: Object
}

type confirmation_tokens_resource_shipping {
  address: Object!
  name: String!
  phone: String
}

type connect_account_reference {
  account: Object
  type: String!
}

type connect_collection_transfer {
  amount: Int!
  currency: String!
  destination: Object!
  id: String!
  livemode: Boolean!
  object: String!
}

type connect_embedded_account_config {
  enabled: Boolean!
  features: Object!
}

type connect_embedded_account_session_create_components {
  account_onboarding: Object!
  documents: Object!
  payment_details: Object!
  payments: Object!
  payouts: Object!
}

type connect_embedded_base_config_claim {
  enabled: Boolean!
  features: Object!
}

type connect_embedded_payments_config {
  enabled: Boolean!
  features: Object!
}

type connect_embedded_payments_features {
  capture_payments: Boolean!
  destination_on_behalf_of_charge_management: Boolean
  dispute_management: Boolean!
  refund_management: Boolean!
}

type connect_embedded_payouts_config {
  enabled: Boolean!
  features: Object!
}

type connect_embedded_payouts_features {
  edit_payout_schedule: Boolean!
  instant_payouts: Boolean!
  standard_payouts: Boolean!
}

type country_spec {
  default_currency: String!
  id: String!
  object: String!
  supported_bank_account_currencies: Object!
  supported_payment_currencies: Array!
  supported_payment_methods: Array!
  supported_transfer_countries: Array!
  verification_fields: Object!
}

type country_spec_verification_field_details {
  additional: Array!
  minimum: Array!
}

type country_spec_verification_fields {
  company: Object!
  individual: Object!
}

type coupon {
  amount_off: Int
  applies_to: Object
  created: Int!
  currency: String
  currency_options: Object
  duration: String!
  duration_in_months: Int
  id: String!
  livemode: Boolean!
  max_redemptions: Int
  metadata: Object
  name: String
  object: String!
  percent_off: Number
  redeem_by: Int
  times_redeemed: Int!
  valid: Boolean!
}

type coupon_applies_to {
  products: Array!
}

type coupon_currency_option {
  amount_off: Int!
}

type credit_note {
  amount: Int!
  amount_shipping: Int!
  created: Int!
  currency: String!
  customer: Object!
  customer_balance_transaction: Object
  discount_amount: Int!
  discount_amounts: Array!
  effective_at: Int
  id: String!
  invoice: Object!
  lines: Object!
  livemode: Boolean!
  memo: String
  metadata: Object
  number: String!
  object: String!
  out_of_band_amount: Int
  pdf: String!
  reason: String
  refund: Object
  shipping_cost: Object
  status: String!
  subtotal: Int!
  subtotal_excluding_tax: Int
  tax_amounts: Array!
  total: Int!
  total_excluding_tax: Int
  type: String!
  voided_at: Int
}

type credit_note_line_item {
  amount: Int!
  amount_excluding_tax: Int
  description: String
  discount_amount: Int!
  discount_amounts: Array!
  id: String!
  invoice_line_item: String
  livemode: Boolean!
  object: String!
  quantity: Int
  tax_amounts: Array!
  tax_rates: Array!
  type: String!
  unit_amount: Int
  unit_amount_decimal: String
  unit_amount_excluding_tax: String
}

type credit_note_tax_amount {
  amount: Int!
  inclusive: Boolean!
  tax_rate: Object!
  taxability_reason: String
  taxable_amount: Int
}

type currency_option {
  custom_unit_amount: Object
  tax_behavior: String
  tiers: Array
  unit_amount: Int
  unit_amount_decimal: String
}

type custom_unit_amount {
  maximum: Int
  minimum: Int
  preset: Int
}

type customer {
  address: Object
  balance: Int
  cash_balance: Object
  created: Int!
  currency: String
  default_source: Object
  delinquent: Boolean
  description: String
  discount: Object
  email: String
  id: String!
  invoice_credit_balance: Object
  invoice_prefix: String
  invoice_settings: Object
  livemode: Boolean!
  metadata: Object
  name: String
  next_invoice_sequence: Int
  object: String!
  phone: String
  preferred_locales: Array
  shipping: Object
  sources: Object
  subscriptions: Object
  tax: Object
  tax_exempt: String
  tax_ids: Object
  test_clock: Object
}

type customer_acceptance {
  accepted_at: Int
  offline: Object
  online: Object
  type: String!
}

type customer_balance_customer_balance_settings {
  reconciliation_mode: String!
  using_merchant_default: Boolean!
}

type customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft {
  balance_transaction: Object!
  linked_transaction: Object!
}

type customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction {
  payment_intent: Object!
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction {
  bank_transfer: Object!
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer {
  eu_bank_transfer: Object
  gb_bank_transfer: Object
  jp_bank_transfer: Object
  reference: String
  type: String!
  us_bank_transfer: Object
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer {
  bic: String
  iban_last4: String
  sender_name: String
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer {
  account_number_last4: String
  sender_name: String
  sort_code: String
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer {
  sender_bank: String
  sender_branch: String
  sender_name: String
}

type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer {
  network: String
  sender_name: String
}

type customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction {
  refund: Object!
}

type customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance {
  balance_transaction: Object!
}

type customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction {
  payment_intent: Object!
}

type customer_balance_transaction {
  amount: Int!
  created: Int!
  credit_note: Object
  currency: String!
  customer: Object!
  description: String
  ending_balance: Int!
  id: String!
  invoice: Object
  livemode: Boolean!
  metadata: Object
  object: String!
  type: String!
}

type customer_cash_balance_transaction {
  adjusted_for_overdraft: Object
  applied_to_payment: Object
  created: Int!
  currency: String!
  customer: Object!
  ending_balance: Int!
  funded: Object
  id: String!
  livemode: Boolean!
  net_amount: Int!
  object: String!
  refunded_from_payment: Object
  transferred_to_balance: Object
  type: String!
  unapplied_from_payment: Object
}

type customer_session {
  client_secret: String!
  components: Object
  created: Int!
  customer: Object!
  expires_at: Int!
  livemode: Boolean!
  object: String!
}

type customer_session_resource_components {
  buy_button: Object!
  pricing_table: Object!
}

type customer_session_resource_components_resource_buy_button {
  enabled: Boolean!
}

type customer_session_resource_components_resource_pricing_table {
  enabled: Boolean!
}

type customer_tax {
  automatic_tax: String!
  ip_address: String
  location: Object
}

type customer_tax_location {
  country: String!
  source: String!
  state: String
}

type deleted_account {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_apple_pay_domain {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_application {
  deleted: Boolean!
  id: String!
  name: String
  object: String!
}

type deleted_bank_account {
  currency: String
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_card {
  currency: String
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_coupon {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_customer {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_discount {
  checkout_session: String
  coupon: Object!
  customer: Object
  deleted: Boolean!
  id: String!
  invoice: String
  invoice_item: String
  object: String!
  promotion_code: Object
  start: Int!
  subscription: String
}

type deleted_invoice {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_invoiceitem {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_person {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_plan {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_price {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_product {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_radar.value_list {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_radar.value_list_item {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_subscription_item {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_tax_id {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_terminal.configuration {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_terminal.location {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_terminal.reader {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_test_helpers.test_clock {
  deleted: Boolean!
  id: String!
  object: String!
}

type deleted_webhook_endpoint {
  deleted: Boolean!
  id: String!
  object: String!
}

type discount {
  checkout_session: String
  coupon: Object!
  customer: Object
  end: Int
  id: String!
  invoice: String
  invoice_item: String
  object: String!
  promotion_code: Object
  start: Int!
  subscription: String
}

type discounts_resource_discount_amount {
  amount: Int!
  discount: Object!
}

type dispute {
  amount: Int!
  balance_transactions: Array!
  charge: Object!
  created: Int!
  currency: String!
  evidence: Object!
  evidence_details: Object!
  id: String!
  is_charge_refundable: Boolean!
  livemode: Boolean!
  metadata: Object!
  object: String!
  payment_intent: Object
  payment_method_details: Object
  reason: String!
  status: String!
}

type dispute_evidence {
  access_activity_log: String
  billing_address: String
  cancellation_policy: Object
  cancellation_policy_disclosure: String
  cancellation_rebuttal: String
  customer_communication: Object
  customer_email_address: String
  customer_name: String
  customer_purchase_ip: String
  customer_signature: Object
  duplicate_charge_documentation: Object
  duplicate_charge_explanation: String
  duplicate_charge_id: String
  product_description: String
  receipt: Object
  refund_policy: Object
  refund_policy_disclosure: String
  refund_refusal_explanation: String
  service_date: String
  service_documentation: Object
  shipping_address: String
  shipping_carrier: String
  shipping_date: String
  shipping_documentation: Object
  shipping_tracking_number: String
  uncategorized_file: Object
  uncategorized_text: String
}

type dispute_evidence_details {
  due_by: Int
  has_evidence: Boolean!
  past_due: Boolean!
  submission_count: Int!
}

type dispute_payment_method_details {
  card: Object
  type: String!
}

type dispute_payment_method_details_card {
  brand: String!
  network_reason_code: String
}

type email_sent {
  email_sent_at: Int!
  email_sent_to: String!
}

type ephemeral_key {
  created: Int!
  expires: Int!
  id: String!
  livemode: Boolean!
  object: String!
  secret: String
}

type error {
  error: Object!
}

type event {
  account: String
  api_version: String
  created: Int!
  data: Object!
  id: String!
  livemode: Boolean!
  object: String!
  pending_webhooks: Int!
  request: Object
  type: String!
}

type exchange_rate {
  id: String!
  object: String!
  rates: Object!
}

type external_account_requirements {
  currently_due: Array
  errors: Array
  past_due: Array
  pending_verification: Array
}

type fee {
  amount: Int!
  application: String
  currency: String!
  description: String
  type: String!
}

type fee_refund {
  amount: Int!
  balance_transaction: Object
  created: Int!
  currency: String!
  fee: Object!
  id: String!
  metadata: Object
  object: String!
}

type file {
  created: Int!
  expires_at: Int
  filename: String
  id: String!
  links: Object
  object: String!
  purpose: String!
  size: Int!
  title: String
  type: String
  url: String
}

type file_link {
  created: Int!
  expired: Boolean!
  expires_at: Int
  file: Object!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  url: String
}

type financial_connections.account {
  account_holder: Object
  balance: Object
  balance_refresh: Object
  category: String!
  created: Int!
  display_name: String
  id: String!
  institution_name: String!
  last4: String
  livemode: Boolean!
  object: String!
  ownership: Object
  ownership_refresh: Object
  permissions: Array
  status: String!
  subcategory: String!
  subscriptions: Array
  supported_payment_method_types: Array!
  transaction_refresh: Object
}

type financial_connections.account_owner {
  email: String
  id: String!
  name: String!
  object: String!
  ownership: String!
  phone: String
  raw_address: String
  refreshed_at: Int
}

type financial_connections.account_ownership {
  created: Int!
  id: String!
  object: String!
  owners: Object!
}

type financial_connections.session {
  account_holder: Object
  accounts: Object!
  client_secret: String!
  filters: Object
  id: String!
  livemode: Boolean!
  object: String!
  permissions: Array!
  prefetch: Array
  return_url: String
}

type financial_connections.transaction {
  account: String!
  amount: Int!
  currency: String!
  description: String!
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  status_transitions: Object!
  transacted_at: Int!
  transaction_refresh: String!
  updated: Int!
}

type financial_reporting_finance_report_run_run_parameters {
  columns: Array
  connected_account: String
  currency: String
  interval_end: Int
  interval_start: Int
  payout: String
  reporting_category: String
  timezone: String
}

type forwarded_request_context {
  destination_duration: Int!
  destination_ip_address: String!
}

type forwarded_request_details {
  body: String!
  headers: Array!
  http_method: String!
}

type forwarded_request_header {
  name: String!
  value: String!
}

type forwarded_response_details {
  body: String!
  headers: Array!
  status: Int!
}

type forwarding.request {
  config: String!
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  payment_method: String!
  replacements: Array!
  request_context: Object
  request_details: Object
  response_details: Object
  url: String
}

type funding_instructions {
  bank_transfer: Object!
  currency: String!
  funding_type: String!
  livemode: Boolean!
  object: String!
}

type funding_instructions_bank_transfer {
  country: String!
  financial_addresses: Array!
  type: String!
}

type funding_instructions_bank_transfer_aba_record {
  account_number: String!
  bank_name: String!
  routing_number: String!
}

type funding_instructions_bank_transfer_financial_address {
  aba: Object
  iban: Object
  sort_code: Object
  spei: Object
  supported_networks: Array
  swift: Object
  type: String!
  zengin: Object
}

type funding_instructions_bank_transfer_iban_record {
  account_holder_name: String!
  bic: String!
  country: String!
  iban: String!
}

type funding_instructions_bank_transfer_sort_code_record {
  account_holder_name: String!
  account_number: String!
  sort_code: String!
}

type funding_instructions_bank_transfer_spei_record {
  bank_code: String!
  bank_name: String!
  clabe: String!
}

type funding_instructions_bank_transfer_swift_record {
  account_number: String!
  bank_name: String!
  swift_code: String!
}

type funding_instructions_bank_transfer_zengin_record {
  account_holder_name: String
  account_number: String
  account_type: String
  bank_code: String
  bank_name: String
  branch_code: String
  branch_name: String
}

type gelato_data_document_report_date_of_birth {
  day: Int
  month: Int
  year: Int
}

type gelato_data_document_report_expiration_date {
  day: Int
  month: Int
  year: Int
}

type gelato_data_document_report_issued_date {
  day: Int
  month: Int
  year: Int
}

type gelato_data_id_number_report_date {
  day: Int
  month: Int
  year: Int
}

type gelato_data_verified_outputs_date {
  day: Int
  month: Int
  year: Int
}

type gelato_document_report {
  address: Object
  dob: Object
  error: Object
  expiration_date: Object
  files: Array
  first_name: String
  issued_date: Object
  issuing_country: String
  last_name: String
  number: String
  status: String!
  type: String
}

type gelato_document_report_error {
  code: String
  reason: String
}

type gelato_id_number_report {
  dob: Object
  error: Object
  first_name: String
  id_number: String
  id_number_type: String
  last_name: String
  status: String!
}

type gelato_id_number_report_error {
  code: String
  reason: String
}

type gelato_report_document_options {
  allowed_types: Array
  require_id_number: Boolean
  require_live_capture: Boolean
  require_matching_selfie: Boolean
}

type gelato_selfie_report {
  document: String
  error: Object
  selfie: String
  status: String!
}

type gelato_selfie_report_error {
  code: String
  reason: String
}

type gelato_session_document_options {
  allowed_types: Array
  require_id_number: Boolean
  require_live_capture: Boolean
  require_matching_selfie: Boolean
}

type gelato_session_last_error {
  code: String
  reason: String
}

type gelato_verification_report_options {
  document: Object
  id_number: Object
}

type gelato_verification_session_options {
  document: Object
  id_number: Object
}

type gelato_verified_outputs {
  address: Object
  dob: Object
  first_name: String
  id_number: String
  id_number_type: String
  last_name: String
}

type identity.verification_report {
  client_reference_id: String
  created: Int!
  document: Object
  id: String!
  id_number: Object
  livemode: Boolean!
  object: String!
  options: Object
  selfie: Object
  type: String!
  verification_session: String
}

type identity.verification_session {
  client_reference_id: String
  client_secret: String
  created: Int!
  id: String!
  last_error: Object
  last_verification_report: Object
  livemode: Boolean!
  metadata: Object!
  object: String!
  options: Object
  redaction: Object
  status: String!
  type: String!
  url: String
  verified_outputs: Object
}

type inbound_transfers {
  billing_details: Object!
  type: String!
  us_bank_account: Object
}

type inbound_transfers_payment_method_details_us_bank_account {
  account_holder_type: String
  account_type: String
  bank_name: String
  fingerprint: String
  last4: String
  mandate: Object
  network: String!
  routing_number: String
}

type internal_card {
  brand: String
  country: String
  exp_month: Int
  exp_year: Int
  last4: String
}

type invoice {
  account_country: String
  account_name: String
  account_tax_ids: Array
  amount_due: Int!
  amount_paid: Int!
  amount_remaining: Int!
  amount_shipping: Int!
  application: Object
  application_fee_amount: Int
  attempt_count: Int!
  attempted: Boolean!
  auto_advance: Boolean
  automatic_tax: Object!
  billing_reason: String
  charge: Object
  collection_method: String!
  created: Int!
  currency: String!
  custom_fields: Array
  customer: Object
  customer_address: Object
  customer_email: String
  customer_name: String
  customer_phone: String
  customer_shipping: Object
  customer_tax_exempt: String
  customer_tax_ids: Array
  default_payment_method: Object
  default_source: Object
  default_tax_rates: Array!
  description: String
  discount: Object
  discounts: Array
  due_date: Int
  effective_at: Int
  ending_balance: Int
  footer: String
  from_invoice: Object
  hosted_invoice_url: String
  id: String
  invoice_pdf: String
  issuer: Object!
  last_finalization_error: Object
  latest_revision: Object
  lines: Object!
  livemode: Boolean!
  metadata: Object
  next_payment_attempt: Int
  number: String
  object: String!
  on_behalf_of: Object
  paid: Boolean!
  paid_out_of_band: Boolean!
  payment_intent: Object
  payment_settings: Object!
  period_end: Int!
  period_start: Int!
  post_payment_credit_notes_amount: Int!
  pre_payment_credit_notes_amount: Int!
  quote: Object
  receipt_number: String
  rendering: Object
  shipping_cost: Object
  shipping_details: Object
  starting_balance: Int!
  statement_descriptor: String
  status: String
  status_transitions: Object!
  subscription: Object
  subscription_details: Object
  subscription_proration_date: Int
  subtotal: Int!
  subtotal_excluding_tax: Int
  tax: Int
  test_clock: Object
  threshold_reason: Object
  total: Int!
  total_discount_amounts: Array
  total_excluding_tax: Int
  total_tax_amounts: Array!
  transfer_data: Object
  webhooks_delivered_at: Int
}

type invoice_installments_card {
  enabled: Boolean
}

type invoice_item_threshold_reason {
  line_item_ids: Array!
  usage_gte: Int!
}

type invoice_line_item_period {
  end: Int!
  start: Int!
}

type invoice_mandate_options_card {
  amount: Int
  amount_type: String
  description: String
}

type invoice_payment_method_options_acss_debit {
  mandate_options: Object
  verification_method: String
}

type invoice_payment_method_options_acss_debit_mandate_options {
  transaction_type: String
}

type invoice_payment_method_options_bancontact {
  preferred_language: String!
}

type invoice_payment_method_options_card {
  installments: Object
  request_three_d_secure: String
}

type invoice_payment_method_options_customer_balance {
  bank_transfer: Object
  funding_type: String
}

type invoice_payment_method_options_customer_balance_bank_transfer {
  eu_bank_transfer: Object
  type: String
}

type invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer {
  country: String!
}

type invoice_payment_method_options_us_bank_account {
  financial_connections: Object
  verification_method: String
}

type invoice_payment_method_options_us_bank_account_linked_account_options {
  permissions: Array
  prefetch: Array
}

type invoice_rendering_pdf {
  page_size: String
}

type invoice_setting_custom_field {
  name: String!
  value: String!
}

type invoice_setting_customer_setting {
  custom_fields: Array
  default_payment_method: Object
  footer: String
  rendering_options: Object
}

type invoice_setting_quote_setting {
  days_until_due: Int
  issuer: Object!
}

type invoice_setting_rendering_options {
  amount_tax_display: String
}

type invoice_setting_subscription_schedule_phase_setting {
  account_tax_ids: Array
  days_until_due: Int
  issuer: Object
}

type invoice_setting_subscription_schedule_setting {
  account_tax_ids: Array
  days_until_due: Int
  issuer: Object!
}

type invoice_tax_amount {
  amount: Int!
  inclusive: Boolean!
  tax_rate: Object!
  taxability_reason: String
  taxable_amount: Int
}

type invoice_threshold_reason {
  amount_gte: Int
  item_reasons: Array!
}

type invoice_transfer_data {
  amount: Int
  destination: Object!
}

type invoiceitem {
  amount: Int!
  currency: String!
  customer: Object!
  date: Int!
  description: String
  discountable: Boolean!
  discounts: Array
  id: String!
  invoice: Object
  livemode: Boolean!
  metadata: Object
  object: String!
  period: Object!
  price: Object
  proration: Boolean!
  quantity: Int!
  subscription: Object
  subscription_item: String
  tax_rates: Array
  test_clock: Object
  unit_amount: Int
  unit_amount_decimal: String
}

type invoices_payment_method_options {
  acss_debit: Object
  bancontact: Object
  card: Object
  customer_balance: Object
  konbini: Object
  sepa_debit: Object
  us_bank_account: Object
}

type invoices_payment_settings {
  default_mandate: String
  payment_method_options: Object
  payment_method_types: Array
}

type invoices_resource_from_invoice {
  action: String!
  invoice: Object!
}

type invoices_resource_invoice_rendering {
  amount_tax_display: String
  pdf: Object
}

type invoices_resource_invoice_tax_id {
  type: String!
  value: String
}

type invoices_resource_line_items_credited_items {
  invoice: String!
  invoice_line_items: Array!
}

type invoices_resource_line_items_proration_details {
  credited_items: Object
}

type invoices_resource_shipping_cost {
  amount_subtotal: Int!
  amount_tax: Int!
  amount_total: Int!
  shipping_rate: Object
  taxes: Array
}

type invoices_resource_status_transitions {
  finalized_at: Int
  marked_uncollectible_at: Int
  paid_at: Int
  voided_at: Int
}

type issuing.authorization {
  amount: Int!
  amount_details: Object
  approved: Boolean!
  authorization_method: String!
  balance_transactions: Array!
  card: Object!
  cardholder: Object
  created: Int!
  currency: String!
  id: String!
  livemode: Boolean!
  merchant_amount: Int!
  merchant_currency: String!
  merchant_data: Object!
  metadata: Object!
  network_data: Object
  object: String!
  pending_request: Object
  request_history: Array!
  status: String!
  token: Object
  transactions: Array!
  treasury: Object
  verification_data: Object!
  wallet: String
}

type issuing.card {
  brand: String!
  cancellation_reason: String
  cardholder: Object!
  created: Int!
  currency: String!
  cvc: String
  exp_month: Int!
  exp_year: Int!
  financial_account: String
  id: String!
  last4: String!
  livemode: Boolean!
  metadata: Object!
  number: String
  object: String!
  personalization_design: Object
  replaced_by: Object
  replacement_for: Object
  replacement_reason: String
  shipping: Object
  spending_controls: Object!
  status: String!
  type: String!
  wallets: Object
}

type issuing.cardholder {
  billing: Object!
  company: Object
  created: Int!
  email: String
  id: String!
  individual: Object
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
  phone_number: String
  preferred_locales: Array
  requirements: Object!
  spending_controls: Object
  status: String!
  type: String!
}

type issuing.dispute {
  amount: Int!
  balance_transactions: Array
  created: Int!
  currency: String!
  evidence: Object!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  status: String!
  transaction: Object!
  treasury: Object
}

type issuing.personalization_design {
  card_logo: Object
  carrier_text: Object
  created: Int!
  id: String!
  livemode: Boolean!
  lookup_key: String
  metadata: Object!
  name: String
  object: String!
  physical_bundle: Object!
  preferences: Object!
  rejection_reasons: Object!
  status: String!
}

type issuing.physical_bundle {
  features: Object
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  status: String!
  type: String!
}

type issuing.settlement {
  bin: String!
  clearing_date: Int!
  created: Int!
  currency: String!
  id: String!
  interchange_fees: Int!
  livemode: Boolean!
  metadata: Object!
  net_total: Int!
  network: String!
  network_fees: Int!
  network_settlement_identifier: String!
  object: String!
  settlement_service: String!
  transaction_count: Int!
  transaction_volume: Int!
}

type issuing.token {
  card: Object!
  created: Int!
  device_fingerprint: String
  id: String!
  last4: String
  livemode: Boolean!
  network: String!
  network_data: Object
  network_updated_at: Int!
  object: String!
  status: String!
  wallet_provider: String
}

type issuing.transaction {
  amount: Int!
  amount_details: Object
  authorization: Object
  balance_transaction: Object
  card: Object!
  cardholder: Object
  created: Int!
  currency: String!
  dispute: Object
  id: String!
  livemode: Boolean!
  merchant_amount: Int!
  merchant_currency: String!
  merchant_data: Object!
  metadata: Object!
  network_data: Object
  object: String!
  purchase_details: Object
  token: Object
  treasury: Object
  type: String!
  wallet: String
}

type issuing_authorization_amount_details {
  atm_fee: Int
  cashback_amount: Int
}

type issuing_authorization_authentication_exemption {
  claimed_by: String!
  type: String!
}

type issuing_authorization_merchant_data {
  category: String!
  category_code: String!
  city: String
  country: String
  name: String
  network_id: String!
  postal_code: String
  state: String
  terminal_id: String
  url: String
}

type issuing_authorization_network_data {
  acquiring_institution_id: String
  system_trace_audit_number: String
  transaction_id: String
}

type issuing_authorization_pending_request {
  amount: Int!
  amount_details: Object
  currency: String!
  is_amount_controllable: Boolean!
  merchant_amount: Int!
  merchant_currency: String!
  network_risk_score: Int
}

type issuing_authorization_request {
  amount: Int!
  amount_details: Object
  approved: Boolean!
  authorization_code: String
  created: Int!
  currency: String!
  merchant_amount: Int!
  merchant_currency: String!
  network_risk_score: Int
  reason: String!
  reason_message: String
  requested_at: Int
}

type issuing_authorization_three_d_secure {
  result: String!
}

type issuing_authorization_treasury {
  received_credits: Array!
  received_debits: Array!
  transaction: String
}

type issuing_authorization_verification_data {
  address_line1_check: String!
  address_postal_code_check: String!
  authentication_exemption: Object
  cvc_check: String!
  expiry_check: String!
  postal_code: String
  three_d_secure: Object
}

type issuing_card_apple_pay {
  eligible: Boolean!
  ineligible_reason: String
}

type issuing_card_authorization_controls {
  allowed_categories: Array
  blocked_categories: Array
  spending_limits: Array
  spending_limits_currency: String
}

type issuing_card_google_pay {
  eligible: Boolean!
  ineligible_reason: String
}

type issuing_card_shipping {
  address: Object!
  carrier: String
  customs: Object
  eta: Int
  name: String!
  phone_number: String
  require_signature: Boolean
  service: String!
  status: String
  tracking_number: String
  tracking_url: String
  type: String!
}

type issuing_card_shipping_customs {
  eori_number: String
}

type issuing_card_spending_limit {
  amount: Int!
  categories: Array
  interval: String!
}

type issuing_card_wallets {
  apple_pay: Object!
  google_pay: Object!
  primary_account_identifier: String
}

type issuing_cardholder_address {
  address: Object!
}

type issuing_cardholder_authorization_controls {
  allowed_categories: Array
  blocked_categories: Array
  spending_limits: Array
  spending_limits_currency: String
}

type issuing_cardholder_card_issuing {
  user_terms_acceptance: Object
}

type issuing_cardholder_company {
  tax_id_provided: Boolean!
}

type issuing_cardholder_id_document {
  back: Object
  front: Object
}

type issuing_cardholder_individual {
  card_issuing: Object
  dob: Object
  first_name: String
  last_name: String
  verification: Object
}

type issuing_cardholder_individual_dob {
  day: Int
  month: Int
  year: Int
}

type issuing_cardholder_requirements {
  disabled_reason: String
  past_due: Array
}

type issuing_cardholder_spending_limit {
  amount: Int!
  categories: Array
  interval: String!
}

type issuing_cardholder_user_terms_acceptance {
  date: Int
  ip: String
  user_agent: String
}

type issuing_cardholder_verification {
  document: Object
}

type issuing_dispute_canceled_evidence {
  additional_documentation: Object
  canceled_at: Int
  cancellation_policy_provided: Boolean
  cancellation_reason: String
  expected_at: Int
  explanation: String
  product_description: String
  product_type: String
  return_status: String
  returned_at: Int
}

type issuing_dispute_duplicate_evidence {
  additional_documentation: Object
  card_statement: Object
  cash_receipt: Object
  check_image: Object
  explanation: String
  original_transaction: String
}

type issuing_dispute_evidence {
  canceled: Object
  duplicate: Object
  fraudulent: Object
  merchandise_not_as_described: Object
  not_received: Object
  other: Object
  reason: String!
  service_not_as_described: Object
}

type issuing_dispute_fraudulent_evidence {
  additional_documentation: Object
  explanation: String
}

type issuing_dispute_merchandise_not_as_described_evidence {
  additional_documentation: Object
  explanation: String
  received_at: Int
  return_description: String
  return_status: String
  returned_at: Int
}

type issuing_dispute_not_received_evidence {
  additional_documentation: Object
  expected_at: Int
  explanation: String
  product_description: String
  product_type: String
}

type issuing_dispute_other_evidence {
  additional_documentation: Object
  explanation: String
  product_description: String
  product_type: String
}

type issuing_dispute_service_not_as_described_evidence {
  additional_documentation: Object
  canceled_at: Int
  cancellation_reason: String
  explanation: String
  received_at: Int
}

type issuing_dispute_treasury {
  debit_reversal: String
  received_debit: String!
}

type issuing_network_token_address {
  line1: String!
  postal_code: String!
}

type issuing_network_token_device {
  device_fingerprint: String
  ip_address: String
  location: String
  name: String
  phone_number: String
  type: String
}

type issuing_network_token_mastercard {
  card_reference_id: String
  token_reference_id: String!
  token_requestor_id: String!
  token_requestor_name: String
}

type issuing_network_token_network_data {
  device: Object
  mastercard: Object
  type: String!
  visa: Object
  wallet_provider: Object
}

type issuing_network_token_visa {
  card_reference_id: String!
  token_reference_id: String!
  token_requestor_id: String!
  token_risk_score: String
}

type issuing_network_token_wallet_provider {
  account_id: String
  account_trust_score: Int
  card_number_source: String
  cardholder_address: Object
  cardholder_name: String
  device_trust_score: Int
  hashed_account_email_address: String
  reason_codes: Array
  suggested_decision: String
  suggested_decision_version: String
}

type issuing_personalization_design_carrier_text {
  footer_body: String
  footer_title: String
  header_body: String
  header_title: String
}

type issuing_personalization_design_preferences {
  is_default: Boolean!
  is_platform_default: Boolean
}

type issuing_personalization_design_rejection_reasons {
  card_logo: Array
  carrier_text: Array
}

type issuing_physical_bundle_features {
  card_logo: String!
  carrier_text: String!
  second_line: String!
}

type issuing_transaction_amount_details {
  atm_fee: Int
  cashback_amount: Int
}

type issuing_transaction_flight_data {
  departure_at: Int
  passenger_name: String
  refundable: Boolean
  segments: Array
  travel_agency: String
}

type issuing_transaction_flight_data_leg {
  arrival_airport_code: String
  carrier: String
  departure_airport_code: String
  flight_number: String
  service_class: String
  stopover_allowed: Boolean
}

type issuing_transaction_fuel_data {
  type: String!
  unit: String!
  unit_cost_decimal: String!
  volume_decimal: String
}

type issuing_transaction_lodging_data {
  check_in_at: Int
  nights: Int
}

type issuing_transaction_network_data {
  authorization_code: String
  processing_date: String
  transaction_id: String
}

type issuing_transaction_purchase_details {
  flight: Object
  fuel: Object
  lodging: Object
  receipt: Array
  reference: String
}

type issuing_transaction_receipt_data {
  description: String
  quantity: Number
  total: Int
  unit_cost: Int
}

type issuing_transaction_treasury {
  received_credit: String
  received_debit: String
}

type item {
  amount_discount: Int!
  amount_subtotal: Int!
  amount_tax: Int!
  amount_total: Int!
  currency: String!
  description: String!
  discounts: Array
  id: String!
  object: String!
  price: Object
  quantity: Int
  taxes: Array
}

type legal_entity_company {
  address: Object
  address_kana: Object
  address_kanji: Object
  directors_provided: Boolean
  executives_provided: Boolean
  export_license_id: String
  export_purpose_code: String
  name: String
  name_kana: String
  name_kanji: String
  owners_provided: Boolean
  ownership_declaration: Object
  phone: String
  structure: String
  tax_id_provided: Boolean
  tax_id_registrar: String
  vat_id_provided: Boolean
  verification: Object
}

type legal_entity_company_verification {
  document: Object!
}

type legal_entity_company_verification_document {
  back: Object
  details: String
  details_code: String
  front: Object
}

type legal_entity_dob {
  day: Int
  month: Int
  year: Int
}

type legal_entity_japan_address {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
  town: String
}

type legal_entity_person_verification {
  additional_document: Object
  details: String
  details_code: String
  document: Object
  status: String!
}

type legal_entity_person_verification_document {
  back: Object
  details: String
  details_code: String
  front: Object
}

type legal_entity_ubo_declaration {
  date: Int
  ip: String
  user_agent: String
}

type line_item {
  amount: Int!
  amount_excluding_tax: Int
  currency: String!
  description: String
  discount_amounts: Array
  discountable: Boolean!
  discounts: Array
  id: String!
  invoice: String
  invoice_item: Object
  livemode: Boolean!
  metadata: Object!
  object: String!
  period: Object!
  price: Object
  proration: Boolean!
  proration_details: Object
  quantity: Int
  subscription: Object
  subscription_item: Object
  tax_amounts: Array
  tax_rates: Array
  type: String!
  unit_amount_excluding_tax: String
}

type line_items_discount_amount {
  amount: Int!
  discount: Object!
}

type line_items_tax_amount {
  amount: Int!
  rate: Object!
  taxability_reason: String
  taxable_amount: Int
}

type linked_account_options_us_bank_account {
  permissions: Array
  prefetch: Array
  return_url: String
}

type login_link {
  created: Int!
  object: String!
  url: String!
}

type mandate {
  customer_acceptance: Object!
  id: String!
  livemode: Boolean!
  multi_use: Object
  object: String!
  on_behalf_of: String
  payment_method: Object!
  payment_method_details: Object!
  single_use: Object
  status: String!
  type: String!
}

type mandate_acss_debit {
  default_for: Array
  interval_description: String
  payment_schedule: String!
  transaction_type: String!
}

type mandate_au_becs_debit {
  url: String!
}

type mandate_bacs_debit {
  network_status: String!
  reference: String!
  revocation_reason: String
  url: String!
}

type mandate_payment_method_details {
  acss_debit: Object
  au_becs_debit: Object
  bacs_debit: Object
  card: Object
  cashapp: Object
  link: Object
  paypal: Object
  sepa_debit: Object
  type: String!
  us_bank_account: Object
}

type mandate_paypal {
  billing_agreement_id: String
  payer_id: String
}

type mandate_sepa_debit {
  reference: String!
  url: String!
}

type mandate_single_use {
  amount: Int!
  currency: String!
}

type mandate_us_bank_account {
  collection_method: String
}

type networks {
  available: Array!
  preferred: String
}

type notification_event_data {
  object: Object!
  previous_attributes: Object
}

type notification_event_request {
  id: String
  idempotency_key: String
}

type online_acceptance {
  ip_address: String
  user_agent: String
}

type outbound_payments_payment_method_details {
  billing_details: Object!
  financial_account: Object
  type: String!
  us_bank_account: Object
}

type outbound_payments_payment_method_details_financial_account {
  id: String!
  network: String!
}

type outbound_payments_payment_method_details_us_bank_account {
  account_holder_type: String
  account_type: String
  bank_name: String
  fingerprint: String
  last4: String
  mandate: Object
  network: String!
  routing_number: String
}

type outbound_transfers_payment_method_details {
  billing_details: Object!
  type: String!
  us_bank_account: Object
}

type outbound_transfers_payment_method_details_us_bank_account {
  account_holder_type: String
  account_type: String
  bank_name: String
  fingerprint: String
  last4: String
  mandate: Object
  network: String!
  routing_number: String
}

type package_dimensions {
  height: Number!
  length: Number!
  weight: Number!
  width: Number!
}

type payment_flows_amount_details {
  tip: Object
}

type payment_flows_amount_details_resource_tip {
  amount: Int
}

type payment_flows_automatic_payment_methods_payment_intent {
  allow_redirects: String
  enabled: Boolean!
}

type payment_flows_automatic_payment_methods_setup_intent {
  allow_redirects: String
  enabled: Boolean
}

type payment_flows_installment_options {
  enabled: Boolean!
  plan: Object
}

type payment_flows_private_payment_methods_alipay_details {
  buyer_id: String
  fingerprint: String
  transaction_id: String
}

type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization {
  status: String!
}

type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization {
  status: String!
}

type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture {
  maximum_amount_capturable: Int!
  status: String!
}

type payment_flows_private_payment_methods_card_details_api_resource_multicapture {
  status: String!
}

type payment_flows_private_payment_methods_klarna_dob {
  day: Int
  month: Int
  year: Int
}

type payment_intent {
  amount: Int!
  amount_capturable: Int
  amount_details: Object
  amount_received: Int
  application: Object
  application_fee_amount: Int
  automatic_payment_methods: Object
  canceled_at: Int
  cancellation_reason: String
  capture_method: String!
  client_secret: String
  confirmation_method: String!
  created: Int!
  currency: String!
  customer: Object
  description: String
  id: String!
  invoice: Object
  last_payment_error: Object
  latest_charge: Object
  livemode: Boolean!
  metadata: Object
  next_action: Object
  object: String!
  on_behalf_of: Object
  payment_method: Object
  payment_method_configuration_details: Object
  payment_method_options: Object
  payment_method_types: Array!
  processing: Object
  receipt_email: String
  review: Object
  setup_future_usage: String
  shipping: Object
  statement_descriptor: String
  statement_descriptor_suffix: String
  status: String!
  transfer_data: Object
  transfer_group: String
}

type payment_intent_card_processing {
  customer_notification: Object
}

type payment_intent_next_action {
  alipay_handle_redirect: Object
  boleto_display_details: Object
  card_await_notification: Object
  cashapp_handle_redirect_or_display_qr_code: Object
  display_bank_transfer_instructions: Object
  konbini_display_details: Object
  oxxo_display_details: Object
  paynow_display_qr_code: Object
  pix_display_qr_code: Object
  promptpay_display_qr_code: Object
  redirect_to_url: Object
  swish_handle_redirect_or_display_qr_code: Object
  type: String!
  use_stripe_sdk: Object
  verify_with_microdeposits: Object
  wechat_pay_display_qr_code: Object
  wechat_pay_redirect_to_android_app: Object
  wechat_pay_redirect_to_ios_app: Object
}

type payment_intent_next_action_alipay_handle_redirect {
  native_data: String
  native_url: String
  return_url: String
  url: String
}

type payment_intent_next_action_boleto {
  expires_at: Int
  hosted_voucher_url: String
  number: String
  pdf: String
}

type payment_intent_next_action_card_await_notification {
  charge_attempt_at: Int
  customer_approval_required: Boolean
}

type payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code {
  hosted_instructions_url: String!
  mobile_auth_url: String!
  qr_code: Object!
}

type payment_intent_next_action_cashapp_qr_code {
  expires_at: Int!
  image_url_png: String!
  image_url_svg: String!
}

type payment_intent_next_action_display_bank_transfer_instructions {
  amount_remaining: Int
  currency: String
  financial_addresses: Array
  hosted_instructions_url: String
  reference: String
  type: String!
}

type payment_intent_next_action_display_oxxo_details {
  expires_after: Int
  hosted_voucher_url: String
  number: String
}

type payment_intent_next_action_konbini {
  expires_at: Int!
  hosted_voucher_url: String
  stores: Object!
}

type payment_intent_next_action_konbini_familymart {
  confirmation_number: String
  payment_code: String!
}

type payment_intent_next_action_konbini_lawson {
  confirmation_number: String
  payment_code: String!
}

type payment_intent_next_action_konbini_ministop {
  confirmation_number: String
  payment_code: String!
}

type payment_intent_next_action_konbini_seicomart {
  confirmation_number: String
  payment_code: String!
}

type payment_intent_next_action_konbini_stores {
  familymart: Object
  lawson: Object
  ministop: Object
  seicomart: Object
}

type payment_intent_next_action_paynow_display_qr_code {
  data: String!
  hosted_instructions_url: String
  image_url_png: String!
  image_url_svg: String!
}

type payment_intent_next_action_pix_display_qr_code {
  data: String
  expires_at: Int
  hosted_instructions_url: String
  image_url_png: String
  image_url_svg: String
}

type payment_intent_next_action_promptpay_display_qr_code {
  data: String!
  hosted_instructions_url: String!
  image_url_png: String!
  image_url_svg: String!
}

type payment_intent_next_action_redirect_to_url {
  return_url: String
  url: String
}

type payment_intent_next_action_swish_handle_redirect_or_display_qr_code {
  hosted_instructions_url: String
  qr_code: Object
}

type payment_intent_next_action_swish_qr_code {
  data: String
  image_url_png: String
  image_url_svg: String
}

type payment_intent_next_action_verify_with_microdeposits {
  arrival_date: Int!
  hosted_verification_url: String!
  microdeposit_type: String
}

type payment_intent_next_action_wechat_pay_display_qr_code {
  data: String!
  hosted_instructions_url: String!
  image_data_url: String!
  image_url_png: String!
  image_url_svg: String!
}

type payment_intent_next_action_wechat_pay_redirect_to_android_app {
  app_id: String!
  nonce_str: String!
  package: String!
  partner_id: String!
  prepay_id: String!
  sign: String!
  timestamp: String!
}

type payment_intent_next_action_wechat_pay_redirect_to_ios_app {
  native_url: String!
}

type payment_intent_payment_method_options {
  acss_debit: Object
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  blik: Object
  boleto: Object
  card: Object
  card_present: Object
  cashapp: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  interac_present: Object
  klarna: Object
  konbini: Object
  link: Object
  mobilepay: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  swish: Object
  us_bank_account: Object
  wechat_pay: Object
  zip: Object
}

type payment_intent_payment_method_options_acss_debit {
  mandate_options: Object
  setup_future_usage: String
  verification_method: String
}

type payment_intent_payment_method_options_au_becs_debit {
  setup_future_usage: String
}

type payment_intent_payment_method_options_blik {
  setup_future_usage: String
}

type payment_intent_payment_method_options_card {
  capture_method: String
  installments: Object
  mandate_options: Object
  network: String
  request_extended_authorization: String
  request_incremental_authorization: String
  request_multicapture: String
  request_overcapture: String
  request_three_d_secure: String
  require_cvc_recollection: Boolean
  setup_future_usage: String
  statement_descriptor_suffix_kana: String
  statement_descriptor_suffix_kanji: String
}

type payment_intent_payment_method_options_eps {
  setup_future_usage: String
}

type payment_intent_payment_method_options_link {
  capture_method: String
  setup_future_usage: String
}

type payment_intent_payment_method_options_mandate_options_acss_debit {
  custom_mandate_url: String
  interval_description: String
  payment_schedule: String
  transaction_type: String
}

type payment_intent_payment_method_options_mobilepay {
  capture_method: String
  setup_future_usage: String
}

type payment_intent_payment_method_options_sepa_debit {
  mandate_options: Object
  setup_future_usage: String
}

type payment_intent_payment_method_options_swish {
  reference: String
  setup_future_usage: String
}

type payment_intent_payment_method_options_us_bank_account {
  financial_connections: Object
  mandate_options: Object
  preferred_settlement_speed: String
  setup_future_usage: String
  verification_method: String
}

type payment_intent_processing {
  card: Object
  type: String!
}

type payment_intent_processing_customer_notification {
  approval_requested: Boolean
  completes_at: Int
}

type payment_intent_type_specific_payment_method_options_client {
  capture_method: String
  installments: Object
  require_cvc_recollection: Boolean
  setup_future_usage: String
  verification_method: String
}

type payment_link {
  active: Boolean!
  after_completion: Object!
  allow_promotion_codes: Boolean!
  application: Object
  application_fee_amount: Int
  application_fee_percent: Number
  automatic_tax: Object!
  billing_address_collection: String!
  consent_collection: Object
  currency: String!
  custom_fields: Array!
  custom_text: Object!
  customer_creation: String!
  id: String!
  inactive_message: String
  invoice_creation: Object
  line_items: Object
  livemode: Boolean!
  metadata: Object!
  object: String!
  on_behalf_of: Object
  payment_intent_data: Object
  payment_method_collection: String!
  payment_method_types: Array
  phone_number_collection: Object!
  restrictions: Object
  shipping_address_collection: Object
  shipping_options: Array!
  submit_type: String!
  subscription_data: Object
  tax_id_collection: Object!
  transfer_data: Object
  url: String!
}

type payment_links_resource_after_completion {
  hosted_confirmation: Object
  redirect: Object
  type: String!
}

type payment_links_resource_automatic_tax {
  enabled: Boolean!
  liability: Object
}

type payment_links_resource_completed_sessions {
  count: Int!
  limit: Int!
}

type payment_links_resource_completion_behavior_confirmation_page {
  custom_message: String
}

type payment_links_resource_completion_behavior_redirect {
  url: String!
}

type payment_links_resource_consent_collection {
  payment_method_reuse_agreement: Object
  promotions: String
  terms_of_service: String
}

type payment_links_resource_custom_fields {
  dropdown: Object
  key: String!
  label: Object!
  numeric: Object
  optional: Boolean!
  text: Object
  type: String!
}

type payment_links_resource_custom_fields_dropdown {
  options: Array!
}

type payment_links_resource_custom_fields_dropdown_option {
  label: String!
  value: String!
}

type payment_links_resource_custom_fields_label {
  custom: String
  type: String!
}

type payment_links_resource_custom_fields_numeric {
  maximum_length: Int
  minimum_length: Int
}

type payment_links_resource_custom_fields_text {
  maximum_length: Int
  minimum_length: Int
}

type payment_links_resource_custom_text {
  after_submit: Object
  shipping_address: Object
  submit: Object
  terms_of_service_acceptance: Object
}

type payment_links_resource_custom_text_position {
  message: String!
}

type payment_links_resource_invoice_creation {
  enabled: Boolean!
  invoice_data: Object
}

type payment_links_resource_invoice_settings {
  account_tax_ids: Array
  custom_fields: Array
  description: String
  footer: String
  issuer: Object
  metadata: Object
  rendering_options: Object
}

type payment_links_resource_payment_intent_data {
  capture_method: String
  description: String
  metadata: Object!
  setup_future_usage: String
  statement_descriptor: String
  statement_descriptor_suffix: String
  transfer_group: String
}

type payment_links_resource_payment_method_reuse_agreement {
  position: String!
}

type payment_links_resource_phone_number_collection {
  enabled: Boolean!
}

type payment_links_resource_restrictions {
  completed_sessions: Object!
}

type payment_links_resource_shipping_address_collection {
  allowed_countries: Array!
}

type payment_links_resource_shipping_option {
  shipping_amount: Int!
  shipping_rate: Object!
}

type payment_links_resource_subscription_data {
  description: String
  invoice_settings: Object!
  metadata: Object!
  trial_period_days: Int
  trial_settings: Object
}

type payment_links_resource_subscription_data_invoice_settings {
  issuer: Object!
}

type payment_links_resource_tax_id_collection {
  enabled: Boolean!
}

type payment_links_resource_transfer_data {
  amount: Int
  destination: Object!
}

type payment_method {
  acss_debit: Object
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  billing_details: Object!
  blik: Object
  boleto: Object
  card: Object
  card_present: Object
  cashapp: Object
  created: Int!
  customer: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  id: String!
  ideal: Object
  interac_present: Object
  klarna: Object
  konbini: Object
  link: Object
  livemode: Boolean!
  metadata: Object
  mobilepay: Object
  object: String!
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  radar_options: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  swish: Object
  type: String!
  us_bank_account: Object
  wechat_pay: Object
  zip: Object
}

type payment_method_acss_debit {
  bank_name: String
  fingerprint: String
  institution_number: String
  last4: String
  transit_number: String
}

type payment_method_au_becs_debit {
  bsb_number: String
  fingerprint: String
  last4: String
}

type payment_method_bacs_debit {
  fingerprint: String
  last4: String
  sort_code: String
}

type payment_method_boleto {
  tax_id: String!
}

type payment_method_card {
  brand: String!
  checks: Object
  country: String
  display_brand: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String!
  generated_from: Object
  last4: String!
  networks: Object
  three_d_secure_usage: Object
  wallet: Object
}

type payment_method_card_checks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

type payment_method_card_generated_card {
  charge: String
  payment_method_details: Object
  setup_attempt: Object
}

type payment_method_card_present {
  brand: String
  cardholder_name: String
  country: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String
  last4: String
  networks: Object
  read_method: String
}

type payment_method_card_present_networks {
  available: Array!
  preferred: String
}

type payment_method_card_wallet {
  amex_express_checkout: Object
  apple_pay: Object
  dynamic_last4: String
  google_pay: Object
  link: Object
  masterpass: Object
  samsung_pay: Object
  type: String!
  visa_checkout: Object
}

type payment_method_card_wallet_masterpass {
  billing_address: Object
  email: String
  name: String
  shipping_address: Object
}

type payment_method_card_wallet_visa_checkout {
  billing_address: Object
  email: String
  name: String
  shipping_address: Object
}

type payment_method_cashapp {
  buyer_id: String
  cashtag: String
}

type payment_method_config_biz_payment_method_configuration_details {
  id: String!
  parent: String
}

type payment_method_config_resource_display_preference {
  overridable: Boolean
  preference: String!
  value: String!
}

type payment_method_config_resource_payment_method_properties {
  available: Boolean!
  display_preference: Object!
}

type payment_method_configuration {
  acss_debit: Object
  active: Boolean!
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  apple_pay: Object
  application: String
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  blik: Object
  boleto: Object
  card: Object
  cartes_bancaires: Object
  cashapp: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  google_pay: Object
  grabpay: Object
  id: String!
  ideal: Object
  is_default: Boolean!
  jcb: Object
  klarna: Object
  konbini: Object
  link: Object
  livemode: Boolean!
  name: String!
  object: String!
  oxxo: Object
  p24: Object
  parent: String
  paynow: Object
  paypal: Object
  promptpay: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  us_bank_account: Object
  wechat_pay: Object
}

type payment_method_details {
  ach_credit_transfer: Object
  ach_debit: Object
  acss_debit: Object
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  blik: Object
  boleto: Object
  card: Object
  card_present: Object
  cashapp: Object
  customer_balance: Object
  eps: Object
  fpx: Object
  giropay: Object
  grabpay: Object
  ideal: Object
  interac_present: Object
  klarna: Object
  konbini: Object
  link: Object
  mobilepay: Object
  multibanco: Object
  oxxo: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  promptpay: Object
  revolut_pay: Object
  sepa_debit: Object
  sofort: Object
  stripe_account: Object
  swish: Object
  type: String!
  us_bank_account: Object
  wechat: Object
  wechat_pay: Object
  zip: Object
}

type payment_method_details_ach_credit_transfer {
  account_number: String
  bank_name: String
  routing_number: String
  swift_code: String
}

type payment_method_details_ach_debit {
  account_holder_type: String
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

type payment_method_details_acss_debit {
  bank_name: String
  fingerprint: String
  institution_number: String
  last4: String
  mandate: String
  transit_number: String
}

type payment_method_details_afterpay_clearpay {
  order_id: String
  reference: String
}

type payment_method_details_au_becs_debit {
  bsb_number: String
  fingerprint: String
  last4: String
  mandate: String
}

type payment_method_details_bacs_debit {
  fingerprint: String
  last4: String
  mandate: String
  sort_code: String
}

type payment_method_details_bancontact {
  bank_code: String
  bank_name: String
  bic: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  preferred_language: String
  verified_name: String
}

type payment_method_details_boleto {
  tax_id: String!
}

type payment_method_details_card {
  amount_authorized: Int
  brand: String
  capture_before: Int
  checks: Object
  country: String
  exp_month: Int!
  exp_year: Int!
  extended_authorization: Object
  fingerprint: String
  funding: String
  incremental_authorization: Object
  installments: Object
  last4: String
  mandate: String
  multicapture: Object
  network: String
  network_token: Object
  overcapture: Object
  three_d_secure: Object
  wallet: Object
}

type payment_method_details_card_checks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

type payment_method_details_card_installments {
  plan: Object
}

type payment_method_details_card_installments_plan {
  count: Int
  interval: String
  type: String!
}

type payment_method_details_card_network_token {
  used: Boolean!
}

type payment_method_details_card_present {
  amount_authorized: Int
  brand: String
  capture_before: Int
  cardholder_name: String
  country: String
  emv_auth_data: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String
  generated_card: String
  incremental_authorization_supported: Boolean!
  last4: String
  network: String
  offline: Object
  overcapture_supported: Boolean!
  read_method: String
  receipt: Object
}

type payment_method_details_card_present_offline {
  stored_at: Int
}

type payment_method_details_card_present_receipt {
  account_type: String
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  cardholder_verification_method: String
  dedicated_file_name: String
  terminal_verification_results: String
  transaction_status_information: String
}

type payment_method_details_card_wallet {
  amex_express_checkout: Object
  apple_pay: Object
  dynamic_last4: String
  google_pay: Object
  link: Object
  masterpass: Object
  samsung_pay: Object
  type: String!
  visa_checkout: Object
}

type payment_method_details_card_wallet_masterpass {
  billing_address: Object
  email: String
  name: String
  shipping_address: Object
}

type payment_method_details_card_wallet_visa_checkout {
  billing_address: Object
  email: String
  name: String
  shipping_address: Object
}

type payment_method_details_cashapp {
  buyer_id: String
  cashtag: String
}

type payment_method_details_eps {
  bank: String
  verified_name: String
}

type payment_method_details_fpx {
  bank: String!
  transaction_id: String
}

type payment_method_details_giropay {
  bank_code: String
  bank_name: String
  bic: String
  verified_name: String
}

type payment_method_details_grabpay {
  transaction_id: String
}

type payment_method_details_ideal {
  bank: String
  bic: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  verified_name: String
}

type payment_method_details_interac_present {
  brand: String
  cardholder_name: String
  country: String
  emv_auth_data: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String
  generated_card: String
  last4: String
  network: String
  preferred_locales: Array
  read_method: String
  receipt: Object
}

type payment_method_details_interac_present_receipt {
  account_type: String
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  cardholder_verification_method: String
  dedicated_file_name: String
  terminal_verification_results: String
  transaction_status_information: String
}

type payment_method_details_klarna {
  payment_method_category: String
  preferred_locale: String
}

type payment_method_details_konbini {
  store: Object
}

type payment_method_details_konbini_store {
  chain: String
}

type payment_method_details_link {
  country: String
}

type payment_method_details_mobilepay {
  card: Object
}

type payment_method_details_multibanco {
  entity: String
  reference: String
}

type payment_method_details_oxxo {
  number: String
}

type payment_method_details_p24 {
  bank: String
  reference: String
  verified_name: String
}

type payment_method_details_paynow {
  reference: String
}

type payment_method_details_paypal {
  payer_email: String
  payer_id: String
  payer_name: String
  seller_protection: Object
  transaction_id: String
}

type payment_method_details_pix {
  bank_transaction_id: String
}

type payment_method_details_promptpay {
  reference: String
}

type payment_method_details_sepa_debit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate: String
}

type payment_method_details_sofort {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  preferred_language: String
  verified_name: String
}

type payment_method_details_swish {
  fingerprint: String
  payment_reference: String
  verified_phone_last4: String
}

type payment_method_details_us_bank_account {
  account_holder_type: String
  account_type: String
  bank_name: String
  fingerprint: String
  last4: String
  mandate: Object
  payment_reference: String
  routing_number: String
}

type payment_method_details_wechat_pay {
  fingerprint: String
  transaction_id: String
}

type payment_method_domain {
  apple_pay: Object!
  created: Int!
  domain_name: String!
  enabled: Boolean!
  google_pay: Object!
  id: String!
  link: Object!
  livemode: Boolean!
  object: String!
  paypal: Object!
}

type payment_method_domain_resource_payment_method_status {
  status: String!
  status_details: Object
}

type payment_method_domain_resource_payment_method_status_details {
  error_message: String!
}

type payment_method_eps {
  bank: String
}

type payment_method_fpx {
  bank: String!
}

type payment_method_ideal {
  bank: String
  bic: String
}

type payment_method_interac_present {
  brand: String
  cardholder_name: String
  country: String
  exp_month: Int!
  exp_year: Int!
  fingerprint: String
  funding: String
  last4: String
  networks: Object
  preferred_locales: Array
  read_method: String
}

type payment_method_klarna {
  dob: Object
}

type payment_method_link {
  email: String
}

type payment_method_options_affirm {
  capture_method: String
  preferred_locale: String
  setup_future_usage: String
}

type payment_method_options_afterpay_clearpay {
  capture_method: String
  reference: String
  setup_future_usage: String
}

type payment_method_options_alipay {
  setup_future_usage: String
}

type payment_method_options_bacs_debit {
  setup_future_usage: String
}

type payment_method_options_bancontact {
  preferred_language: String!
  setup_future_usage: String
}

type payment_method_options_boleto {
  expires_after_days: Int!
  setup_future_usage: String
}

type payment_method_options_card_installments {
  available_plans: Array
  enabled: Boolean!
  plan: Object
}

type payment_method_options_card_mandate_options {
  amount: Int!
  amount_type: String!
  description: String
  end_date: Int
  interval: String!
  interval_count: Int
  reference: String!
  start_date: Int!
  supported_types: Array
}

type payment_method_options_card_present {
  request_extended_authorization: Boolean
  request_incremental_authorization_support: Boolean
}

type payment_method_options_cashapp {
  capture_method: String
  setup_future_usage: String
}

type payment_method_options_customer_balance {
  bank_transfer: Object
  funding_type: String
  setup_future_usage: String
}

type payment_method_options_customer_balance_bank_transfer {
  eu_bank_transfer: Object
  requested_address_types: Array
  type: String
}

type payment_method_options_customer_balance_eu_bank_account {
  country: String!
}

type payment_method_options_fpx {
  setup_future_usage: String
}

type payment_method_options_giropay {
  setup_future_usage: String
}

type payment_method_options_grabpay {
  setup_future_usage: String
}

type payment_method_options_ideal {
  setup_future_usage: String
}

type payment_method_options_klarna {
  capture_method: String
  preferred_locale: String
  setup_future_usage: String
}

type payment_method_options_konbini {
  confirmation_number: String
  expires_after_days: Int
  expires_at: Int
  product_description: String
  setup_future_usage: String
}

type payment_method_options_oxxo {
  expires_after_days: Int!
  setup_future_usage: String
}

type payment_method_options_p24 {
  setup_future_usage: String
}

type payment_method_options_paynow {
  setup_future_usage: String
}

type payment_method_options_paypal {
  capture_method: String
  preferred_locale: String
  reference: String
  setup_future_usage: String
}

type payment_method_options_pix {
  expires_after_seconds: Int
  expires_at: Int
  setup_future_usage: String
}

type payment_method_options_promptpay {
  setup_future_usage: String
}

type payment_method_options_sofort {
  preferred_language: String
  setup_future_usage: String
}

type payment_method_options_us_bank_account_mandate_options {
  collection_method: String
}

type payment_method_options_wechat_pay {
  app_id: String
  client: String
  setup_future_usage: String
}

type payment_method_options_zip {
  setup_future_usage: String
}

type payment_method_p24 {
  bank: String
}

type payment_method_paypal {
  payer_email: String
  payer_id: String
}

type payment_method_sepa_debit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  generated_from: Object
  last4: String
}

type payment_method_sofort {
  country: String
}

type payment_method_us_bank_account {
  account_holder_type: String
  account_type: String
  bank_name: String
  financial_connections_account: String
  fingerprint: String
  last4: String
  networks: Object
  routing_number: String
  status_details: Object
}

type payment_method_us_bank_account_blocked {
  network_code: String
  reason: String
}

type payment_method_us_bank_account_status_details {
  blocked: Object
}

type payment_pages_checkout_session_after_expiration {
  recovery: Object
}

type payment_pages_checkout_session_after_expiration_recovery {
  allow_promotion_codes: Boolean!
  enabled: Boolean!
  expires_at: Int
  url: String
}

type payment_pages_checkout_session_automatic_tax {
  enabled: Boolean!
  liability: Object
  status: String
}

type payment_pages_checkout_session_consent {
  promotions: String
  terms_of_service: String
}

type payment_pages_checkout_session_consent_collection {
  payment_method_reuse_agreement: Object
  promotions: String
  terms_of_service: String
}

type payment_pages_checkout_session_currency_conversion {
  amount_subtotal: Int!
  amount_total: Int!
  fx_rate: String!
  source_currency: String!
}

type payment_pages_checkout_session_custom_fields {
  dropdown: Object
  key: String!
  label: Object!
  numeric: Object
  optional: Boolean!
  text: Object
  type: String!
}

type payment_pages_checkout_session_custom_fields_dropdown {
  options: Array!
  value: String
}

type payment_pages_checkout_session_custom_fields_label {
  custom: String
  type: String!
}

type payment_pages_checkout_session_custom_fields_numeric {
  maximum_length: Int
  minimum_length: Int
  value: String
}

type payment_pages_checkout_session_custom_fields_option {
  label: String!
  value: String!
}

type payment_pages_checkout_session_custom_fields_text {
  maximum_length: Int
  minimum_length: Int
  value: String
}

type payment_pages_checkout_session_custom_text {
  after_submit: Object
  shipping_address: Object
  submit: Object
  terms_of_service_acceptance: Object
}

type payment_pages_checkout_session_custom_text_position {
  message: String!
}

type payment_pages_checkout_session_customer_details {
  address: Object
  email: String
  name: String
  phone: String
  tax_exempt: String
  tax_ids: Array
}

type payment_pages_checkout_session_invoice_creation {
  enabled: Boolean!
  invoice_data: Object!
}

type payment_pages_checkout_session_invoice_settings {
  account_tax_ids: Array
  custom_fields: Array
  description: String
  footer: String
  issuer: Object
  metadata: Object
  rendering_options: Object
}

type payment_pages_checkout_session_payment_method_reuse_agreement {
  position: String!
}

type payment_pages_checkout_session_phone_number_collection {
  enabled: Boolean!
}

type payment_pages_checkout_session_shipping_address_collection {
  allowed_countries: Array!
}

type payment_pages_checkout_session_shipping_cost {
  amount_subtotal: Int!
  amount_tax: Int!
  amount_total: Int!
  shipping_rate: Object
  taxes: Array
}

type payment_pages_checkout_session_shipping_option {
  shipping_amount: Int!
  shipping_rate: Object!
}

type payment_pages_checkout_session_tax_id {
  type: String!
  value: String
}

type payment_pages_checkout_session_tax_id_collection {
  enabled: Boolean!
}

type payment_pages_checkout_session_total_details {
  amount_discount: Int!
  amount_shipping: Int
  amount_tax: Int!
  breakdown: Object
}

type payment_pages_checkout_session_total_details_resource_breakdown {
  discounts: Array!
  taxes: Array!
}

type payout {
  amount: Int!
  arrival_date: Int!
  automatic: Boolean!
  balance_transaction: Object
  created: Int!
  currency: String!
  description: String
  destination: Object
  failure_balance_transaction: Object
  failure_code: String
  failure_message: String
  id: String!
  livemode: Boolean!
  metadata: Object
  method: String!
  object: String!
  original_payout: Object
  reconciliation_status: String!
  reversed_by: Object
  source_type: String!
  statement_descriptor: String
  status: String!
  type: String!
}

type paypal_seller_protection {
  dispute_categories: Array
  status: String!
}

type period {
  end: Int
  start: Int
}

type person {
  account: String!
  additional_tos_acceptances: Object
  address: Object
  address_kana: Object
  address_kanji: Object
  created: Int!
  dob: Object
  email: String
  first_name: String
  first_name_kana: String
  first_name_kanji: String
  full_name_aliases: Array
  future_requirements: Object
  gender: String
  id: String!
  id_number_provided: Boolean
  id_number_secondary_provided: Boolean
  last_name: String
  last_name_kana: String
  last_name_kanji: String
  maiden_name: String
  metadata: Object
  nationality: String
  object: String!
  phone: String
  political_exposure: String
  registered_address: Object
  relationship: Object
  requirements: Object
  ssn_last_4_provided: Boolean
  verification: Object
}

type person_additional_tos_acceptance {
  date: Int
  ip: String
  user_agent: String
}

type person_additional_tos_acceptances {
  account: Object!
}

type person_future_requirements {
  alternatives: Array
  currently_due: Array!
  errors: Array!
  eventually_due: Array!
  past_due: Array!
  pending_verification: Array!
}

type person_relationship {
  director: Boolean
  executive: Boolean
  legal_guardian: Boolean
  owner: Boolean
  percent_ownership: Number
  representative: Boolean
  title: String
}

type person_requirements {
  alternatives: Array
  currently_due: Array!
  errors: Array!
  eventually_due: Array!
  past_due: Array!
  pending_verification: Array!
}

type plan {
  active: Boolean!
  aggregate_usage: String
  amount: Int
  amount_decimal: String
  billing_scheme: String!
  created: Int!
  currency: String!
  id: String!
  interval: String!
  interval_count: Int!
  livemode: Boolean!
  metadata: Object
  meter: String
  nickname: String
  object: String!
  product: Object
  tiers: Array
  tiers_mode: String
  transform_usage: Object
  trial_period_days: Int
  usage_type: String!
}

type plan_tier {
  flat_amount: Int
  flat_amount_decimal: String
  unit_amount: Int
  unit_amount_decimal: String
  up_to: Int
}

type platform_tax_fee {
  account: String!
  id: String!
  object: String!
  source_transaction: String!
  type: String!
}

type portal_business_profile {
  headline: String
  privacy_policy_url: String
  terms_of_service_url: String
}

type portal_customer_update {
  allowed_updates: Array!
  enabled: Boolean!
}

type portal_features {
  customer_update: Object!
  invoice_history: Object!
  payment_method_update: Object!
  subscription_cancel: Object!
  subscription_pause: Object!
  subscription_update: Object!
}

type portal_flows_after_completion_hosted_confirmation {
  custom_message: String
}

type portal_flows_after_completion_redirect {
  return_url: String!
}

type portal_flows_coupon_offer {
  coupon: String!
}

type portal_flows_flow {
  after_completion: Object!
  subscription_cancel: Object
  subscription_update: Object
  subscription_update_confirm: Object
  type: String!
}

type portal_flows_flow_after_completion {
  hosted_confirmation: Object
  redirect: Object
  type: String!
}

type portal_flows_flow_subscription_cancel {
  retention: Object
  subscription: String!
}

type portal_flows_flow_subscription_update {
  subscription: String!
}

type portal_flows_flow_subscription_update_confirm {
  discounts: Array
  items: Array!
  subscription: String!
}

type portal_flows_retention {
  coupon_offer: Object
  type: String!
}

type portal_flows_subscription_update_confirm_discount {
  coupon: String
  promotion_code: String
}

type portal_flows_subscription_update_confirm_item {
  id: String
  price: String
  quantity: Int
}

type portal_invoice_list {
  enabled: Boolean!
}

type portal_login_page {
  enabled: Boolean!
  url: String
}

type portal_payment_method_update {
  enabled: Boolean!
}

type portal_subscription_cancel {
  cancellation_reason: Object!
  enabled: Boolean!
  mode: String!
  proration_behavior: String!
}

type portal_subscription_cancellation_reason {
  enabled: Boolean!
  options: Array!
}

type portal_subscription_pause {
  enabled: Boolean!
}

type portal_subscription_update {
  default_allowed_updates: Array!
  enabled: Boolean!
  products: Array
  proration_behavior: String!
}

type portal_subscription_update_product {
  prices: Array!
  product: String!
}

type price {
  active: Boolean!
  billing_scheme: String!
  created: Int!
  currency: String!
  currency_options: Object
  custom_unit_amount: Object
  id: String!
  livemode: Boolean!
  lookup_key: String
  metadata: Object!
  nickname: String
  object: String!
  product: Object!
  recurring: Object
  tax_behavior: String
  tiers: Array
  tiers_mode: String
  transform_quantity: Object
  type: String!
  unit_amount: Int
  unit_amount_decimal: String
}

type price_tier {
  flat_amount: Int
  flat_amount_decimal: String
  unit_amount: Int
  unit_amount_decimal: String
  up_to: Int
}

type product {
  active: Boolean!
  created: Int!
  default_price: Object
  description: String
  features: Array!
  id: String!
  images: Array!
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
  package_dimensions: Object
  shippable: Boolean
  statement_descriptor: String
  tax_code: Object
  unit_label: String
  updated: Int!
  url: String
}

type product_marketing_feature {
  name: String
}

type promotion_code {
  active: Boolean!
  code: String!
  coupon: Object!
  created: Int!
  customer: Object
  expires_at: Int
  id: String!
  livemode: Boolean!
  max_redemptions: Int
  metadata: Object
  object: String!
  restrictions: Object!
  times_redeemed: Int!
}

type promotion_code_currency_option {
  minimum_amount: Int!
}

type promotion_codes_resource_restrictions {
  currency_options: Object
  first_time_transaction: Boolean!
  minimum_amount: Int
  minimum_amount_currency: String
}

type quote {
  amount_subtotal: Int!
  amount_total: Int!
  application: Object
  application_fee_amount: Int
  application_fee_percent: Number
  automatic_tax: Object!
  collection_method: String!
  computed: Object!
  created: Int!
  currency: String
  customer: Object
  default_tax_rates: Array
  description: String
  discounts: Array!
  expires_at: Int!
  footer: String
  from_quote: Object
  header: String
  id: String!
  invoice: Object
  invoice_settings: Object!
  line_items: Object
  livemode: Boolean!
  metadata: Object!
  number: String
  object: String!
  on_behalf_of: Object
  status: String!
  status_transitions: Object!
  subscription: Object
  subscription_data: Object!
  subscription_schedule: Object
  test_clock: Object
  total_details: Object!
  transfer_data: Object
}

type quotes_resource_automatic_tax {
  enabled: Boolean!
  liability: Object
  status: String
}

type quotes_resource_computed {
  recurring: Object
  upfront: Object!
}

type quotes_resource_from_quote {
  is_revision: Boolean!
  quote: Object!
}

type quotes_resource_recurring {
  amount_subtotal: Int!
  amount_total: Int!
  interval: String!
  interval_count: Int!
  total_details: Object!
}

type quotes_resource_status_transitions {
  accepted_at: Int
  canceled_at: Int
  finalized_at: Int
}

type quotes_resource_subscription_data_subscription_data {
  description: String
  effective_date: Int
  metadata: Object
  trial_period_days: Int
}

type quotes_resource_total_details {
  amount_discount: Int!
  amount_shipping: Int
  amount_tax: Int!
  breakdown: Object
}

type quotes_resource_total_details_resource_breakdown {
  discounts: Array!
  taxes: Array!
}

type quotes_resource_transfer_data {
  amount: Int
  amount_percent: Number
  destination: Object!
}

type quotes_resource_upfront {
  amount_subtotal: Int!
  amount_total: Int!
  line_items: Object
  total_details: Object!
}

type radar.early_fraud_warning {
  actionable: Boolean!
  charge: Object!
  created: Int!
  fraud_type: String!
  id: String!
  livemode: Boolean!
  object: String!
  payment_intent: Object
}

type radar.value_list {
  alias: String!
  created: Int!
  created_by: String!
  id: String!
  item_type: String!
  list_items: Object!
  livemode: Boolean!
  metadata: Object!
  name: String!
  object: String!
}

type radar.value_list_item {
  created: Int!
  created_by: String!
  id: String!
  livemode: Boolean!
  object: String!
  value: String!
  value_list: String!
}

type radar_radar_options {
  session: String
}

type radar_review_resource_location {
  city: String
  country: String
  latitude: Number
  longitude: Number
  region: String
}

type radar_review_resource_session {
  browser: String
  device: String
  platform: String
  version: String
}

type received_payment_method_details_financial_account {
  id: String!
  network: String!
}

type recurring {
  aggregate_usage: String
  interval: String!
  interval_count: Int!
  meter: String
  usage_type: String!
}

type refund {
  amount: Int!
  balance_transaction: Object
  charge: Object
  created: Int!
  currency: String!
  description: String
  destination_details: Object
  failure_balance_transaction: Object
  failure_reason: String
  id: String!
  instructions_email: String
  metadata: Object
  next_action: Object
  object: String!
  payment_intent: Object
  reason: String
  receipt_number: String
  source_transfer_reversal: Object
  status: String
  transfer_reversal: Object
}

type refund_destination_details {
  affirm: Object
  afterpay_clearpay: Object
  alipay: Object
  au_bank_transfer: Object
  blik: Object
  br_bank_transfer: Object
  card: Object
  cashapp: Object
  customer_cash_balance: Object
  eps: Object
  eu_bank_transfer: Object
  gb_bank_transfer: Object
  giropay: Object
  grabpay: Object
  jp_bank_transfer: Object
  klarna: Object
  mx_bank_transfer: Object
  p24: Object
  paynow: Object
  paypal: Object
  pix: Object
  revolut: Object
  sofort: Object
  swish: Object
  th_bank_transfer: Object
  type: String!
  us_bank_transfer: Object
  wechat_pay: Object
  zip: Object
}

type refund_destination_details_card {
  reference: String
  reference_status: String
  reference_type: String
  type: String!
}

type refund_destination_details_generic {
  reference: String
  reference_status: String
}

type refund_next_action {
  display_details: Object
  type: String!
}

type refund_next_action_display_details {
  email_sent: Object!
  expires_at: Int!
}

type reporting.report_run {
  created: Int!
  error: String
  id: String!
  livemode: Boolean!
  object: String!
  parameters: Object!
  report_type: String!
  result: Object
  status: String!
  succeeded_at: Int
}

type reporting.report_type {
  data_available_end: Int!
  data_available_start: Int!
  default_columns: Array
  id: String!
  livemode: Boolean!
  name: String!
  object: String!
  updated: Int!
  version: Int!
}

type reserve_transaction {
  amount: Int!
  currency: String!
  description: String
  id: String!
  object: String!
}

type review {
  billing_zip: String
  charge: Object
  closed_reason: String
  created: Int!
  id: String!
  ip_address: String
  ip_address_location: Object
  livemode: Boolean!
  object: String!
  open: Boolean!
  opened_reason: String!
  payment_intent: Object
  reason: String!
  session: Object
}

type rule {
  action: String!
  id: String!
  predicate: String!
}

type scheduled_query_run {
  created: Int!
  data_load_time: Int!
  error: Object
  file: Object
  id: String!
  livemode: Boolean!
  object: String!
  result_available_until: Int!
  sql: String!
  status: String!
  title: String!
}

type schedules_phase_automatic_tax {
  enabled: Boolean!
  liability: Object
}

type secret_service_resource_scope {
  type: String!
  user: String
}

type sepa_debit_generated_from {
  charge: Object
  setup_attempt: Object
}

type setup_attempt {
  application: Object
  attach_to_self: Boolean
  created: Int!
  customer: Object
  flow_directions: Array
  id: String!
  livemode: Boolean!
  object: String!
  on_behalf_of: Object
  payment_method: Object!
  payment_method_details: Object!
  setup_error: Object
  setup_intent: Object!
  status: String!
  usage: String!
}

type setup_attempt_payment_method_details {
  acss_debit: Object
  au_becs_debit: Object
  bacs_debit: Object
  bancontact: Object
  boleto: Object
  card: Object
  card_present: Object
  cashapp: Object
  ideal: Object
  klarna: Object
  link: Object
  paypal: Object
  sepa_debit: Object
  sofort: Object
  type: String!
  us_bank_account: Object
}

type setup_attempt_payment_method_details_bancontact {
  bank_code: String
  bank_name: String
  bic: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  preferred_language: String
  verified_name: String
}

type setup_attempt_payment_method_details_card {
  brand: String
  checks: Object
  country: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  network: String
  three_d_secure: Object
  wallet: Object
}

type setup_attempt_payment_method_details_card_checks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

type setup_attempt_payment_method_details_card_present {
  generated_card: Object
}

type setup_attempt_payment_method_details_card_wallet {
  apple_pay: Object
  google_pay: Object
  type: String!
}

type setup_attempt_payment_method_details_ideal {
  bank: String
  bic: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  verified_name: String
}

type setup_attempt_payment_method_details_sofort {
  bank_code: String
  bank_name: String
  bic: String
  generated_sepa_debit: Object
  generated_sepa_debit_mandate: Object
  iban_last4: String
  preferred_language: String
  verified_name: String
}

type setup_intent {
  application: Object
  attach_to_self: Boolean
  automatic_payment_methods: Object
  cancellation_reason: String
  client_secret: String
  created: Int!
  customer: Object
  description: String
  flow_directions: Array
  id: String!
  last_setup_error: Object
  latest_attempt: Object
  livemode: Boolean!
  mandate: Object
  metadata: Object
  next_action: Object
  object: String!
  on_behalf_of: Object
  payment_method: Object
  payment_method_configuration_details: Object
  payment_method_options: Object
  payment_method_types: Array!
  single_use_mandate: Object
  status: String!
  usage: String!
}

type setup_intent_next_action {
  cashapp_handle_redirect_or_display_qr_code: Object
  redirect_to_url: Object
  type: String!
  use_stripe_sdk: Object
  verify_with_microdeposits: Object
}

type setup_intent_next_action_redirect_to_url {
  return_url: String
  url: String
}

type setup_intent_next_action_verify_with_microdeposits {
  arrival_date: Int!
  hosted_verification_url: String!
  microdeposit_type: String
}

type setup_intent_payment_method_options {
  acss_debit: Object
  card: Object
  link: Object
  paypal: Object
  sepa_debit: Object
  us_bank_account: Object
}

type setup_intent_payment_method_options_acss_debit {
  currency: String
  mandate_options: Object
  verification_method: String
}

type setup_intent_payment_method_options_card {
  mandate_options: Object
  network: String
  request_three_d_secure: String
}

type setup_intent_payment_method_options_card_mandate_options {
  amount: Int!
  amount_type: String!
  currency: String!
  description: String
  end_date: Int
  interval: String!
  interval_count: Int
  reference: String!
  start_date: Int!
  supported_types: Array
}

type setup_intent_payment_method_options_mandate_options_acss_debit {
  custom_mandate_url: String
  default_for: Array
  interval_description: String
  payment_schedule: String
  transaction_type: String
}

type setup_intent_payment_method_options_paypal {
  billing_agreement_id: String
}

type setup_intent_payment_method_options_sepa_debit {
  mandate_options: Object
}

type setup_intent_payment_method_options_us_bank_account {
  financial_connections: Object
  mandate_options: Object
  verification_method: String
}

type setup_intent_type_specific_payment_method_options_client {
  verification_method: String
}

type shipping {
  address: Object
  carrier: String
  name: String
  phone: String
  tracking_number: String
}

type shipping_rate {
  active: Boolean!
  created: Int!
  delivery_estimate: Object
  display_name: String
  fixed_amount: Object
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  tax_behavior: String
  tax_code: Object
  type: String!
}

type shipping_rate_currency_option {
  amount: Int!
  tax_behavior: String!
}

type shipping_rate_delivery_estimate {
  maximum: Object
  minimum: Object
}

type shipping_rate_delivery_estimate_bound {
  unit: String!
  value: Int!
}

type shipping_rate_fixed_amount {
  amount: Int!
  currency: String!
  currency_options: Object
}

type sigma_scheduled_query_run_error {
  message: String!
}

type source {
  ach_credit_transfer: Object
  ach_debit: Object
  acss_debit: Object
  alipay: Object
  amount: Int
  au_becs_debit: Object
  bancontact: Object
  card: Object
  card_present: Object
  client_secret: String!
  code_verification: Object
  created: Int!
  currency: String
  customer: String
  eps: Object
  flow: String!
  giropay: Object
  id: String!
  ideal: Object
  klarna: Object
  livemode: Boolean!
  metadata: Object
  multibanco: Object
  object: String!
  owner: Object
  p24: Object
  receiver: Object
  redirect: Object
  sepa_debit: Object
  sofort: Object
  source_order: Object
  statement_descriptor: String
  status: String!
  three_d_secure: Object
  type: String!
  usage: String
  wechat: Object
}

type source_code_verification_flow {
  attempts_remaining: Int!
  status: String!
}

type source_mandate_notification {
  acss_debit: Object
  amount: Int
  bacs_debit: Object
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  reason: String!
  sepa_debit: Object
  source: Object!
  status: String!
  type: String!
}

type source_mandate_notification_acss_debit_data {
  statement_descriptor: String
}

type source_mandate_notification_bacs_debit_data {
  last4: String
}

type source_mandate_notification_sepa_debit_data {
  creditor_identifier: String
  last4: String
  mandate_reference: String
}

type source_order {
  amount: Int!
  currency: String!
  email: String
  items: Array
  shipping: Object
}

type source_order_item {
  amount: Int
  currency: String
  description: String
  parent: String
  quantity: Int
  type: String
}

type source_owner {
  address: Object
  email: String
  name: String
  phone: String
  verified_address: Object
  verified_email: String
  verified_name: String
  verified_phone: String
}

type source_receiver_flow {
  address: String
  amount_charged: Int!
  amount_received: Int!
  amount_returned: Int!
  refund_attributes_method: String!
  refund_attributes_status: String!
}

type source_redirect_flow {
  failure_reason: String
  return_url: String!
  status: String!
  url: String!
}

type source_transaction {
  ach_credit_transfer: Object
  amount: Int!
  chf_credit_transfer: Object
  created: Int!
  currency: String!
  gbp_credit_transfer: Object
  id: String!
  livemode: Boolean!
  object: String!
  paper_check: Object
  sepa_credit_transfer: Object
  source: String!
  status: String!
  type: String!
}

type source_transaction_ach_credit_transfer_data {
  customer_data: String
  fingerprint: String
  last4: String
  routing_number: String
}

type source_transaction_chf_credit_transfer_data {
  reference: String
  sender_address_country: String
  sender_address_line1: String
  sender_iban: String
  sender_name: String
}

type source_transaction_gbp_credit_transfer_data {
  fingerprint: String
  funding_method: String
  last4: String
  reference: String
  sender_account_number: String
  sender_name: String
  sender_sort_code: String
}

type source_transaction_paper_check_data {
  available_at: String
  invoices: String
}

type source_transaction_sepa_credit_transfer_data {
  reference: String
  sender_iban: String
  sender_name: String
}

type source_type_ach_credit_transfer {
  account_number: String
  bank_name: String
  fingerprint: String
  refund_account_holder_name: String
  refund_account_holder_type: String
  refund_routing_number: String
  routing_number: String
  swift_code: String
}

type source_type_ach_debit {
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
  type: String
}

type source_type_acss_debit {
  bank_address_city: String
  bank_address_line_1: String
  bank_address_line_2: String
  bank_address_postal_code: String
  bank_name: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

type source_type_alipay {
  data_string: String
  native_url: String
  statement_descriptor: String
}

type source_type_au_becs_debit {
  bsb_number: String
  fingerprint: String
  last4: String
}

type source_type_bancontact {
  bank_code: String
  bank_name: String
  bic: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type source_type_card {
  address_line1_check: String
  address_zip_check: String
  brand: String
  country: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type source_type_card_present {
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  brand: String
  country: String
  cvm_type: String
  data_type: String
  dedicated_file_name: String
  emv_auth_data: String
  evidence_customer_signature: String
  evidence_transaction_certificate: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  pos_device_id: String
  pos_entry_mode: String
  read_method: String
  reader: String
  terminal_verification_results: String
  transaction_status_information: String
}

type source_type_eps {
  reference: String
  statement_descriptor: String
}

type source_type_giropay {
  bank_code: String
  bank_name: String
  bic: String
  statement_descriptor: String
}

type source_type_ideal {
  bank: String
  bic: String
  iban_last4: String
  statement_descriptor: String
}

type source_type_klarna {
  background_image_url: String
  client_token: String
  first_name: String
  last_name: String
  locale: String
  logo_url: String
  page_title: String
  pay_later_asset_urls_descriptive: String
  pay_later_asset_urls_standard: String
  pay_later_name: String
  pay_later_redirect_url: String
  pay_now_asset_urls_descriptive: String
  pay_now_asset_urls_standard: String
  pay_now_name: String
  pay_now_redirect_url: String
  pay_over_time_asset_urls_descriptive: String
  pay_over_time_asset_urls_standard: String
  pay_over_time_name: String
  pay_over_time_redirect_url: String
  payment_method_categories: String
  purchase_country: String
  purchase_type: String
  redirect_url: String
  shipping_delay: Int
  shipping_first_name: String
  shipping_last_name: String
}

type source_type_multibanco {
  entity: String
  reference: String
  refund_account_holder_address_city: String
  refund_account_holder_address_country: String
  refund_account_holder_address_line1: String
  refund_account_holder_address_line2: String
  refund_account_holder_address_postal_code: String
  refund_account_holder_address_state: String
  refund_account_holder_name: String
  refund_iban: String
}

type source_type_p24 {
  reference: String
}

type source_type_sepa_debit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate_reference: String
  mandate_url: String
}

type source_type_sofort {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type source_type_three_d_secure {
  address_line1_check: String
  address_zip_check: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type source_type_wechat {
  prepay_id: String
  qr_code_url: String
  statement_descriptor: String
}

type subscription {
  application: Object
  application_fee_percent: Number
  automatic_tax: Object!
  billing_cycle_anchor: Int!
  billing_cycle_anchor_config: Object
  billing_thresholds: Object
  cancel_at: Int
  cancel_at_period_end: Boolean!
  canceled_at: Int
  cancellation_details: Object
  collection_method: String!
  created: Int!
  currency: String!
  current_period_end: Int!
  current_period_start: Int!
  customer: Object!
  days_until_due: Int
  default_payment_method: Object
  default_source: Object
  default_tax_rates: Array
  description: String
  discount: Object
  ended_at: Int
  id: String!
  items: Object!
  latest_invoice: Object
  livemode: Boolean!
  metadata: Object!
  next_pending_invoice_item_invoice: Int
  object: String!
  on_behalf_of: Object
  pause_collection: Object
  payment_settings: Object
  pending_invoice_item_interval: Object
  pending_setup_intent: Object
  pending_update: Object
  schedule: Object
  start_date: Int!
  status: String!
  test_clock: Object
  transfer_data: Object
  trial_end: Int
  trial_settings: Object
  trial_start: Int
}

type subscription_automatic_tax {
  enabled: Boolean!
  liability: Object
}

type subscription_billing_thresholds {
  amount_gte: Int
  reset_billing_cycle_anchor: Boolean
}

type subscription_details_data {
  metadata: Object
}

type subscription_item {
  billing_thresholds: Object
  created: Int!
  id: String!
  metadata: Object!
  object: String!
  price: Object!
  quantity: Int
  subscription: String!
  tax_rates: Array
}

type subscription_item_billing_thresholds {
  usage_gte: Int
}

type subscription_payment_method_options_card {
  mandate_options: Object
  network: String
  request_three_d_secure: String
}

type subscription_pending_invoice_item_interval {
  interval: String!
  interval_count: Int!
}

type subscription_schedule {
  application: Object
  canceled_at: Int
  completed_at: Int
  created: Int!
  current_phase: Object
  customer: Object!
  default_settings: Object!
  end_behavior: String!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  phases: Array!
  released_at: Int
  released_subscription: String
  status: String!
  subscription: Object
  test_clock: Object
}

type subscription_schedule_add_invoice_item {
  price: Object!
  quantity: Int
  tax_rates: Array
}

type subscription_schedule_configuration_item {
  billing_thresholds: Object
  metadata: Object
  price: Object!
  quantity: Int
  tax_rates: Array
}

type subscription_schedule_current_phase {
  end_date: Int!
  start_date: Int!
}

type subscription_schedule_phase_configuration {
  add_invoice_items: Array!
  application_fee_percent: Number
  automatic_tax: Object
  billing_cycle_anchor: String
  billing_thresholds: Object
  collection_method: String
  coupon: Object
  currency: String!
  default_payment_method: Object
  default_tax_rates: Array
  description: String
  end_date: Int!
  invoice_settings: Object
  items: Array!
  metadata: Object
  on_behalf_of: Object
  proration_behavior: String!
  start_date: Int!
  transfer_data: Object
  trial_end: Int
}

type subscription_schedules_resource_default_settings {
  application_fee_percent: Number
  automatic_tax: Object
  billing_cycle_anchor: String!
  billing_thresholds: Object
  collection_method: String
  default_payment_method: Object
  description: String
  invoice_settings: Object!
  on_behalf_of: Object
  transfer_data: Object
}

type subscription_schedules_resource_default_settings_automatic_tax {
  enabled: Boolean!
  liability: Object
}

type subscription_transfer_data {
  amount_percent: Number
  destination: Object!
}

type subscriptions_resource_billing_cycle_anchor_config {
  day_of_month: Int!
  hour: Int
  minute: Int
  month: Int
  second: Int
}

type subscriptions_resource_pause_collection {
  behavior: String!
  resumes_at: Int
}

type subscriptions_resource_payment_method_options {
  acss_debit: Object
  bancontact: Object
  card: Object
  customer_balance: Object
  konbini: Object
  sepa_debit: Object
  us_bank_account: Object
}

type subscriptions_resource_payment_settings {
  payment_method_options: Object
  payment_method_types: Array
  save_default_payment_method: String
}

type subscriptions_resource_pending_update {
  billing_cycle_anchor: Int
  expires_at: Int!
  subscription_items: Array
  trial_end: Int
  trial_from_plan: Boolean
}

type subscriptions_trials_resource_end_behavior {
  missing_payment_method: String!
}

type subscriptions_trials_resource_trial_settings {
  end_behavior: Object!
}

type tax.calculation {
  amount_total: Int!
  currency: String!
  customer: String
  customer_details: Object!
  expires_at: Int
  id: String
  line_items: Object
  livemode: Boolean!
  object: String!
  shipping_cost: Object
  tax_amount_exclusive: Int!
  tax_amount_inclusive: Int!
  tax_breakdown: Array!
  tax_date: Int!
}

type tax.calculation_line_item {
  amount: Int!
  amount_tax: Int!
  id: String!
  livemode: Boolean!
  object: String!
  product: String
  quantity: Int!
  reference: String
  tax_behavior: String!
  tax_breakdown: Array
  tax_code: String!
}

type tax.registration {
  active_from: Int!
  country: String!
  country_options: Object!
  created: Int!
  expires_at: Int
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
}

type tax.settings {
  defaults: Object!
  head_office: Object
  livemode: Boolean!
  object: String!
  status: String!
  status_details: Object!
}

type tax.transaction {
  created: Int!
  currency: String!
  customer: String
  customer_details: Object!
  id: String!
  line_items: Object
  livemode: Boolean!
  metadata: Object
  object: String!
  reference: String!
  reversal: Object
  shipping_cost: Object
  tax_date: Int!
  type: String!
}

type tax.transaction_line_item {
  amount: Int!
  amount_tax: Int!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  product: String
  quantity: Int!
  reference: String!
  reversal: Object
  tax_behavior: String!
  tax_code: String!
  type: String!
}

type tax_code {
  description: String!
  id: String!
  name: String!
  object: String!
}

type tax_deducted_at_source {
  id: String!
  object: String!
  period_end: Int!
  period_start: Int!
  tax_deduction_account_number: String!
}

type tax_i_ds_owner {
  account: Object
  application: Object
  customer: Object
  type: String!
}

type tax_id {
  country: String
  created: Int!
  customer: Object
  id: String!
  livemode: Boolean!
  object: String!
  owner: Object
  type: String!
  value: String!
  verification: Object
}

type tax_id_verification {
  status: String!
  verified_address: String
  verified_name: String
}

type tax_product_registrations_resource_country_options {
  ae: Object
  at: Object
  au: Object
  be: Object
  bg: Object
  ca: Object
  ch: Object
  cl: Object
  co: Object
  cy: Object
  cz: Object
  de: Object
  dk: Object
  ee: Object
  es: Object
  fi: Object
  fr: Object
  gb: Object
  gr: Object
  hr: Object
  hu: Object
  id: Object
  ie: Object
  is: Object
  it: Object
  jp: Object
  kr: Object
  lt: Object
  lu: Object
  lv: Object
  mt: Object
  mx: Object
  my: Object
  nl: Object
  no: Object
  nz: Object
  pl: Object
  pt: Object
  ro: Object
  sa: Object
  se: Object
  sg: Object
  si: Object
  sk: Object
  th: Object
  tr: Object
  us: Object
  vn: Object
  za: Object
}

type tax_product_registrations_resource_country_options_ca_province_standard {
  province: String!
}

type tax_product_registrations_resource_country_options_canada {
  province_standard: Object
  type: String!
}

type tax_product_registrations_resource_country_options_default {
  type: String!
}

type tax_product_registrations_resource_country_options_eu_standard {
  place_of_supply_scheme: String!
}

type tax_product_registrations_resource_country_options_europe {
  standard: Object
  type: String!
}

type tax_product_registrations_resource_country_options_simplified {
  type: String!
}

type tax_product_registrations_resource_country_options_united_states {
  local_amusement_tax: Object
  local_lease_tax: Object
  state: String!
  type: String!
}

type tax_product_registrations_resource_country_options_us_local_amusement_tax {
  jurisdiction: String!
}

type tax_product_registrations_resource_country_options_us_local_lease_tax {
  jurisdiction: String!
}

type tax_product_resource_customer_details {
  address: Object
  address_source: String
  ip_address: String
  tax_ids: Array!
  taxability_override: String!
}

type tax_product_resource_customer_details_resource_tax_id {
  type: String!
  value: String!
}

type tax_product_resource_jurisdiction {
  country: String!
  display_name: String!
  level: String!
  state: String
}

type tax_product_resource_line_item_tax_breakdown {
  amount: Int!
  jurisdiction: Object!
  sourcing: String!
  tax_rate_details: Object
  taxability_reason: String!
  taxable_amount: Int!
}

type tax_product_resource_line_item_tax_rate_details {
  display_name: String!
  percentage_decimal: String!
  tax_type: String!
}

type tax_product_resource_postal_address {
  city: String
  country: String!
  line1: String
  line2: String
  postal_code: String
  state: String
}

type tax_product_resource_tax_breakdown {
  amount: Int!
  inclusive: Boolean!
  tax_rate_details: Object!
  taxability_reason: String!
  taxable_amount: Int!
}

type tax_product_resource_tax_calculation_shipping_cost {
  amount: Int!
  amount_tax: Int!
  shipping_rate: String
  tax_behavior: String!
  tax_breakdown: Array
  tax_code: String!
}

type tax_product_resource_tax_rate_details {
  country: String
  percentage_decimal: String!
  state: String
  tax_type: String
}

type tax_product_resource_tax_settings_defaults {
  tax_behavior: String
  tax_code: String
}

type tax_product_resource_tax_settings_head_office {
  address: Object!
}

type tax_product_resource_tax_settings_status_details {
  active: Object
  pending: Object
}

type tax_product_resource_tax_settings_status_details_resource_pending {
  missing_fields: Array
}

type tax_product_resource_tax_transaction_line_item_resource_reversal {
  original_line_item: String!
}

type tax_product_resource_tax_transaction_resource_reversal {
  original_transaction: String
}

type tax_product_resource_tax_transaction_shipping_cost {
  amount: Int!
  amount_tax: Int!
  shipping_rate: String
  tax_behavior: String!
  tax_code: String!
}

type tax_rate {
  active: Boolean!
  country: String
  created: Int!
  description: String
  display_name: String!
  effective_percentage: Number
  id: String!
  inclusive: Boolean!
  jurisdiction: String
  jurisdiction_level: String
  livemode: Boolean!
  metadata: Object
  object: String!
  percentage: Number!
  state: String
  tax_type: String
}

type terminal.configuration {
  bbpos_wisepos_e: Object
  id: String!
  is_account_default: Boolean
  livemode: Boolean!
  name: String
  object: String!
  offline: Object
  tipping: Object
  verifone_p400: Object
}

type terminal.connection_token {
  location: String
  object: String!
  secret: String!
}

type terminal.location {
  address: Object!
  configuration_overrides: String
  display_name: String!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
}

type terminal.reader {
  action: Object
  device_sw_version: String
  device_type: String!
  id: String!
  ip_address: String
  label: String!
  livemode: Boolean!
  location: Object
  metadata: Object!
  object: String!
  serial_number: String!
  status: String
}

type terminal_configuration_configuration_resource_currency_specific_config {
  fixed_amounts: Array
  percentages: Array
  smart_tip_threshold: Int
}

type terminal_configuration_configuration_resource_device_type_specific_config {
  splashscreen: Object
}

type terminal_configuration_configuration_resource_offline_config {
  enabled: Boolean
}

type terminal_configuration_configuration_resource_tipping {
  aud: Object
  cad: Object
  chf: Object
  czk: Object
  dkk: Object
  eur: Object
  gbp: Object
  hkd: Object
  myr: Object
  nok: Object
  nzd: Object
  sek: Object
  sgd: Object
  usd: Object
}

type terminal_reader_reader_resource_cart {
  currency: String!
  line_items: Array!
  tax: Int
  total: Int!
}

type terminal_reader_reader_resource_line_item {
  amount: Int!
  description: String!
  quantity: Int!
}

type terminal_reader_reader_resource_process_config {
  enable_customer_cancellation: Boolean
  skip_tipping: Boolean
  tipping: Object
}

type terminal_reader_reader_resource_process_payment_intent_action {
  payment_intent: Object!
  process_config: Object
}

type terminal_reader_reader_resource_process_setup_config {
  enable_customer_cancellation: Boolean
}

type terminal_reader_reader_resource_process_setup_intent_action {
  generated_card: String
  process_config: Object
  setup_intent: Object!
}

type terminal_reader_reader_resource_reader_action {
  failure_code: String
  failure_message: String
  process_payment_intent: Object
  process_setup_intent: Object
  refund_payment: Object
  set_reader_display: Object
  status: String!
  type: String!
}

type terminal_reader_reader_resource_refund_payment_action {
  amount: Int
  charge: Object
  metadata: Object
  payment_intent: Object
  reason: String
  refund: Object
  refund_application_fee: Boolean
  refund_payment_config: Object
  reverse_transfer: Boolean
}

type terminal_reader_reader_resource_refund_payment_config {
  enable_customer_cancellation: Boolean
}

type terminal_reader_reader_resource_set_reader_display_action {
  cart: Object
  type: String!
}

type terminal_reader_reader_resource_tipping_config {
  amount_eligible: Int
}

type test_helpers.test_clock {
  created: Int!
  deletes_after: Int!
  frozen_time: Int!
  id: String!
  livemode: Boolean!
  name: String
  object: String!
  status: String!
}

type three_d_secure_details {
  authentication_flow: String
  electronic_commerce_indicator: String
  result: String
  result_reason: String
  transaction_id: String
  version: String
}

type three_d_secure_details_charge {
  authentication_flow: String
  electronic_commerce_indicator: String
  exemption_indicator: String
  exemption_indicator_applied: Boolean
  result: String
  result_reason: String
  transaction_id: String
  version: String
}

type three_d_secure_usage {
  supported: Boolean!
}

type token {
  bank_account: Object
  card: Object
  client_ip: String
  created: Int!
  id: String!
  livemode: Boolean!
  object: String!
  type: String!
  used: Boolean!
}

type token_card_networks {
  preferred: String
}

type topup {
  amount: Int!
  balance_transaction: Object
  created: Int!
  currency: String!
  description: String
  expected_availability_date: Int
  failure_code: String
  failure_message: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  source: Object
  statement_descriptor: String
  status: String!
  transfer_group: String
}

type transfer {
  amount: Int!
  amount_reversed: Int!
  balance_transaction: Object
  created: Int!
  currency: String!
  description: String
  destination: Object
  destination_payment: Object
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  reversals: Object!
  reversed: Boolean!
  source_transaction: Object
  source_type: String
  transfer_group: String
}

type transfer_data {
  amount: Int
  destination: Object!
}

type transfer_reversal {
  amount: Int!
  balance_transaction: Object
  created: Int!
  currency: String!
  destination_payment_refund: Object
  id: String!
  metadata: Object
  object: String!
  source_refund: Object
  transfer: Object!
}

type transfer_schedule {
  delay_days: Int!
  interval: String!
  monthly_anchor: Int
  weekly_anchor: String
}

type transform_quantity {
  divide_by: Int!
  round: String!
}

type transform_usage {
  divide_by: Int!
  round: String!
}

type treasury.credit_reversal {
  amount: Int!
  created: Int!
  currency: String!
  financial_account: String!
  hosted_regulatory_receipt_url: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  network: String!
  object: String!
  received_credit: String!
  status: String!
  status_transitions: Object!
  transaction: Object
}

type treasury.debit_reversal {
  amount: Int!
  created: Int!
  currency: String!
  financial_account: String
  hosted_regulatory_receipt_url: String
  id: String!
  linked_flows: Object
  livemode: Boolean!
  metadata: Object!
  network: String!
  object: String!
  received_debit: String!
  status: String!
  status_transitions: Object!
  transaction: Object
}

type treasury.financial_account {
  active_features: Array
  balance: Object!
  country: String!
  created: Int!
  features: Object
  financial_addresses: Array!
  id: String!
  livemode: Boolean!
  metadata: Object
  object: String!
  pending_features: Array
  platform_restrictions: Object
  restricted_features: Array
  status: String!
  status_details: Object!
  supported_currencies: Array!
}

type treasury.financial_account_features {
  card_issuing: Object
  deposit_insurance: Object
  financial_addresses: Object
  inbound_transfers: Object
  intra_stripe_flows: Object
  object: String!
  outbound_payments: Object
  outbound_transfers: Object
}

type treasury.inbound_transfer {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  description: String
  failure_details: Object
  financial_account: String!
  hosted_regulatory_receipt_url: String
  id: String!
  linked_flows: Object!
  livemode: Boolean!
  metadata: Object!
  object: String!
  origin_payment_method: String!
  origin_payment_method_details: Object
  returned: Boolean
  statement_descriptor: String!
  status: String!
  status_transitions: Object!
  transaction: Object
}

type treasury.outbound_payment {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  customer: String
  description: String
  destination_payment_method: String
  destination_payment_method_details: Object
  end_user_details: Object
  expected_arrival_date: Int!
  financial_account: String!
  hosted_regulatory_receipt_url: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  returned_details: Object
  statement_descriptor: String!
  status: String!
  status_transitions: Object!
  transaction: Object!
}

type treasury.outbound_transfer {
  amount: Int!
  cancelable: Boolean!
  created: Int!
  currency: String!
  description: String
  destination_payment_method: String
  destination_payment_method_details: Object!
  expected_arrival_date: Int!
  financial_account: String!
  hosted_regulatory_receipt_url: String
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  returned_details: Object
  statement_descriptor: String!
  status: String!
  status_transitions: Object!
  transaction: Object!
}

type treasury.received_credit {
  amount: Int!
  created: Int!
  currency: String!
  description: String!
  failure_code: String
  financial_account: String
  hosted_regulatory_receipt_url: String
  id: String!
  initiating_payment_method_details: Object!
  linked_flows: Object!
  livemode: Boolean!
  network: String!
  object: String!
  reversal_details: Object
  status: String!
  transaction: Object
}

type treasury.received_debit {
  amount: Int!
  created: Int!
  currency: String!
  description: String!
  failure_code: String
  financial_account: String
  hosted_regulatory_receipt_url: String
  id: String!
  initiating_payment_method_details: Object
  linked_flows: Object!
  livemode: Boolean!
  network: String!
  object: String!
  reversal_details: Object
  status: String!
  transaction: Object
}

type treasury.transaction {
  amount: Int!
  balance_impact: Object!
  created: Int!
  currency: String!
  description: String!
  entries: Object
  financial_account: String!
  flow: String
  flow_details: Object
  flow_type: String!
  id: String!
  livemode: Boolean!
  object: String!
  status: String!
  status_transitions: Object!
}

type treasury.transaction_entry {
  balance_impact: Object!
  created: Int!
  currency: String!
  effective_at: Int!
  financial_account: String!
  flow: String
  flow_details: Object
  flow_type: String!
  id: String!
  livemode: Boolean!
  object: String!
  transaction: Object!
  type: String!
}

type treasury_financial_accounts_resource_aba_record {
  account_holder_name: String!
  account_number: String
  account_number_last4: String!
  bank_name: String!
  routing_number: String!
}

type treasury_financial_accounts_resource_aba_toggle_settings {
  requested: Boolean!
  status: String!
  status_details: Array!
}

type treasury_financial_accounts_resource_ach_toggle_settings {
  requested: Boolean!
  status: String!
  status_details: Array!
}

type treasury_financial_accounts_resource_balance {
  cash: Object!
  inbound_pending: Object!
  outbound_pending: Object!
}

type treasury_financial_accounts_resource_closed_status_details {
  reasons: Array!
}

type treasury_financial_accounts_resource_financial_address {
  aba: Object
  supported_networks: Array
  type: String!
}

type treasury_financial_accounts_resource_financial_addresses_features {
  aba: Object
}

type treasury_financial_accounts_resource_inbound_transfers {
  ach: Object
}

type treasury_financial_accounts_resource_outbound_payments {
  ach: Object
  us_domestic_wire: Object
}

type treasury_financial_accounts_resource_outbound_transfers {
  ach: Object
  us_domestic_wire: Object
}

type treasury_financial_accounts_resource_platform_restrictions {
  inbound_flows: String
  outbound_flows: String
}

type treasury_financial_accounts_resource_status_details {
  closed: Object
}

type treasury_financial_accounts_resource_toggle_settings {
  requested: Boolean!
  status: String!
  status_details: Array!
}

type treasury_financial_accounts_resource_toggles_setting_status_details {
  code: String!
  resolution: String
  restriction: String
}

type treasury_inbound_transfers_resource_failure_details {
  code: String!
}

type treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows {
  received_debit: String
}

type treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions {
  canceled_at: Int
  failed_at: Int
  succeeded_at: Int
}

type treasury_outbound_payments_resource_outbound_payment_resource_end_user_details {
  ip_address: String
  present: Boolean!
}

type treasury_outbound_payments_resource_outbound_payment_resource_status_transitions {
  canceled_at: Int
  failed_at: Int
  posted_at: Int
  returned_at: Int
}

type treasury_outbound_payments_resource_returned_status {
  code: String!
  transaction: Object!
}

type treasury_outbound_transfers_resource_returned_details {
  code: String!
  transaction: Object!
}

type treasury_outbound_transfers_resource_status_transitions {
  canceled_at: Int
  failed_at: Int
  posted_at: Int
  returned_at: Int
}

type treasury_received_credits_resource_linked_flows {
  credit_reversal: String
  issuing_authorization: String
  issuing_transaction: String
  source_flow: String
  source_flow_details: Object
  source_flow_type: String
}

type treasury_received_credits_resource_reversal_details {
  deadline: Int
  restricted_reason: String
}

type treasury_received_credits_resource_source_flows_details {
  credit_reversal: Object
  outbound_payment: Object
  payout: Object
  type: String!
}

type treasury_received_credits_resource_status_transitions {
  posted_at: Int
}

type treasury_received_debits_resource_debit_reversal_linked_flows {
  issuing_dispute: String
}

type treasury_received_debits_resource_linked_flows {
  debit_reversal: String
  inbound_transfer: String
  issuing_authorization: String
  issuing_transaction: String
  payout: String
}

type treasury_received_debits_resource_reversal_details {
  deadline: Int
  restricted_reason: String
}

type treasury_received_debits_resource_status_transitions {
  completed_at: Int
}

type treasury_shared_resource_billing_details {
  address: Object!
  email: String
  name: String
}

type treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details {
  balance: String
  billing_details: Object!
  financial_account: Object
  issuing_card: String
  type: String!
  us_bank_account: Object
}

type treasury_shared_resource_initiating_payment_method_details_us_bank_account {
  bank_name: String
  last4: String
  routing_number: String
}

type treasury_transactions_resource_abstract_transaction_resource_status_transitions {
  posted_at: Int
  void_at: Int
}

type treasury_transactions_resource_balance_impact {
  cash: Int!
  inbound_pending: Int!
  outbound_pending: Int!
}

type treasury_transactions_resource_flow_details {
  credit_reversal: Object
  debit_reversal: Object
  inbound_transfer: Object
  issuing_authorization: Object
  outbound_payment: Object
  outbound_transfer: Object
  received_credit: Object
  received_debit: Object
  type: String!
}

type us_bank_account_networks {
  preferred: String
  supported: Array!
}

type usage_record {
  id: String!
  livemode: Boolean!
  object: String!
  quantity: Int!
  subscription_item: String!
  timestamp: Int!
}

type usage_record_summary {
  id: String!
  invoice: String
  livemode: Boolean!
  object: String!
  period: Object!
  subscription_item: String!
  total_usage: Int!
}

type verification_session_redaction {
  status: String!
}

type webhook_endpoint {
  api_version: String
  application: String
  created: Int!
  description: String
  enabled_events: Array!
  id: String!
  livemode: Boolean!
  metadata: Object!
  object: String!
  secret: String
  status: String!
  url: String!
}
