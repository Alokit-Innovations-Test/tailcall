  for (type_of, all_subgraph_fields) in type_subgraph_fields.clone() {
    let mut all_subgraph_keys: BTreeMap<String, Vec<String>> = BTreeMap::new();
    for (url, fields) in all_subgraph_fields.0 {
      let all_field_names = fields.iter().map(|(field_name, _)| field_name).collect::<Vec<_>>();
      let subgraph_keys = match blueprint.definitions.iter().find(|def| def.name() == type_of) {
        Some(def) => {
          if let Definition::ObjectTypeDefinition(def) = def {
            def
              .join_types
              .iter()
              .filter(|join_type| join_type.base_url.clone().unwrap_or_default() == url)
              .map(|join_type| join_type.key.clone())
              .filter(|key| all_field_names.contains(&key))
              .collect::<Vec<_>>()
          } else {
            Vec::new()
          }
        }
        None => Vec::new(),
      };
      all_subgraph_keys.insert(url, subgraph_keys);
    }
    type_subgraph_keys.insert(type_of, all_subgraph_keys);
  }
