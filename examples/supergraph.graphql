schema
  @server(port: 8000, graphiql: true, hostname: "0.0.0.0")
  @upstream(baseURL: "http://jsonplaceholder.typicode.com", httpCache: true) {
  query: Query
}

type Query {
  # allPandas: [Panda] @join__field(graph: PANDAS)
  # panda(name: ID!): Panda @join__field(graph: PANDAS)
  allProducts: [Product]
    @graphql(name: "allProducts", baseURL: "http://localhost:4001/graphql", filterSelectionSet: true)
  product(id: ID!): Product
    @graphql(
      name: "product"
      args: [{key: "id", value: "{{args.id}}"}]
      baseURL: "http://localhost:4001/graphql"
      filterSelectionSet: true
    )
  # review(id: Int!): Review @join__field(graph: REVIEWS)
}

type Product {
  id: ID
  sku: String
  name: String
  package: String
  variation: ProductVariation
  createdBy: User
  hidden: String
  reviewsScore: Float! @graphql(args: [{key: "id", value: "{{value.id}}"}], baseURL: "http://localhost:4005/graphql")
  oldField: String
  reviewsCount: Int! @graphql(args: [{key: "id", value: "{{value.id}}"}], baseURL: "http://localhost:4005/graphql")
  reviews: [Review!]! @graphql(args: [{key: "id", value: "{{value.id}}"}], baseURL: "http://localhost:4005/graphql")
}

# interface ProductItf {
# 	name: String
# 	createdBy: User
# }

type ProductVariation {
  id: ID!
  name: String
}

type Review {
  id: Int!
  body: String!
}

type User {
  name: String @graphql(args: [{key: "email", value: "{{value.email}}"}], baseURL: "http://localhost:4003/graphql")
  email: String
  totalProductsCreated: Int
}
